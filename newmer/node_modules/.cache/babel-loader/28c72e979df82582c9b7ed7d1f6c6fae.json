{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var $,\n      ABS,\n      ADD,\n      ADJ,\n      AND,\n      APPROXRATIO,\n      ARCCOS,\n      ARCCOSH,\n      ARCSIN,\n      ARCSINH,\n      ARCTAN,\n      ARCTANH,\n      ARG,\n      ASSUME_REAL_VARIABLES,\n      ATOMIZE,\n      AUTOEXPAND,\n      BAKE,\n      BESSELJ,\n      BESSELY,\n      BINDING,\n      BINOMIAL,\n      BINOM_check_args,\n      BUF,\n      C1,\n      C2,\n      C3,\n      C4,\n      C5,\n      C6,\n      CEILING,\n      CHECK,\n      CHOOSE,\n      CIRCEXP,\n      CLEAR,\n      CLEARALL,\n      CLEARPATTERNS,\n      CLOCK,\n      COEFF,\n      COFACTOR,\n      CONDENSE,\n      CONJ,\n      CONS,\n      CONTRACT,\n      COS,\n      COSH,\n      Condense,\n      DEBUG,\n      DEBUG_ABS,\n      DEBUG_ARG,\n      DEBUG_CLOCKFORM,\n      DEBUG_IMAG,\n      DEBUG_IS,\n      DEBUG_POWER,\n      DEBUG_RECT,\n      DECOMP,\n      DEFINT,\n      DEGREE,\n      DENOMINATOR,\n      DERIVATIVE,\n      DET,\n      DET_check_arg,\n      DIM,\n      DIRAC,\n      DIVISORS,\n      DO,\n      DOT,\n      DOUBLE,\n      DRAW,\n      DRAWX,\n      DSOLVE,\n      E,\n      EIGEN,\n      EIGENVAL,\n      EIGENVEC,\n      EIG_N,\n      EIG_check_arg,\n      EIG_yydd,\n      EIG_yyqq,\n      ERF,\n      ERFC,\n      EVAL,\n      EXP,\n      EXPAND,\n      EXPCOS,\n      EXPSIN,\n      Eval,\n      Eval_Eval,\n      Eval_abs,\n      Eval_add,\n      Eval_adj,\n      Eval_and,\n      Eval_approxratio,\n      Eval_arccos,\n      Eval_arccosh,\n      Eval_arcsin,\n      Eval_arcsinh,\n      Eval_arctan,\n      Eval_arctanh,\n      Eval_arg,\n      Eval_besselj,\n      Eval_bessely,\n      Eval_binding,\n      Eval_binomial,\n      Eval_ceiling,\n      Eval_check,\n      Eval_choose,\n      Eval_circexp,\n      Eval_clear,\n      Eval_clearall,\n      Eval_clearpatterns,\n      Eval_clock,\n      Eval_coeff,\n      Eval_cofactor,\n      Eval_condense,\n      Eval_conj,\n      Eval_cons,\n      Eval_contract,\n      Eval_cos,\n      Eval_cosh,\n      Eval_decomp,\n      Eval_defint,\n      Eval_degree,\n      Eval_denominator,\n      Eval_derivative,\n      Eval_det,\n      Eval_dim,\n      Eval_dirac,\n      Eval_divisors,\n      Eval_do,\n      Eval_dsolve,\n      Eval_eigen,\n      Eval_eigenval,\n      Eval_eigenvec,\n      Eval_erf,\n      Eval_erfc,\n      Eval_exp,\n      Eval_expand,\n      Eval_expcos,\n      Eval_expsin,\n      Eval_factor,\n      Eval_factorial,\n      Eval_factorpoly,\n      Eval_filter,\n      Eval_float,\n      Eval_floor,\n      Eval_for,\n      Eval_function_reference,\n      Eval_gamma,\n      Eval_gcd,\n      Eval_hermite,\n      Eval_hilbert,\n      Eval_imag,\n      Eval_index,\n      Eval_inner,\n      Eval_integral,\n      Eval_inv,\n      Eval_invg,\n      Eval_isinteger,\n      Eval_isprime,\n      Eval_laguerre,\n      Eval_lcm,\n      Eval_leading,\n      Eval_legendre,\n      Eval_log,\n      Eval_lookup,\n      Eval_mod,\n      Eval_multiply,\n      Eval_noexpand,\n      Eval_not,\n      Eval_nroots,\n      Eval_number,\n      Eval_numerator,\n      Eval_operator,\n      Eval_or,\n      Eval_outer,\n      Eval_pattern,\n      Eval_patternsinfo,\n      Eval_polar,\n      Eval_power,\n      Eval_predicate,\n      Eval_prime,\n      Eval_print,\n      Eval_print2dascii,\n      Eval_printcomputer,\n      Eval_printhuman,\n      Eval_printlatex,\n      Eval_printlist,\n      Eval_product,\n      Eval_quote,\n      Eval_quotient,\n      Eval_rank,\n      Eval_rationalize,\n      Eval_real,\n      Eval_rect,\n      Eval_roots,\n      Eval_round,\n      Eval_setq,\n      Eval_sgn,\n      Eval_shape,\n      Eval_silentpattern,\n      Eval_simfac,\n      Eval_simplify,\n      Eval_sin,\n      Eval_sinh,\n      Eval_sqrt,\n      Eval_stop,\n      Eval_subst,\n      Eval_sum,\n      Eval_sym,\n      Eval_symbolsinfo,\n      Eval_tan,\n      Eval_tanh,\n      Eval_taylor,\n      Eval_tensor,\n      Eval_test,\n      Eval_testeq,\n      Eval_testge,\n      Eval_testgt,\n      Eval_testle,\n      Eval_testlt,\n      Eval_transpose,\n      Eval_unit,\n      Eval_user_function,\n      Eval_zero,\n      Evalpoly,\n      FACTOR,\n      FACTORIAL,\n      FACTORPOLY,\n      FILTER,\n      FLOATF,\n      FLOOR,\n      FOR,\n      FORCE_FIXED_PRINTOUT,\n      FUNCTION,\n      Find,\n      GAMMA,\n      GCD,\n      HERMITE,\n      HILBERT,\n      IMAG,\n      INDEX,\n      INNER,\n      INTEGRAL,\n      INV,\n      INVG,\n      INV_check_arg,\n      INV_decomp,\n      ISINTEGER,\n      ISPRIME,\n      LAGUERRE,\n      LAST,\n      LAST_2DASCII_PRINT,\n      LAST_FULL_PRINT,\n      LAST_LATEX_PRINT,\n      LAST_LIST_PRINT,\n      LAST_PLAIN_PRINT,\n      LAST_PRINT,\n      LCM,\n      LEADING,\n      LEGENDRE,\n      LOG,\n      LOOKUP,\n      M,\n      MAXDIM,\n      MAXPRIMETAB,\n      MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES,\n      MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE,\n      MAX_FIXED_PRINTOUT_DIGITS,\n      MAX_PROGRAM_SIZE,\n      MEQUAL,\n      METAA,\n      METAB,\n      METAX,\n      MLENGTH,\n      MOD,\n      MSIGN,\n      MULTIPLY,\n      MZERO,\n      N,\n      NIL,\n      NOT,\n      NROOTS,\n      NROOTS_ABS,\n      NROOTS_DELTA,\n      NROOTS_EPSILON,\n      NROOTS_RANDOM,\n      NROOTS_YMAX,\n      NROOTS_divpoly,\n      NSYM,\n      NUM,\n      NUMBER,\n      NUMERATOR,\n      OPERATOR,\n      OR,\n      OUTER,\n      PATTERN,\n      PATTERNSINFO,\n      PI,\n      POLAR,\n      POWER,\n      PRIME,\n      PRINT,\n      PRINT2DASCII,\n      PRINTFULL,\n      PRINTLATEX,\n      PRINTLIST,\n      PRINTMODE_2DASCII,\n      PRINTMODE_COMPUTER,\n      PRINTMODE_HUMAN,\n      PRINTMODE_LATEX,\n      PRINTMODE_LIST,\n      PRINTOUTRESULT,\n      PRINTPLAIN,\n      PRINT_LEAVE_E_ALONE,\n      PRINT_LEAVE_X_ALONE,\n      PRODUCT,\n      QUOTE,\n      QUOTIENT,\n      RANK,\n      RATIONALIZE,\n      REAL,\n      ROOTS,\n      ROUND,\n      SECRETX,\n      SELFTEST,\n      SETQ,\n      SGN,\n      SHAPE,\n      SILENTPATTERN,\n      SIMPLIFY,\n      SIN,\n      SINH,\n      SPACE_BETWEEN_COLUMNS,\n      SPACE_BETWEEN_ROWS,\n      SQRT,\n      STOP,\n      STR,\n      SUBST,\n      SUM,\n      SYM,\n      SYMBOLSINFO,\n      SYMBOL_A,\n      SYMBOL_A_UNDERSCORE,\n      SYMBOL_B,\n      SYMBOL_B_UNDERSCORE,\n      SYMBOL_C,\n      SYMBOL_D,\n      SYMBOL_I,\n      SYMBOL_IDENTITY_MATRIX,\n      SYMBOL_J,\n      SYMBOL_N,\n      SYMBOL_R,\n      SYMBOL_S,\n      SYMBOL_T,\n      SYMBOL_X,\n      SYMBOL_X_UNDERSCORE,\n      SYMBOL_Y,\n      SYMBOL_Z,\n      TAN,\n      TANH,\n      TAYLOR,\n      TENSOR,\n      TEST,\n      TESTEQ,\n      TESTGE,\n      TESTGT,\n      TESTLE,\n      TESTLT,\n      TIMING_DEBUGS,\n      TOS,\n      TRACE,\n      TRANSPOSE,\n      T_DOUBLE,\n      T_EQ,\n      T_FUNCTION,\n      T_GTEQ,\n      T_INTEGER,\n      T_LTEQ,\n      T_NEQ,\n      T_NEWLINE,\n      T_QUOTASSIGN,\n      T_STRING,\n      T_SYMBOL,\n      U,\n      UNIT,\n      USR_SYMBOLS,\n      VERSION,\n      YMAX,\n      YYE,\n      YYRECT,\n      ZERO,\n      __emit_char,\n      __emit_str,\n      __factor_add,\n      __factorial,\n      __is_negative,\n      __is_radical_number,\n      __lcm,\n      __legendre,\n      __legendre2,\n      __legendre3,\n      __normalize_radical_factors,\n      __rationalize_tensor,\n      _print,\n      abs,\n      absValFloat,\n      absval,\n      absval_tensor,\n      add,\n      addSymbolLeftOfAssignment,\n      addSymbolRightOfAssignment,\n      add_all,\n      add_factor_to_accumulator,\n      add_numbers,\n      add_terms,\n      addf,\n      adj,\n      alloc_tensor,\n      allocatedId,\n      any_denominators,\n      approxAll,\n      approxLogs,\n      approxLogsOfRationals,\n      approxOneRatioOnly,\n      approxRadicals,\n      approxRadicalsOfRationals,\n      approxRationalsOfLogs,\n      approxRationalsOfPowersOfE,\n      approxRationalsOfPowersOfPI,\n      approxRationalsOfRadicals,\n      approxSineOfRationalMultiplesOfPI,\n      approxSineOfRationals,\n      approxTrigonometric,\n      approx_just_an_integer,\n      approx_logarithmsOfRationals,\n      approx_nothingUseful,\n      approx_radicalOfRatio,\n      approx_ratioOfRadical,\n      approx_rationalOfE,\n      approx_rationalOfPi,\n      approx_rationalsOfLogarithms,\n      approx_sine_of_pi_times_rational,\n      approx_sine_of_rational,\n      approxratioRecursive,\n      arccos,\n      arccosh,\n      arcsin,\n      arcsinh,\n      arctan,\n      arctanh,\n      areunivarpolysfactoredorexpandedform,\n      arg,\n      arglist,\n      assignmentFound,\n      avoidCalculatingPowersIntoArctans,\n      bake,\n      bake_poly,\n      bake_poly_term,\n      besselj,\n      bessely,\n      bigInt,\n      bignum_factorial,\n      bignum_float,\n      bignum_power_number,\n      bignum_scan_float,\n      bignum_scan_integer,\n      bignum_truncate,\n      binding,\n      binomial,\n      buffer,\n      build_tensor,\n      caaddr,\n      caadr,\n      caar,\n      cadaddr,\n      cadadr,\n      cadar,\n      caddaddr,\n      caddadr,\n      caddar,\n      caddddr,\n      cadddr,\n      caddr,\n      cadr,\n      called_from_Algebra_block,\n      car,\n      cdaddr,\n      cdadr,\n      cdar,\n      cddaddr,\n      cddar,\n      cdddaddr,\n      cddddr,\n      cdddr,\n      cddr,\n      cdr,\n      ceiling,\n      chainOfUserSymbolsNotFunctionsBeingEvaluated,\n      charTabIndex,\n      chartab,\n      checkFloatHasWorkedOutCompletely,\n      check_esc_flag,\n      check_stack,\n      check_tensor_dimensions,\n      choose,\n      choose_check_args,\n      circexp,\n      clearAlgebraEnvironment,\n      clearRenamedVariablesToAvoidBindingToExternalScope,\n      clear_symbols,\n      clear_term,\n      clearall,\n      clockform,\n      cmpGlyphs,\n      cmp_args,\n      cmp_expr,\n      cmp_terms,\n      cmp_terms_count,\n      codeGen,\n      coeff,\n      cofactor,\n      collectLatexStringFromReturnValue,\n      collectUserSymbols,\n      combine_factors,\n      combine_gammas,\n      combine_terms,\n      compareState,\n      compare_numbers,\n      compare_rationals,\n      compare_tensors,\n      compatible,\n      computeDependenciesFromAlgebra,\n      computeResultsAndJavaScriptFromAlgebra,\n      compute_fa,\n      conjugate,\n      cons,\n      consCount,\n      contract,\n      convert_bignum_to_double,\n      convert_rational_to_double,\n      copy_tensor,\n      cosine,\n      cosine_of_angle,\n      cosine_of_angle_sum,\n      count,\n      countOccurrencesOfSymbol,\n      count_denominators,\n      counter,\n      countsize,\n      d_scalar_scalar,\n      d_scalar_scalar_1,\n      d_scalar_tensor,\n      d_tensor_scalar,\n      d_tensor_tensor,\n      dabs,\n      darccos,\n      darccosh,\n      darcsin,\n      darcsinh,\n      darctan,\n      darctanh,\n      dbesselj0,\n      dbesseljn,\n      dbessely0,\n      dbesselyn,\n      dcos,\n      dcosh,\n      dd,\n      decomp,\n      decomp_product,\n      decomp_sum,\n      defineSomeHandyConstants,\n      define_user_function,\n      defn,\n      defn_str,\n      degree,\n      denominator,\n      derf,\n      derfc,\n      derivative,\n      derivative_of_integral,\n      det,\n      determinant,\n      detg,\n      dfunction,\n      dhermite,\n      dirac,\n      display,\n      display_flag,\n      displaychar,\n      divide,\n      divide_numbers,\n      divisors,\n      divisors_onstack,\n      divpoly,\n      dlog,\n      do_clearPatterns,\n      do_clearall,\n      do_simplify_nested_radicals,\n      dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication,\n      dotprod_unicode,\n      doubleToReasonableString,\n      dpow,\n      dpower,\n      dproduct,\n      draw_flag,\n      draw_stop_return,\n      dsgn,\n      dsin,\n      dsinh,\n      dsum,\n      dtan,\n      dtanh,\n      dupl,\n      eigen,\n      elelmIndex,\n      elem,\n      emit_denominator,\n      emit_denominators,\n      emit_expr,\n      emit_factor,\n      emit_factorial_function,\n      emit_flat_tensor,\n      emit_fraction,\n      emit_function,\n      emit_index_function,\n      emit_multiply,\n      emit_number,\n      emit_numerators,\n      emit_numerical_fraction,\n      emit_power,\n      emit_string,\n      emit_subexpr,\n      emit_symbol,\n      emit_tensor,\n      emit_tensor_inner,\n      emit_term,\n      emit_top_expr,\n      emit_unsigned_expr,\n      emit_x,\n      equal,\n      equaln,\n      equalq,\n      erfc,\n      errorMessage,\n      esc_flag,\n      evaluatingAsFloats,\n      evaluatingPolar,\n      exec,\n      expand,\n      expand_get_A,\n      expand_get_AF,\n      expand_get_B,\n      expand_get_C,\n      expand_get_CF,\n      expand_tensor,\n      expanding,\n      expcos,\n      exponential,\n      expr_level,\n      expsin,\n      f1,\n      f10,\n      f2,\n      f3,\n      f4,\n      f5,\n      f9,\n      f_equals_a,\n      factor,\n      factor_a,\n      factor_again,\n      factor_b,\n      factor_number,\n      factor_small_number,\n      factor_term,\n      factorial,\n      factorpoly,\n      factors,\n      factpoly_expo,\n      fill_buf,\n      filter,\n      filter_main,\n      filter_sum,\n      filter_tensor,\n      findDependenciesInScript,\n      findPossibleClockForm,\n      findPossibleExponentialForm,\n      findroot,\n      fixup_fraction,\n      fixup_power,\n      flag,\n      floatToRatioRoutine,\n      fmt_index,\n      fmt_level,\n      fmt_x,\n      frame,\n      freeze,\n      functionInvokationsScanningStack,\n      gamma,\n      gamma_of_sum,\n      gammaf,\n      gcd,\n      gcd_main,\n      gcd_numbers,\n      gcd_polys,\n      gcd_powers_with_same_base,\n      gcd_product_product,\n      gcd_product_sum,\n      gcd_sum,\n      gcd_sum_product,\n      gcd_sum_sum,\n      gen,\n      getSimpleRoots,\n      getStateHash,\n      get_binding,\n      get_factor_from_complex_root,\n      get_factor_from_real_root,\n      get_innerprod_factors,\n      get_next_token,\n      get_printname,\n      get_size,\n      get_token,\n      getdisplaystr,\n      glyph,\n      gp,\n      guess,\n      hasImaginaryCoeff,\n      hasNegativeRationalExponent,\n      hash_addition,\n      hash_function,\n      hash_multiplication,\n      hash_power,\n      hashcode_values,\n      hashed_itab,\n      hermite,\n      hilbert,\n      i1,\n      imag,\n      imaginaryunit,\n      index_function,\n      init,\n      initNRoots,\n      inited,\n      inner,\n      inner_f,\n      input_str,\n      integral,\n      integral_of_form,\n      integral_of_product,\n      integral_of_sum,\n      inv,\n      inverse,\n      invert_number,\n      invg,\n      isNumberOneOverSomething,\n      isNumericAtom,\n      isNumericAtomOrTensor,\n      isSimpleRoot,\n      isSmall,\n      isSymbolLeftOfAssignment,\n      isSymbolReclaimable,\n      isZeroAtom,\n      isZeroAtomOrTensor,\n      isZeroLikeOrNonZeroLikeOrUndetermined,\n      isZeroTensor,\n      is_denominator,\n      is_factor,\n      is_small_integer,\n      is_square_matrix,\n      is_usr_symbol,\n      isadd,\n      isalnumorunderscore,\n      isalpha,\n      isalphaOrUnderscore,\n      iscomplexnumber,\n      iscomplexnumberdouble,\n      iscons,\n      isdenominator,\n      isdigit,\n      isdouble,\n      iseveninteger,\n      isfactor,\n      isfactorial,\n      isfloating,\n      isfraction,\n      isidentitymatrix,\n      isimaginarynumber,\n      isimaginarynumberdouble,\n      isimaginaryunit,\n      isinnerordot,\n      isinteger,\n      isintegerfactor,\n      isintegerorintegerfloat,\n      isinv,\n      iskeyword,\n      isminusone,\n      isminusoneoversqrttwo,\n      isminusoneovertwo,\n      ismultiply,\n      isnegative,\n      isnegativenumber,\n      isnegativeterm,\n      isnonnegativeinteger,\n      isnpi,\n      isone,\n      isoneover,\n      isoneoversqrttwo,\n      isoneovertwo,\n      isplusone,\n      isplustwo,\n      ispolyexpandedform,\n      ispolyexpandedform_expr,\n      ispolyexpandedform_factor,\n      ispolyexpandedform_term,\n      ispolyfactoredorexpandedform,\n      ispolyfactoredorexpandedform_factor,\n      ispolyfactoredorexpandedform_power,\n      isposint,\n      ispositivenumber,\n      ispower,\n      isquarterturn,\n      isrational,\n      isspace,\n      isstr,\n      issymbol,\n      issymbolic,\n      istensor,\n      istranspose,\n      isunderscore,\n      isunivarpolyfactoredorexpandedform,\n      itab,\n      italu_hashcode,\n      j1,\n      laguerre,\n      laguerre2,\n      lastFoundSymbol,\n      latexErrorSign,\n      lcm,\n      leading,\n      legendre,\n      length,\n      lessp,\n      level,\n      list,\n      listLength,\n      logarithm,\n      logbuf,\n      lookupsTotal,\n      lu_decomp,\n      madd,\n      makePositive,\n      makeSignSameAs,\n      make_hashed_itab,\n      mask,\n      mcmp,\n      mcmpint,\n      mdiv,\n      mdivrem,\n      meta_mode,\n      mgcd,\n      mini_solve,\n      mint,\n      mmod,\n      mmul,\n      mod,\n      monic,\n      move,\n      moveTos,\n      mp_clr_bit,\n      mp_denominator,\n      mp_numerator,\n      mp_set_bit,\n      mpow,\n      mprime,\n      mroot,\n      mshiftright,\n      msub,\n      mtotal,\n      multinomial_sum,\n      multiply,\n      multiply_all,\n      multiply_all_noexpand,\n      multiply_consecutive_constants,\n      multiply_denominators,\n      multiply_denominators_factor,\n      multiply_denominators_term,\n      multiply_noexpand,\n      multiply_numbers,\n      n_factor_number,\n      negate,\n      negate_expand,\n      negate_noexpand,\n      negate_number,\n      new_string,\n      newline_flag,\n      nil_symbols,\n      normaliseDots,\n      normalisedCoeff,\n      normalize_angle,\n      nroots_a,\n      nroots_b,\n      nroots_c,\n      nroots_df,\n      nroots_dx,\n      nroots_fa,\n      nroots_fb,\n      nroots_x,\n      nroots_y,\n      nterms,\n      nthCadr,\n      numerator,\n      numericRootOfPolynomial,\n      o,\n      one,\n      oneElement,\n      one_as_double,\n      out_buf,\n      out_count,\n      out_of_memory,\n      outer,\n      p0,\n      p1,\n      p2,\n      p3,\n      p4,\n      p5,\n      p6,\n      p7,\n      p8,\n      p9,\n      parse,\n      parse_internal,\n      parse_p1,\n      parse_p2,\n      parse_time_simplifications,\n      partition,\n      patternHasBeenFound,\n      patternsinfo,\n      peek,\n      performing_roots,\n      polar,\n      polarRectAMinusOneBase,\n      polycoeff,\n      polyform,\n      pop,\n      pop_double,\n      pop_frame,\n      pop_integer,\n      power,\n      power_str,\n      power_sum,\n      power_tensor,\n      predefinedSymbolsInGlobalScope_doNotTrackInDependencies,\n      prime,\n      primetab,\n      print2dascii,\n      printMode,\n      print_ABS_latex,\n      print_ARCCOS_codegen,\n      print_ARCSIN_codegen,\n      print_ARCTAN_codegen,\n      print_BINOMIAL_latex,\n      print_COS_codegen,\n      print_DEFINT_latex,\n      print_DOT_codegen,\n      print_DOT_latex,\n      print_DO_codegen,\n      print_FOR_codegen,\n      print_INV_codegen,\n      print_INV_latex,\n      print_PRODUCT_codegen,\n      print_PRODUCT_latex,\n      print_SETQ_codegen,\n      print_SIN_codegen,\n      print_SQRT_latex,\n      print_SUM_codegen,\n      print_SUM_latex,\n      print_TAN_codegen,\n      print_TESTEQ_latex,\n      print_TESTGE_latex,\n      print_TESTGT_latex,\n      print_TESTLE_latex,\n      print_TESTLT_latex,\n      print_TEST_codegen,\n      print_TEST_latex,\n      print_TRANSPOSE_codegen,\n      print_TRANSPOSE_latex,\n      print_UNIT_codegen,\n      print_a_over_b,\n      print_base,\n      print_base_of_denom,\n      print_char,\n      print_denom,\n      print_double,\n      print_expo_of_denom,\n      print_exponent,\n      print_expr,\n      print_factor,\n      print_factorial_function,\n      print_glyphs,\n      print_index_function,\n      print_list,\n      print_multiply_sign,\n      print_number,\n      print_power,\n      print_str,\n      print_subexpr,\n      print_tensor,\n      print_tensor_inner,\n      print_tensor_inner_latex,\n      print_tensor_latex,\n      print_term,\n      printchar,\n      printchar_nowrap,\n      printline,\n      program_buf,\n      promote_tensor,\n      push,\n      pushTryNotToDuplicate,\n      push_cars,\n      push_double,\n      push_factor,\n      push_frame,\n      push_identity_matrix,\n      push_integer,\n      push_rational,\n      push_symbol,\n      push_term_factors,\n      push_terms,\n      push_zero_matrix,\n      qadd,\n      qdiv,\n      qmul,\n      qpow,\n      qpowf,\n      quickfactor,\n      quickpower,\n      rational,\n      rationalize,\n      rationalize_coefficients,\n      real,\n      reciprocate,\n      rect,\n      recursionLevelNestedRadicalsRemoval,\n      recursiveDependencies,\n      ref,\n      ref1,\n      rememberPrint,\n      remove_negative_exponents,\n      reset_after_error,\n      restore,\n      restoreMetaBindings,\n      rewrite_args,\n      rewrite_args_tensor,\n      roots,\n      roots2,\n      roots3,\n      run,\n      runUserDefinedSimplifications,\n      save,\n      saveMetaBindings,\n      scalar_times_tensor,\n      scan,\n      scan_error,\n      scan_expression,\n      scan_factor,\n      scan_function_call_with_function_name,\n      scan_function_call_without_function_name,\n      scan_index,\n      scan_meta,\n      scan_power,\n      scan_relation,\n      scan_stmt,\n      scan_str,\n      scan_string,\n      scan_subexpr,\n      scan_symbol,\n      scan_tensor,\n      scan_term,\n      scanned,\n      scanningParameters,\n      setM,\n      setSignTo,\n      set_binding,\n      set_component,\n      setq_indexed,\n      sfac_product,\n      sfac_product_f,\n      sgn,\n      shape,\n      show_power_debug,\n      sign,\n      sign_of_term,\n      simfac,\n      simfac_term,\n      simpleComplexityMeasure,\n      simplify,\n      simplifyForCodeGeneration,\n      simplify_1_in_products,\n      simplify_main,\n      simplify_nested_radicals,\n      simplify_polar,\n      simplify_polarRect,\n      simplify_rational_expressions,\n      simplify_rectToClock,\n      simplify_tensor,\n      simplify_trig,\n      simplifyfactorials,\n      sine,\n      sine_of_angle,\n      sine_of_angle_sum,\n      skipRootVariableToBeSolved,\n      sort_stack,\n      square,\n      ssqrt,\n      stack,\n      stackAddsCount,\n      std_symbol,\n      step,\n      step2,\n      stop,\n      strcmp,\n      stringsEmittedByUserPrintouts,\n      subf,\n      subst,\n      subtract,\n      subtract_numbers,\n      swap,\n      symbol,\n      symbolsDependencies,\n      symbolsHavingReassignments,\n      symbolsInExpressionsWithoutAssignments,\n      symbolsLeftOfAssignment,\n      symbolsRightOfAssignment,\n      symbolsinfo,\n      symnum,\n      symtab,\n      take_care_of_nested_radicals,\n      tangent,\n      taylor,\n      tensor,\n      tensor_plus_tensor,\n      tensor_times_scalar,\n      testApprox,\n      test_flag,\n      text_metric,\n      theRandom,\n      token,\n      token_buf,\n      token_str,\n      top,\n      top_level_eval,\n      tos,\n      transform,\n      transpose,\n      transpose_unicode,\n      trigmode,\n      trivial_divide,\n      try_kth_prime,\n      turnErrorMessageToLatex,\n      ucmp,\n      unfreeze,\n      unique,\n      unique_f,\n      update_token_buf,\n      userSimplificationsInListForm,\n      userSimplificationsInStringForm,\n      usr_symbol,\n      verbosing,\n      version,\n      will_be_displayed_as_fraction,\n      ybinomial,\n      ycosh,\n      ydirac,\n      yerf,\n      yerfc,\n      yfloor,\n      yindex,\n      yround,\n      ysinh,\n      yyarg,\n      yybesselj,\n      yybessely,\n      yyceiling,\n      yycondense,\n      yycontract,\n      yycosh,\n      yydegree,\n      yydetg,\n      yydivpoly,\n      yyerf,\n      yyerfc,\n      yyexpand,\n      yyfactorpoly,\n      yyfloat,\n      yyfloor,\n      yyhermite,\n      yyhermite2,\n      yyinvg,\n      yylcm,\n      yylog,\n      yymultiply,\n      yyouter,\n      yypower,\n      yyrationalize,\n      yyround,\n      yysgn,\n      yysimfac,\n      yysinh,\n      yytangent,\n      zero,\n      zzfloat,\n      hasProp = {}.hasOwnProperty,\n      slice = [].slice;\n\n  bigInt = require('big-integer');\n  version = \"1.3.1\";\n  SELFTEST = 1;\n  NSYM = 1000;\n  DEBUG = false;\n  PRINTOUTRESULT = false;\n  PRINTMODE_LATEX = \"PRINTMODE_LATEX\";\n  PRINTMODE_2DASCII = \"PRINTMODE_2DASCII\";\n  PRINTMODE_COMPUTER = \"PRINTMODE_COMPUTER\";\n  PRINTMODE_HUMAN = \"PRINTMODE_HUMAN\";\n  PRINTMODE_LIST = \"PRINTMODE_LIST\";\n  printMode = PRINTMODE_COMPUTER;\n  dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication = true;\n  recursionLevelNestedRadicalsRemoval = 0;\n  do_simplify_nested_radicals = true;\n  avoidCalculatingPowersIntoArctans = true;\n\n  rational = function () {\n    function rational() {}\n\n    rational.prototype.a = null;\n    rational.prototype.b = null;\n    return rational;\n  }();\n\n  U = function () {\n    U.prototype.cons = null;\n    U.prototype.printname = \"\";\n    U.prototype.str = \"\";\n    U.prototype.tensor = null;\n    U.prototype.q = null;\n    U.prototype.d = 0.0;\n    U.prototype.k = 0;\n    U.prototype.tag = 0;\n\n    U.prototype.toString = function () {\n      return print_expr(this);\n    };\n\n    U.prototype.toLatexString = function () {\n      return collectLatexStringFromReturnValue(this);\n    };\n\n    function U() {\n      this.cons = {};\n      this.cons.car = null;\n      this.cons.cdr = null;\n      this.q = new rational();\n    }\n\n    return U;\n  }();\n\n  errorMessage = \"\";\n  CONS = 0;\n  NUM = 1;\n  DOUBLE = 2;\n  STR = 3;\n  TENSOR = 4;\n  SYM = 5;\n  counter = 0;\n  ABS = counter++;\n  ADD = counter++;\n  ADJ = counter++;\n  AND = counter++;\n  APPROXRATIO = counter++;\n  ARCCOS = counter++;\n  ARCCOSH = counter++;\n  ARCSIN = counter++;\n  ARCSINH = counter++;\n  ARCTAN = counter++;\n  ARCTANH = counter++;\n  ARG = counter++;\n  ATOMIZE = counter++;\n  BESSELJ = counter++;\n  BESSELY = counter++;\n  BINDING = counter++;\n  BINOMIAL = counter++;\n  CEILING = counter++;\n  CHECK = counter++;\n  CHOOSE = counter++;\n  CIRCEXP = counter++;\n  CLEAR = counter++;\n  CLEARALL = counter++;\n  CLEARPATTERNS = counter++;\n  CLOCK = counter++;\n  COEFF = counter++;\n  COFACTOR = counter++;\n  CONDENSE = counter++;\n  CONJ = counter++;\n  CONTRACT = counter++;\n  COS = counter++;\n  COSH = counter++;\n  DECOMP = counter++;\n  DEFINT = counter++;\n  DEGREE = counter++;\n  DENOMINATOR = counter++;\n  DERIVATIVE = counter++;\n  DET = counter++;\n  DIM = counter++;\n  DIRAC = counter++;\n  DIVISORS = counter++;\n  DO = counter++;\n  DOT = counter++;\n  DRAW = counter++;\n  DSOLVE = counter++;\n  EIGEN = counter++;\n  EIGENVAL = counter++;\n  EIGENVEC = counter++;\n  ERF = counter++;\n  ERFC = counter++;\n  EVAL = counter++;\n  EXP = counter++;\n  EXPAND = counter++;\n  EXPCOS = counter++;\n  EXPSIN = counter++;\n  FACTOR = counter++;\n  FACTORIAL = counter++;\n  FACTORPOLY = counter++;\n  FILTER = counter++;\n  FLOATF = counter++;\n  FLOOR = counter++;\n  FOR = counter++;\n  FUNCTION = counter++;\n  GAMMA = counter++;\n  GCD = counter++;\n  HERMITE = counter++;\n  HILBERT = counter++;\n  IMAG = counter++;\n  INDEX = counter++;\n  INNER = counter++;\n  INTEGRAL = counter++;\n  INV = counter++;\n  INVG = counter++;\n  ISINTEGER = counter++;\n  ISPRIME = counter++;\n  LAGUERRE = counter++;\n  LCM = counter++;\n  LEADING = counter++;\n  LEGENDRE = counter++;\n  LOG = counter++;\n  LOOKUP = counter++;\n  MOD = counter++;\n  MULTIPLY = counter++;\n  NOT = counter++;\n  NROOTS = counter++;\n  NUMBER = counter++;\n  NUMERATOR = counter++;\n  OPERATOR = counter++;\n  OR = counter++;\n  OUTER = counter++;\n  PATTERN = counter++;\n  PATTERNSINFO = counter++;\n  POLAR = counter++;\n  POWER = counter++;\n  PRIME = counter++;\n  PRINT_LEAVE_E_ALONE = counter++;\n  PRINT_LEAVE_X_ALONE = counter++;\n  PRINT = counter++;\n  PRINT2DASCII = counter++;\n  PRINTFULL = counter++;\n  PRINTLATEX = counter++;\n  PRINTLIST = counter++;\n  PRINTPLAIN = counter++;\n  PRODUCT = counter++;\n  QUOTE = counter++;\n  QUOTIENT = counter++;\n  RANK = counter++;\n  RATIONALIZE = counter++;\n  REAL = counter++;\n  ROUND = counter++;\n  YYRECT = counter++;\n  ROOTS = counter++;\n  SETQ = counter++;\n  SGN = counter++;\n  SILENTPATTERN = counter++;\n  SIMPLIFY = counter++;\n  SIN = counter++;\n  SINH = counter++;\n  SHAPE = counter++;\n  SQRT = counter++;\n  STOP = counter++;\n  SUBST = counter++;\n  SUM = counter++;\n  SYMBOLSINFO = counter++;\n  TAN = counter++;\n  TANH = counter++;\n  TAYLOR = counter++;\n  TEST = counter++;\n  TESTEQ = counter++;\n  TESTGE = counter++;\n  TESTGT = counter++;\n  TESTLE = counter++;\n  TESTLT = counter++;\n  TRANSPOSE = counter++;\n  UNIT = counter++;\n  ZERO = counter++;\n  NIL = counter++;\n  LAST = counter++;\n  LAST_PRINT = counter++;\n  LAST_2DASCII_PRINT = counter++;\n  LAST_FULL_PRINT = counter++;\n  LAST_LATEX_PRINT = counter++;\n  LAST_LIST_PRINT = counter++;\n  LAST_PLAIN_PRINT = counter++;\n  AUTOEXPAND = counter++;\n  BAKE = counter++;\n  ASSUME_REAL_VARIABLES = counter++;\n  TRACE = counter++;\n  FORCE_FIXED_PRINTOUT = counter++;\n  MAX_FIXED_PRINTOUT_DIGITS = counter++;\n  YYE = counter++;\n  DRAWX = counter++;\n  METAA = counter++;\n  METAB = counter++;\n  METAX = counter++;\n  SECRETX = counter++;\n  VERSION = counter++;\n  PI = counter++;\n  SYMBOL_A = counter++;\n  SYMBOL_B = counter++;\n  SYMBOL_C = counter++;\n  SYMBOL_D = counter++;\n  SYMBOL_I = counter++;\n  SYMBOL_J = counter++;\n  SYMBOL_N = counter++;\n  SYMBOL_R = counter++;\n  SYMBOL_S = counter++;\n  SYMBOL_T = counter++;\n  SYMBOL_X = counter++;\n  SYMBOL_Y = counter++;\n  SYMBOL_Z = counter++;\n  SYMBOL_IDENTITY_MATRIX = counter++;\n  SYMBOL_A_UNDERSCORE = counter++;\n  SYMBOL_B_UNDERSCORE = counter++;\n  SYMBOL_X_UNDERSCORE = counter++;\n  C1 = counter++;\n  C2 = counter++;\n  C3 = counter++;\n  C4 = counter++;\n  C5 = counter++;\n  C6 = counter++;\n  USR_SYMBOLS = counter++;\n  E = YYE;\n  TOS = 100000;\n  BUF = 10000;\n  MAX_PROGRAM_SIZE = 100001;\n  MAXPRIMETAB = 10000;\n  MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES = 5;\n  MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE = 10;\n  MAXDIM = 24;\n  symbolsDependencies = {};\n  symbolsHavingReassignments = [];\n  symbolsInExpressionsWithoutAssignments = [];\n  patternHasBeenFound = false;\n  predefinedSymbolsInGlobalScope_doNotTrackInDependencies = [\"rationalize\", \"abs\", \"e\", \"i\", \"pi\", \"sin\", \"ceiling\", \"cos\", \"roots\", \"integral\", \"derivative\", \"defint\", \"sqrt\", \"eig\", \"cov\", \"deig\", \"dcov\", \"float\", \"floor\", \"product\", \"root\", \"round\", \"sum\", \"test\", \"unit\"];\n  parse_time_simplifications = true;\n  chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n  stringsEmittedByUserPrintouts = \"\";\n  called_from_Algebra_block = false;\n\n  tensor = function () {\n    tensor.prototype.ndim = 0;\n    tensor.prototype.dim = null;\n    tensor.prototype.nelem = 0;\n    tensor.prototype.elem = null;\n\n    function tensor() {\n      this.dim = function () {\n        var o, ref, results;\n        results = [];\n\n        for (o = 0, ref = MAXDIM; 0 <= ref ? o <= ref : o >= ref; 0 <= ref ? o++ : o--) {\n          results.push(0);\n        }\n\n        return results;\n      }();\n\n      this.elem = [];\n    }\n\n    return tensor;\n  }();\n\n  display = function () {\n    function display() {}\n\n    display.prototype.h = 0;\n    display.prototype.w = 0;\n    display.prototype.n = 0;\n    display.prototype.a = [];\n    return display;\n  }();\n\n  text_metric = function () {\n    function text_metric() {}\n\n    text_metric.prototype.ascent = 0;\n    text_metric.prototype.descent = 0;\n    text_metric.prototype.width = 0;\n    return text_metric;\n  }();\n\n  tos = 0;\n  expanding = 0;\n  evaluatingAsFloats = 0;\n  evaluatingPolar = 0;\n  fmt_x = 0;\n  fmt_index = 0;\n  fmt_level = 0;\n  verbosing = 0;\n\n  primetab = function () {\n    var ceil, i, j, primes;\n    primes = [2];\n    i = 3;\n\n    while (primes.length < MAXPRIMETAB) {\n      j = 0;\n      ceil = Math.sqrt(i);\n\n      while (j < primes.length && primes[j] <= ceil) {\n        if (i % primes[j] === 0) {\n          j = -1;\n          break;\n        }\n\n        j++;\n      }\n\n      if (j !== -1) {\n        primes.push(i);\n      }\n\n      i += 2;\n    }\n\n    primes[MAXPRIMETAB] = 0;\n    return primes;\n  }();\n\n  esc_flag = 0;\n  draw_flag = 0;\n  mtotal = 0;\n  trigmode = 0;\n  logbuf = \"\";\n  program_buf = \"\";\n  symtab = [];\n  binding = [];\n  isSymbolReclaimable = [];\n  arglist = [];\n  stack = [];\n  frame = 0;\n  p0 = null;\n  p1 = null;\n  p2 = null;\n  p3 = null;\n  p4 = null;\n  p5 = null;\n  p6 = null;\n  p7 = null;\n  p8 = null;\n  p9 = null;\n  zero = null;\n  one = null;\n  one_as_double = null;\n  imaginaryunit = null;\n  out_buf = \"\";\n  out_count = 0;\n  test_flag = 0;\n  codeGen = false;\n  draw_stop_return = null;\n  userSimplificationsInListForm = [];\n  userSimplificationsInStringForm = [];\n  transpose_unicode = 7488;\n  dotprod_unicode = 183;\n\n  symbol = function (x) {\n    return symtab[x];\n  };\n\n  iscons = function (p) {\n    return p.k === CONS;\n  };\n\n  isrational = function (p) {\n    return p.k === NUM;\n  };\n\n  isdouble = function (p) {\n    return p.k === DOUBLE;\n  };\n\n  isNumericAtom = function (p) {\n    return isrational(p) || isdouble(p);\n  };\n\n  isstr = function (p) {\n    return p.k === STR;\n  };\n\n  istensor = function (p) {\n    if (p == null) {\n      debugger;\n    } else {\n      return p.k === TENSOR;\n    }\n  };\n\n  isNumericAtomOrTensor = function (p) {\n    var a, i, n, o, ref;\n\n    if (isNumericAtom(p) || p === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      return 1;\n    }\n\n    if (!istensor(p) && !isNumericAtom(p)) {\n      return 0;\n    }\n\n    n = p.tensor.nelem;\n    a = p.tensor.elem;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtomOrTensor(a[i])) {\n        return 0;\n      }\n    }\n\n    return 1;\n  };\n\n  issymbol = function (p) {\n    return p.k === SYM;\n  };\n\n  iskeyword = function (p) {\n    return issymbol(p) && symnum(p) < NIL;\n  };\n\n  car = function (p) {\n    if (iscons(p)) {\n      return p.cons.car;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  cdr = function (p) {\n    if (iscons(p)) {\n      return p.cons.cdr;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  caar = function (p) {\n    return car(car(p));\n  };\n\n  cadr = function (p) {\n    return car(cdr(p));\n  };\n\n  cdar = function (p) {\n    return cdr(car(p));\n  };\n\n  cddr = function (p) {\n    return cdr(cdr(p));\n  };\n\n  caadr = function (p) {\n    return car(car(cdr(p)));\n  };\n\n  caddr = function (p) {\n    return car(cdr(cdr(p)));\n  };\n\n  cadar = function (p) {\n    return car(cdr(car(p)));\n  };\n\n  cdadr = function (p) {\n    return cdr(car(cdr(p)));\n  };\n\n  cddar = function (p) {\n    return cdr(cdr(car(p)));\n  };\n\n  cdddr = function (p) {\n    return cdr(cdr(cdr(p)));\n  };\n\n  caaddr = function (p) {\n    return car(car(cdr(cdr(p))));\n  };\n\n  cadadr = function (p) {\n    return car(cdr(car(cdr(p))));\n  };\n\n  caddar = function (p) {\n    return car(cdr(cdr(car(p))));\n  };\n\n  cdaddr = function (p) {\n    return cdr(car(cdr(cdr(p))));\n  };\n\n  cadddr = function (p) {\n    return car(cdr(cdr(cdr(p))));\n  };\n\n  cddddr = function (p) {\n    return cdr(cdr(cdr(cdr(p))));\n  };\n\n  caddddr = function (p) {\n    return car(cdr(cdr(cdr(cdr(p)))));\n  };\n\n  cadaddr = function (p) {\n    return car(cdr(car(cdr(cdr(p)))));\n  };\n\n  cddaddr = function (p) {\n    return cdr(cdr(car(cdr(cdr(p)))));\n  };\n\n  caddadr = function (p) {\n    return car(cdr(cdr(car(cdr(p)))));\n  };\n\n  cdddaddr = function (p) {\n    return cdr(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  caddaddr = function (p) {\n    return car(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  listLength = function (p) {\n    var startCount;\n    startCount = -1;\n\n    while (iscons(p)) {\n      p = cdr(p);\n      startCount++;\n    }\n\n    return startCount;\n  };\n\n  nthCadr = function (p, n) {\n    var startCount;\n    startCount = 0;\n\n    while (startCount <= n) {\n      p = cdr(p);\n      startCount++;\n    }\n\n    return car(p);\n  };\n\n  isadd = function (p) {\n    return car(p) === symbol(ADD);\n  };\n\n  ismultiply = function (p) {\n    return car(p) === symbol(MULTIPLY);\n  };\n\n  ispower = function (p) {\n    return car(p) === symbol(POWER);\n  };\n\n  isfactorial = function (p) {\n    return car(p) === symbol(FACTORIAL);\n  };\n\n  isinnerordot = function (p) {\n    return car(p) === symbol(INNER) || car(p) === symbol(DOT);\n  };\n\n  istranspose = function (p) {\n    return car(p) === symbol(TRANSPOSE);\n  };\n\n  isinv = function (p) {\n    return car(p) === symbol(INV);\n  };\n\n  isidentitymatrix = function (p) {\n    return p === symbol(SYMBOL_IDENTITY_MATRIX);\n  };\n\n  MSIGN = function (p) {\n    if (p.isPositive()) {\n      return 1;\n    } else if (p.isZero()) {\n      return 0;\n    } else {\n      return -1;\n    }\n  };\n\n  MLENGTH = function (p) {\n    return p.toString().length;\n  };\n\n  MZERO = function (p) {\n    return p.isZero();\n  };\n\n  MEQUAL = function (p, n) {\n    if (p == null) {\n      debugger;\n    }\n\n    return p.equals(n);\n  };\n\n  reset_after_error = function () {\n    moveTos(0);\n    esc_flag = 0;\n    draw_flag = 0;\n    frame = TOS;\n    evaluatingAsFloats = 0;\n    return evaluatingPolar = 0;\n  };\n\n  $ = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n  $.version = version;\n  $.isadd = isadd;\n  $.ismultiply = ismultiply;\n  $.ispower = ispower;\n  $.isfactorial = isfactorial;\n  $.car = car;\n  $.cdr = cdr;\n  $.caar = caar;\n  $.cadr = cadr;\n  $.cdar = cdar;\n  $.cddr = cddr;\n  $.caadr = caadr;\n  $.caddr = caddr;\n  $.cadar = cadar;\n  $.cdadr = cdadr;\n  $.cddar = cddar;\n  $.cdddr = cdddr;\n  $.caaddr = caaddr;\n  $.cadadr = cadadr;\n  $.caddar = caddar;\n  $.cdaddr = cdaddr;\n  $.cadddr = cadddr;\n  $.cddddr = cddddr;\n  $.caddddr = caddddr;\n  $.cadaddr = cadaddr;\n  $.cddaddr = cddaddr;\n  $.caddadr = caddadr;\n  $.cdddaddr = cdddaddr;\n  $.caddaddr = caddaddr;\n  $.symbol = symbol;\n  $.iscons = iscons;\n  $.isrational = isrational;\n  $.isdouble = isdouble;\n  $.isNumericAtom = isNumericAtom;\n  $.isstr = isstr;\n  $.istensor = istensor;\n  $.issymbol = issymbol;\n  $.iskeyword = iskeyword;\n  $.CONS = CONS;\n  $.NUM = NUM;\n  $.DOUBLE = DOUBLE;\n  $.STR = STR;\n  $.TENSOR = TENSOR;\n  $.SYM = SYM;\n  /* abs =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the absolute value of a real number, the magnitude of a complex number, or the vector length.\n   */\n\n  /*\n   Absolute value of a number,or magnitude of complex z, or norm of a vector\n  \n    z    abs(z)\n    -    ------\n  \n    a    a\n  \n    -a    a\n  \n    (-1)^a    1\n  \n    exp(a + i b)  exp(a)\n  \n    a b    abs(a) abs(b)\n  \n    a + i b    sqrt(a^2 + b^2)\n  \n  Notes\n  \n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n  \n    2. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n  \n      abs(numerator(z)) / abs(denominator(z))\n  \n       must be used to get the correct answer. Now the operation is\n       automatic.\n   */\n\n  DEBUG_ABS = false;\n\n  Eval_abs = function () {\n    push(cadr(p1));\n    Eval();\n    return abs();\n  };\n\n  absValFloat = function () {\n    Eval();\n    absval();\n    Eval();\n    return zzfloat();\n  };\n\n  abs = function () {\n    var theArgument;\n    theArgument = top();\n\n    if (DEBUG_ABS) {\n      console.trace(\">>>>  ABS of \" + theArgument);\n    }\n\n    numerator();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS numerator \" + stack[tos - 1]);\n    }\n\n    absval();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL numerator: \" + stack[tos - 1]);\n    }\n\n    push(theArgument);\n    denominator();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS denominator: \" + stack[tos - 1]);\n    }\n\n    absval();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL denominator: \" + stack[tos - 1]);\n    }\n\n    divide();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL divided: \" + stack[tos - 1]);\n    }\n\n    if (DEBUG_ABS) {\n      return console.log(\"<<<<<<<  ABS\");\n    }\n  };\n\n  absval = function () {\n    var anyFactorsYet, input;\n    save();\n    p1 = pop();\n    input = p1;\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS of \" + p1);\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just zero\");\n      }\n\n      push(zero);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (isnegativenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a negative\");\n      }\n\n      push(p1);\n      negate();\n      restore();\n      return;\n    }\n\n    if (ispositivenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a positive\");\n      }\n\n      push(p1);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (p1 === symbol(PI)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" of PI\");\n      }\n\n      push(p1);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(ADD) && (findPossibleClockForm(p1) || findPossibleExponentialForm(p1) || Find(p1, imaginaryunit))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a sum\");\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\"abs of a sum\");\n      }\n\n      push(p1);\n      rect();\n      p1 = pop();\n      push(p1);\n      real();\n      push_integer(2);\n      power();\n      push(p1);\n      imag();\n      push_integer(2);\n      power();\n      add();\n      push_rational(1, 2);\n      power();\n      simplify_trig();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is -1 to any power\");\n      }\n\n      if (evaluatingAsFloats) {\n        if (DEBUG_ABS) {\n          console.log(\" abs: numeric, so result is 1.0\");\n        }\n\n        push_double(1.0);\n      } else {\n        if (DEBUG_ABS) {\n          console.log(\" abs: symbolic, so result is 1\");\n        }\n\n        push_integer(1);\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER) && ispositivenumber(caddr(p1))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is something to the power of a positive number\");\n      }\n\n      push(cadr(p1));\n      abs();\n      push(caddr(p1));\n      power();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is an exponential\");\n      }\n\n      push(caddr(p1));\n      real();\n      exponential();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a product\");\n      }\n\n      anyFactorsYet = false;\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        absval();\n\n        if (anyFactorsYet) {\n          multiply();\n        }\n\n        anyFactorsYet = true;\n        p1 = cdr(p1);\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(ABS)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is abs of a abs\");\n      }\n\n      push_symbol(ABS);\n      push(cadr(p1));\n      list(2);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n    /*\n     * Evaluation via zzfloat()\n     * ...while this is in theory a powerful mechanism, I've commented it\n     * out because I've refined this method enough to not need this.\n     * Evaling via zzfloat() is in principle more problematic because it could\n     * require further evaluations which could end up in further \"abs\" which\n     * would end up in infinite loops. Better not use it if not necessary.\n    \n     * we look directly at the float evaluation of the argument\n     * to see if we end up with a number, which would mean that there\n     * is no imaginary component and we can just return the input\n     * (or its negation) as the result.\n    push p1\n    zzfloat()\n    floatEvaluation = pop()\n    \n    if (isnegativenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a negative\"\n      push(p1)\n      negate()\n      restore()\n      return\n    \n    if (ispositivenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a positive\"\n      push(p1)\n      if DEBUG_ABS then console.log \" --> ABS of \" + input + \" : \" + stack[tos-1]\n      restore()\n      return\n     */\n\n\n    if (istensor(p1)) {\n      absval_tensor();\n      restore();\n      return;\n    }\n\n    if (isnegativeterm(p1) || car(p1) === symbol(ADD) && isnegativeterm(cadr(p1))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    if (DEBUG_ABS) {\n      console.log(\" abs: \" + p1 + \" is nothing decomposable\");\n    }\n\n    push_symbol(ABS);\n    push(p1);\n    list(2);\n\n    if (DEBUG_ABS) {\n      console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n    }\n\n    return restore();\n  };\n\n  absval_tensor = function () {\n    if (p1.tensor.ndim !== 1) {\n      stop(\"abs(tensor) with tensor rank > 1\");\n    }\n\n    push(p1);\n    push(p1);\n    conjugate();\n    inner();\n    push_rational(1, 2);\n    power();\n    simplify();\n    return Eval();\n  };\n  /*\n   Symbolic addition\n  \n    Terms in a sum are combined if they are identical modulo rational\n    coefficients.\n  \n    For example, A + 2A becomes 3A.\n  \n    However, the sum A + sqrt(2) A is not modified.\n  \n    Combining terms can lead to second-order effects.\n  \n    For example, consider the case of\n  \n      1/sqrt(2) A + 3/sqrt(2) A + sqrt(2) A\n  \n    The first two terms are combined to yield 2 sqrt(2) A.\n  \n    This result can now be combined with the third term to yield\n  \n      3 sqrt(2) A\n   */\n\n\n  flag = 0;\n\n  Eval_add = function () {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p2 = pop();\n      push_terms(p2);\n      p1 = cdr(p1);\n    }\n\n    return add_terms(tos - h);\n  };\n\n  stackAddsCount = 0;\n\n  add_terms = function (n) {\n    var h, i, i1, j1, o, ref, ref1, results, s, subsetOfStack;\n    stackAddsCount++;\n    i = 0;\n    h = tos - n;\n    s = h;\n\n    if (DEBUG) {\n      console.log(\"stack before adding terms #\" + stackAddsCount);\n    }\n\n    if (DEBUG) {\n      for (i = o = 0, ref = tos; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        console.log(print_list(stack[i]));\n      }\n    }\n\n    for (i = i1 = 0; i1 < 10; i = ++i1) {\n      if (n < 2) {\n        break;\n      }\n\n      flag = 0;\n      subsetOfStack = stack.slice(h, h + n);\n      subsetOfStack.sort(cmp_terms);\n      stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n\n      if (flag === 0) {\n        break;\n      }\n\n      n = combine_terms(h, n);\n    }\n\n    moveTos(h + n);\n\n    switch (n) {\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      case 1:\n        break;\n\n      default:\n        list(n);\n        p1 = pop();\n        push_symbol(ADD);\n        push(p1);\n        cons();\n    }\n\n    if (DEBUG) {\n      console.log(\"stack after adding terms #\" + stackAddsCount);\n    }\n\n    if (DEBUG) {\n      results = [];\n\n      for (i = j1 = 0, ref1 = tos; 0 <= ref1 ? j1 < ref1 : j1 > ref1; i = 0 <= ref1 ? ++j1 : --j1) {\n        results.push(console.log(print_list(stack[i])));\n      }\n\n      return results;\n    }\n  };\n\n  cmp_terms_count = 0;\n\n  cmp_terms = function (p1, p2) {\n    var i, o, ref, t;\n    cmp_terms_count++;\n    i = 0;\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      flag = 1;\n      return 0;\n    }\n\n    if (istensor(p1) && istensor(p2)) {\n      if (p1.tensor.ndim < p2.tensor.ndim) {\n        return -1;\n      }\n\n      if (p1.tensor.ndim > p2.tensor.ndim) {\n        return 1;\n      }\n\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n          return -1;\n        }\n\n        if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n          return 1;\n        }\n      }\n\n      flag = 1;\n      return 0;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      if (isNumericAtom(car(p1))) {\n        p1 = cdr(p1);\n\n        if (cdr(p1) === symbol(NIL)) {\n          p1 = car(p1);\n        }\n      }\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n\n      if (isNumericAtom(car(p2))) {\n        p2 = cdr(p2);\n\n        if (cdr(p2) === symbol(NIL)) {\n          p2 = car(p2);\n        }\n      }\n    }\n\n    t = cmp_expr(p1, p2);\n\n    if (t === 0) {\n      flag = 1;\n    }\n\n    return t;\n  };\n  /*\n   Compare adjacent terms in s[] and combine if possible.\n  \n    Returns the number of terms remaining in s[].\n  \n    n  number of terms in s[] initially\n   */\n\n\n  combine_terms = function (s, n) {\n    var i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t;\n    i = 0;\n\n    while (i < n - 1) {\n      check_esc_flag();\n      p3 = stack[s + i];\n      p4 = stack[s + i + 1];\n\n      if (istensor(p3) && istensor(p4)) {\n        push(p3);\n        push(p4);\n        tensor_plus_tensor();\n        p1 = pop();\n\n        if (p1 !== symbol(NIL)) {\n          stack[s + i] = p1;\n\n          for (j = o = ref = i + 1, ref1 = n - 1; ref <= ref1 ? o < ref1 : o > ref1; j = ref <= ref1 ? ++o : --o) {\n            stack[s + j] = stack[s + j + 1];\n          }\n\n          n--;\n          i--;\n        }\n\n        i++;\n        continue;\n      }\n\n      if (istensor(p3) || istensor(p4)) {\n        i++;\n        continue;\n      }\n\n      if (isNumericAtom(p3) && isNumericAtom(p4)) {\n        push(p3);\n        push(p4);\n        add_numbers();\n        p1 = pop();\n\n        if (isZeroAtomOrTensor(p1)) {\n          for (j = i1 = ref2 = i, ref3 = n - 2; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; j = ref2 <= ref3 ? ++i1 : --i1) {\n            stack[s + j] = stack[s + j + 2];\n          }\n\n          n -= 2;\n        } else {\n          stack[s + i] = p1;\n\n          for (j = j1 = ref4 = i + 1, ref5 = n - 1; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; j = ref4 <= ref5 ? ++j1 : --j1) {\n            stack[s + j] = stack[s + j + 1];\n          }\n\n          n--;\n        }\n\n        i--;\n        i++;\n        continue;\n      }\n\n      if (isNumericAtom(p3) || isNumericAtom(p4)) {\n        i++;\n        continue;\n      }\n\n      if (evaluatingAsFloats) {\n        p1 = one_as_double;\n        p2 = one_as_double;\n      } else {\n        p1 = one;\n        p2 = one;\n      }\n\n      t = 0;\n\n      if (car(p3) === symbol(MULTIPLY)) {\n        p3 = cdr(p3);\n        t = 1;\n\n        if (isNumericAtom(car(p3))) {\n          p1 = car(p3);\n          p3 = cdr(p3);\n\n          if (cdr(p3) === symbol(NIL)) {\n            p3 = car(p3);\n            t = 0;\n          }\n        }\n      }\n\n      if (car(p4) === symbol(MULTIPLY)) {\n        p4 = cdr(p4);\n\n        if (isNumericAtom(car(p4))) {\n          p2 = car(p4);\n          p4 = cdr(p4);\n\n          if (cdr(p4) === symbol(NIL)) {\n            p4 = car(p4);\n          }\n        }\n      }\n\n      if (!equal(p3, p4)) {\n        i++;\n        continue;\n      }\n\n      push(p1);\n      push(p2);\n      add_numbers();\n      p1 = pop();\n\n      if (isZeroAtomOrTensor(p1)) {\n        for (j = l1 = ref6 = i, ref7 = n - 2; ref6 <= ref7 ? l1 < ref7 : l1 > ref7; j = ref6 <= ref7 ? ++l1 : --l1) {\n          stack[s + j] = stack[s + j + 2];\n        }\n\n        n -= 2;\n        i--;\n        i++;\n        continue;\n      }\n\n      push(p1);\n\n      if (t) {\n        push(symbol(MULTIPLY));\n        push(p3);\n        cons();\n      } else {\n        push(p3);\n      }\n\n      multiply();\n      stack[s + i] = pop();\n\n      for (j = m1 = ref8 = i + 1, ref9 = n - 1; ref8 <= ref9 ? m1 < ref9 : m1 > ref9; j = ref8 <= ref9 ? ++m1 : --m1) {\n        stack[s + j] = stack[s + j + 1];\n      }\n\n      n--;\n      i--;\n      i++;\n    }\n\n    return n;\n  };\n\n  push_terms = function (p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else if (!isZeroAtom(p)) {\n      return push(p);\n    }\n  };\n\n  add = function () {\n    var h;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push_terms(p1);\n    push_terms(p2);\n    add_terms(tos - h);\n    return restore();\n  };\n\n  add_all = function (k) {\n    var h, i, o, ref, s;\n    i = 0;\n    save();\n    s = tos - k;\n    h = tos;\n\n    for (i = o = 0, ref = k; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push_terms(stack[s + i]);\n    }\n\n    add_terms(tos - h);\n    p1 = pop();\n    moveTos(tos - k);\n    push(p1);\n    return restore();\n  };\n\n  subtract = function () {\n    negate();\n    return add();\n  };\n  /* adj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Returns the adjunct of matrix m. The inverse of m is equal to adj(m) divided by det(m).\n   */\n\n\n  Eval_adj = function () {\n    push(cadr(p1));\n    Eval();\n    return adj();\n  };\n\n  adj = function () {\n    var doNothing, i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p1 = pop();\n\n    if (istensor(p1) && p1.tensor.ndim === 2 && p1.tensor.dim[0] === p1.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"adj: square matrix expected\");\n    }\n\n    n = p1.tensor.dim[0];\n    p2 = alloc_tensor(n * n);\n    p2.tensor.ndim = 2;\n    p2.tensor.dim[0] = n;\n    p2.tensor.dim[1] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        cofactor(p1, n, i, j);\n        p2.tensor.elem[n * j + i] = pop();\n      }\n    }\n\n    push(p2);\n    return restore();\n  };\n  /*\n   Guesses a rational for each float in the passed expression\n   */\n\n\n  Eval_approxratio = function () {\n    var theArgument;\n    theArgument = cadr(p1);\n    push(theArgument);\n    return approxratioRecursive();\n  };\n\n  approxratioRecursive = function () {\n    var i, i1, o, ref, ref1;\n    i = 0;\n    save();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n        approxratioRecursive();\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n\n      push(p4);\n    } else if (p1.k === DOUBLE) {\n      push(p1);\n      approxOneRatioOnly();\n    } else if (iscons(p1)) {\n      push(car(p1));\n      approxratioRecursive();\n      push(cdr(p1));\n      approxratioRecursive();\n      cons();\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  approxOneRatioOnly = function () {\n    var numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot, supposedlyTheFloat, theFloat, theRatio;\n    zzfloat();\n    supposedlyTheFloat = pop();\n\n    if (supposedlyTheFloat.k === DOUBLE) {\n      theFloat = supposedlyTheFloat.d;\n      splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n      if (splitBeforeAndAfterDot.length === 2) {\n        numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n        precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n        theRatio = floatToRatioRoutine(theFloat, precision);\n        push_rational(theRatio[0], theRatio[1]);\n      } else {\n        push_integer(theFloat);\n      }\n\n      return;\n    }\n\n    push_symbol(APPROXRATIO);\n    push(theArgument);\n    return list(2);\n  };\n\n  floatToRatioRoutine = function (decimal, AccuracyFactor) {\n    var DecimalSign, FractionDenominator, FractionNumerator, PreviousDenominator, ScratchValue, Z, ret;\n    FractionNumerator = void 0;\n    FractionDenominator = void 0;\n    DecimalSign = void 0;\n    Z = void 0;\n    PreviousDenominator = void 0;\n    ScratchValue = void 0;\n    ret = [0, 0];\n\n    if (isNaN(decimal)) {\n      return ret;\n    }\n\n    if (decimal === 2e308) {\n      ret[0] = 1;\n      ret[1] = 0;\n      return ret;\n    }\n\n    if (decimal === -2e308) {\n      ret[0] = -1;\n      ret[1] = 0;\n      return ret;\n    }\n\n    if (decimal < 0.0) {\n      DecimalSign = -1.0;\n    } else {\n      DecimalSign = 1.0;\n    }\n\n    decimal = Math.abs(decimal);\n\n    if (Math.abs(decimal - Math.floor(decimal)) < AccuracyFactor) {\n      FractionNumerator = decimal * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    if (decimal < 1.0e-19) {\n      FractionNumerator = DecimalSign;\n      FractionDenominator = 9999999999999999999.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    if (decimal > 1.0e19) {\n      FractionNumerator = 9999999999999999999.0 * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    Z = decimal;\n    PreviousDenominator = 0.0;\n    FractionDenominator = 1.0;\n\n    while (true) {\n      Z = 1.0 / (Z - Math.floor(Z));\n      ScratchValue = FractionDenominator;\n      FractionDenominator = FractionDenominator * Math.floor(Z) + PreviousDenominator;\n      PreviousDenominator = ScratchValue;\n      FractionNumerator = Math.floor(decimal * FractionDenominator + 0.5);\n\n      if (!(Math.abs(decimal - FractionNumerator / FractionDenominator) > AccuracyFactor && Z !== Math.floor(Z))) {\n        break;\n      }\n    }\n\n    FractionNumerator = DecimalSign * FractionNumerator;\n    ret[0] = FractionNumerator;\n    ret[1] = FractionDenominator;\n    return ret;\n  };\n\n  approx_just_an_integer = 0;\n  approx_sine_of_rational = 1;\n  approx_sine_of_pi_times_rational = 2;\n  approx_rationalOfPi = 3;\n  approx_radicalOfRatio = 4;\n  approx_nothingUseful = 5;\n  approx_ratioOfRadical = 6;\n  approx_rationalOfE = 7;\n  approx_logarithmsOfRationals = 8;\n  approx_rationalsOfLogarithms = 9;\n\n  approxRationalsOfRadicals = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n\n      for (j = i1 = 1; i1 <= 10; j = ++i1) {\n        hypothesis = Math.sqrt(i) / j;\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sqrt( \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_ratioOfRadical, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRadicalsOfRationals = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, len1, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, ref1, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [1, 2, 3, 5, 6, 7, 8, 10];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n        hypothesis = Math.sqrt(i / j);\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (sqrt( \" + i + \" / \" + j + \" )\";\n            bestResultSoFar = [result, approx_radicalOfRatio, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRadicals = function (theFloat) {\n    var approxRadicalsOfRationalsResult, approxRationalsOfRadicalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    approxRationalsOfRadicalsResult = approxRationalsOfRadicals(theFloat);\n\n    if (approxRationalsOfRadicalsResult != null) {\n      return approxRationalsOfRadicalsResult;\n    }\n\n    approxRadicalsOfRationalsResult = approxRadicalsOfRationals(theFloat);\n\n    if (approxRadicalsOfRationalsResult != null) {\n      return approxRadicalsOfRationalsResult;\n    }\n\n    return null;\n  };\n\n  approxLogs = function (theFloat) {\n    var approxLogsOfRationalsResult, approxRationalsOfLogsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    approxRationalsOfLogsResult = approxRationalsOfLogs(theFloat);\n\n    if (approxRationalsOfLogsResult != null) {\n      return approxRationalsOfLogsResult;\n    }\n\n    approxLogsOfRationalsResult = approxLogsOfRationals(theFloat);\n\n    if (approxLogsOfRationalsResult != null) {\n      return approxLogsOfRationalsResult;\n    }\n\n    return null;\n  };\n\n  approxRationalsOfLogs = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 2; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        hypothesis = Math.log(i) / j;\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (likelyMultiplier !== 1 && Math.abs(Math.floor(likelyMultiplier / j)) === Math.abs(likelyMultiplier / j)) {\n          continue;\n        }\n\n        if (error < 2.2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_rationalsOfLogarithms, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxLogsOfRationals = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        hypothesis = Math.log(i / j);\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 1.96 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" / \" + j + \" )\";\n            bestResultSoFar = [result, approx_logarithmsOfRationals, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfE = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 1; o <= 2; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        hypothesis = Math.pow(Math.E, i) / j;\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (e ^ \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_rationalOfE, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfPI = function (theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        hypothesis = Math.pow(Math.PI, i) / j;\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (pi ^ \" + i + \" ) / \" + j + \" )\";\n            bestResultSoFar = [result, approx_rationalOfPi, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxTrigonometric = function (theFloat) {\n    var approxSineOfRationalMultiplesOfPIResult, approxSineOfRationalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    approxSineOfRationalsResult = approxSineOfRationals(theFloat);\n\n    if (approxSineOfRationalsResult != null) {\n      return approxSineOfRationalsResult;\n    }\n\n    approxSineOfRationalMultiplesOfPIResult = approxSineOfRationalMultiplesOfPI(theFloat);\n\n    if (approxSineOfRationalMultiplesOfPIResult != null) {\n      return approxSineOfRationalMultiplesOfPIResult;\n    }\n\n    return null;\n  };\n\n  approxSineOfRationals = function (theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 1; o <= 4; i = ++o) {\n      for (j = i1 = 1; i1 <= 4; j = ++i1) {\n        fraction = i / j;\n        hypothesis = Math.sin(fraction);\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" )\";\n            bestResultSoFar = [result, approx_sine_of_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxSineOfRationalMultiplesOfPI = function (theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n\n    for (i = o = 1; o <= 13; i = ++o) {\n      for (j = i1 = 1; i1 <= 13; j = ++i1) {\n        fraction = i / j;\n        hypothesis = Math.sin(Math.PI * fraction);\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n\n        if (error < 23 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" * pi )\";\n            bestResultSoFar = [result, approx_sine_of_pi_times_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxAll = function (theFloat) {\n    var LOG_EXPLANATIONS, approxLogsResult, approxRadicalsResult, approxRationalsOfPowersOfEResult, approxRationalsOfPowersOfPIResult, approxTrigonometricResult, bestApproxSoFar, constantsSum, constantsSumMin, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    constantsSumMin = Number.MAX_VALUE;\n    constantsSum = 0;\n    bestApproxSoFar = null;\n    LOG_EXPLANATIONS = true;\n    approxRadicalsResult = approxRadicals(theFloat);\n\n    if (approxRadicalsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRadicalsResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRadicalsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxLogsResult = approxLogs(theFloat);\n\n    if (approxLogsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxLogsResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxLogsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxRationalsOfPowersOfEResult = approxRationalsOfPowersOfE(theFloat);\n\n    if (approxRationalsOfPowersOfEResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfEResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfEResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxRationalsOfPowersOfPIResult = approxRationalsOfPowersOfPI(theFloat);\n\n    if (approxRationalsOfPowersOfPIResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfPIResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfPIResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxTrigonometricResult = approxTrigonometric(theFloat);\n\n    if (approxTrigonometricResult != null) {\n      constantsSum = simpleComplexityMeasure(approxTrigonometricResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxTrigonometricResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    return bestApproxSoFar;\n  };\n\n  simpleComplexityMeasure = function (aResult, b, c) {\n    var theSum;\n    theSum = null;\n\n    if (aResult instanceof Array) {\n      switch (aResult[1]) {\n        case approx_sine_of_pi_times_rational:\n          theSum = 4;\n          break;\n\n        case approx_rationalOfPi:\n          theSum = Math.pow(4, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n\n        case approx_rationalOfE:\n          theSum = Math.pow(3, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n\n        default:\n          theSum = 0;\n      }\n\n      theSum += Math.abs(aResult[2]) * (Math.abs(aResult[3]) + Math.abs(aResult[4]));\n    } else {\n      theSum += Math.abs(aResult) * (Math.abs(b) + Math.abs(c));\n    }\n\n    if (aResult[2] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (aResult[3] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (aResult[4] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (theSum < 0) {\n      theSum = 0;\n    }\n\n    return theSum;\n  };\n\n  testApprox = function () {\n    var error, fraction, i, i1, i2, i3, j, j1, j2, j3, k3, l1, l2, l3, len, len1, len2, len3, len4, len5, len6, len7, m1, m2, m3, n1, n2, o, o1, o2, originalValue, q1, q2, r1, r2, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, returned, returnedFraction, returnedValue, s1, s2, t1, t2, u1, u2, v1, v2, value, x1, x2, z1, z2;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n\n        if (i === j) {\n          continue;\n        }\n\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.sqrt(i) / j;\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    ref2 = [2, 3, 5, 6, 7, 8, 10];\n\n    for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {\n      i = ref2[j1];\n      ref3 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (l1 = 0, len3 = ref3.length; l1 < len3; l1++) {\n        j = ref3[l1];\n\n        if (i === j) {\n          continue;\n        }\n\n        console.log(\"testapproxRadicals testing with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.sqrt(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    ref4 = [2, 3, 5, 6, 7, 8, 10];\n\n    for (m1 = 0, len4 = ref4.length; m1 < len4; m1++) {\n      i = ref4[m1];\n      ref5 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (n1 = 0, len5 = ref5.length; n1 < len5; n1++) {\n        j = ref5[n1];\n\n        if (i === j) {\n          continue;\n        }\n\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.sqrt(i / j);\n        returned = approxRadicals(value);\n\n        if (returned != null) {\n          returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n\n          if (returned[1] === approx_radicalOfRatio && Math.abs(value - returnedValue) > 1e-15) {\n            console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n          }\n        }\n      }\n    }\n\n    ref6 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n    for (o1 = 0, len6 = ref6.length; o1 < len6; o1++) {\n      i = ref6[o1];\n      ref7 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n      for (q1 = 0, len7 = ref7.length; q1 < len7; q1++) {\n        j = ref7[q1];\n\n        if (i === 1 && j === 1) {\n          continue;\n        }\n\n        console.log(\"testapproxRadicals testing with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sqrt(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n\n        if (returned[1] === approx_radicalOfRatio && Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = r1 = 1; r1 <= 5; i = ++r1) {\n      for (j = s1 = 1; s1 <= 5; j = ++s1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.log(i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = t1 = 1; t1 <= 5; i = ++t1) {\n      for (j = u1 = 1; u1 <= 5; j = ++u1) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.log(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = v1 = 1; v1 <= 5; i = ++v1) {\n      for (j = x1 = 1; x1 <= 5; j = ++x1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.log(i / j);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = z1 = 1; z1 <= 5; i = ++z1) {\n      for (j = i2 = 1; i2 <= 5; j = ++i2) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.log(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = j2 = 1; j2 <= 2; i = ++j2) {\n      for (j = l2 = 1; l2 <= 12; j = ++l2) {\n        console.log(\"testApproxAll testing: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.E, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = m2 = 1; m2 <= 2; i = ++m2) {\n      for (j = n2 = 1; n2 <= 12; j = ++n2) {\n        console.log(\"approxRationalsOfPowersOfE testing with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.E, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfE(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfE with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = o2 = 1; o2 <= 2; i = ++o2) {\n      for (j = q2 = 1; q2 <= 12; j = ++q2) {\n        console.log(\"testApproxAll testing: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.PI, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = r2 = 1; r2 <= 2; i = ++r2) {\n      for (j = s2 = 1; s2 <= 12; j = ++s2) {\n        console.log(\"approxRationalsOfPowersOfPI testing with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.PI, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfPI(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfPI with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = t2 = 1; t2 <= 4; i = ++t2) {\n      for (j = u2 = 1; u2 <= 4; j = ++u2) {\n        console.log(\"testApproxAll testing: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        value = Math.sin(fraction);\n        returned = approxAll(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = v2 = 1; v2 <= 4; i = ++v2) {\n      for (j = x2 = 1; x2 <= 4; j = ++x2) {\n        console.log(\"testApproxAll testing with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(5);\n        returned = approxAll(value);\n\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n\n    for (i = z2 = 1; z2 <= 4; i = ++z2) {\n      for (j = i3 = 1; i3 <= 4; j = ++i3) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n\n    value = 0;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0\");\n    }\n\n    value = 0.0;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0\");\n    }\n\n    value = 0.00;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.00\");\n    }\n\n    value = 0.000;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.000\");\n    }\n\n    value = 0.0000;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0000\");\n    }\n\n    value = 1;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1\");\n    }\n\n    value = 1.0;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0\");\n    }\n\n    value = 1.00;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00\");\n    }\n\n    value = 1.000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.000\");\n    }\n\n    value = 1.0000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n\n    value = 1.00000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00000\");\n    }\n\n    value = Math.sqrt(2);\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2)\");\n    }\n\n    value = 1.41;\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: 1.41\");\n    }\n\n    value = 1.4;\n\n    if (approxRadicals(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail approxRadicals: 1.4\");\n    }\n\n    value = 0.6;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.6\");\n    }\n\n    value = 0.69;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.69\");\n    }\n\n    value = 0.7;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.7\");\n    }\n\n    value = 1.09;\n\n    if (approxLogs(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxLogs: 1.09\");\n    }\n\n    value = 1.09;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.09\");\n    }\n\n    value = 1.098;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.098\");\n    }\n\n    value = 1.1;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.1\");\n    }\n\n    value = 1.11;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.11\");\n    }\n\n    value = Math.sqrt(3);\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 3 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(3)\");\n    }\n\n    value = 1.0000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n\n    value = 3.141592;\n\n    if (approxAll(value)[0] !== \"1 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 3.141592\");\n    }\n\n    value = 31.41592;\n\n    if (approxAll(value)[0] !== \"10 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31.41592\");\n    }\n\n    value = 314.1592;\n\n    if (approxAll(value)[0] !== \"100 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 314.1592\");\n    }\n\n    value = 31415926.53589793;\n\n    if (approxAll(value)[0] !== \"10000000 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31415926.53589793\");\n    }\n\n    value = Math.sqrt(2);\n\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/4 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(2)\");\n    }\n\n    value = Math.sqrt(3);\n\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/3 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(3)\");\n    }\n\n    value = (Math.sqrt(6) - Math.sqrt(2)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4\");\n    }\n\n    value = Math.sqrt(2 - Math.sqrt(2)) / 2;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/8 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2\");\n    }\n\n    value = (Math.sqrt(6) + Math.sqrt(2)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4\");\n    }\n\n    value = Math.sqrt(2 + Math.sqrt(3)) / 2;\n\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2\");\n    }\n\n    value = (Math.sqrt(5) - 1) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/10 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(5) - 1)/4\");\n    }\n\n    value = Math.sqrt(10 - 2 * Math.sqrt(5)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/5 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4\");\n    }\n\n    value = Math.sin(Math.PI / 7);\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/7 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/7)\");\n    }\n\n    value = Math.sin(Math.PI / 9);\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/9 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/9)\");\n    }\n\n    value = 1836.15267;\n\n    if (approxRationalsOfPowersOfPI(value)[0] !== \"6 * (pi ^ 5 ) / 1 )\") {\n      console.log(\"fail approxRationalsOfPowersOfPI: 1836.15267\");\n    }\n\n    for (i = j3 = 1; j3 <= 13; i = ++j3) {\n      for (j = k3 = 1; k3 <= 13; j = ++k3) {\n        console.log(\"approxTrigonometric testing: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        value = Math.sin(Math.PI * fraction);\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail approxTrigonometric: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = l3 = 1; l3 <= 13; i = ++l3) {\n      for (j = m3 = 1; m3 <= 13; j = ++m3) {\n        if (i === 5 && j === 11 || i === 6 && j === 11) {\n          continue;\n        }\n\n        console.log(\"approxTrigonometric testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        originalValue = Math.sin(Math.PI * fraction);\n        value = originalValue.toFixed(4);\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail approxTrigonometric with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n\n    return console.log(\"testApprox done\");\n  };\n\n  $.approxRadicals = approxRadicals;\n  $.approxRationalsOfLogs = approxRationalsOfLogs;\n  $.approxAll = approxAll;\n  $.testApprox = testApprox;\n  /* arccos =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse cosine of x.\n   */\n\n  Eval_arccos = function () {\n    push(cadr(p1));\n    Eval();\n    return arccos();\n  };\n\n  arccos = function () {\n    var d, errno, n;\n    n = 0;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.acos(p1.d);\n\n      if (errno) {\n        stop(\"arccos function argument is not in the interval [-1,1]\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 4.0);\n      } else {\n        push_rational(1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    }\n\n    if (isminusoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI * 3.0 / 4.0);\n      } else {\n        push_rational(3, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    }\n\n    if (!isrational(p1)) {\n      push_symbol(ARCCOS);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push_symbol(PI);\n        }\n\n        break;\n\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI * 2.0 / 3.0);\n        } else {\n          push_rational(2, 3);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 3.0);\n        } else {\n          push_rational(1, 3);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      default:\n        push_symbol(ARCCOS);\n        push(p1);\n        list(2);\n    }\n\n    return restore();\n  };\n  /* arccosh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic cosine of x.\n   */\n\n\n  Eval_arccosh = function () {\n    push(cadr(p1));\n    Eval();\n    return arccosh();\n  };\n\n  arccosh = function () {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COSH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n\n      if (d < 1.0) {\n        stop(\"arccosh function argument is less than 1.0\");\n      }\n\n      d = Math.log(d + Math.sqrt(d * d - 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isplusone(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCCOSH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n  /* arcsin =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse sine of x.\n   */\n\n\n  Eval_arcsin = function () {\n    push(cadr(p1));\n    Eval();\n    return arcsin();\n  };\n\n  arcsin = function () {\n    var d, errno, n;\n    n = 0;\n    d = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.asin(p1.d);\n\n      if (errno) {\n        stop(\"arcsin function argument is not in the interval [-1,1]\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      push_rational(1, 4);\n      push_symbol(PI);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (isminusoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 4.0);\n      } else {\n        push_rational(-1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    }\n\n    if (!isrational(p1)) {\n      push_symbol(ARCSIN);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 2.0);\n        } else {\n          push_rational(-1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 6.0);\n        } else {\n          push_rational(-1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 6.0);\n        } else {\n          push_rational(1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      default:\n        push_symbol(ARCSIN);\n        push(p1);\n        list(2);\n    }\n\n    return restore();\n  };\n  /* arcsinh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic sine of x.\n   */\n\n\n  Eval_arcsinh = function () {\n    push(cadr(p1));\n    Eval();\n    return arcsinh();\n  };\n\n  arcsinh = function () {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(SINH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n      d = Math.log(d + Math.sqrt(d * d + 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCSINH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n  /* arctan =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse tangent of x.\n   */\n\n\n  Eval_arctan = function () {\n    push(cadr(p1));\n    Eval();\n    return arctan();\n  };\n\n  arctan = function () {\n    var d, errno;\n    d = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(TAN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.atan(p1.d);\n\n      if (errno) {\n        stop(\"arctan function error\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      arctan();\n      negate();\n      restore();\n      return;\n    }\n\n    if (Find(p1, symbol(SIN)) && Find(p1, symbol(COS))) {\n      push(p1);\n      numerator();\n      p2 = pop();\n      push(p1);\n      denominator();\n      p3 = pop();\n\n      if (car(p2) === symbol(SIN) && car(p3) === symbol(COS) && equal(cadr(p2), cadr(p3))) {\n        push(cadr(p2));\n        restore();\n        return;\n      }\n    }\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), -1, 2) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 3) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 3) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      push_rational(1, 6);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    }\n\n    if (equaln(p1, 1)) {\n      push_rational(1, 4);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), 1, 2)) {\n      push_rational(1, 3);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    }\n\n    push_symbol(ARCTAN);\n    push(p1);\n    list(2);\n    return restore();\n  };\n  /* arctanh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic tangent of x.\n   */\n\n\n  Eval_arctanh = function () {\n    push(cadr(p1));\n    Eval();\n    return arctanh();\n  };\n\n  arctanh = function () {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(TANH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n\n      if (d < -1.0 || d > 1.0) {\n        stop(\"arctanh function argument is not in the interval [-1,1]\");\n      }\n\n      d = Math.log((1.0 + d) / (1.0 - d)) / 2.0;\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCTANH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n  /* arg =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  z\n  \n  General description\n  -------------------\n  Returns the angle of complex z.\n   */\n\n  /*\n   Argument (angle) of complex z\n  \n    z    arg(z)\n    -    ------\n  \n    a    0\n  \n    -a    -pi      See note 3 below\n  \n    (-1)^a    a pi\n  \n    exp(a + i b)  b\n  \n    a b    arg(a) + arg(b)\n  \n    a + i b    arctan(b/a)\n  \n  Result by quadrant\n  \n    z    arg(z)\n    -    ------\n  \n    1 + i    1/4 pi\n  \n    1 - i    -1/4 pi\n  \n    -1 + i    3/4 pi\n  \n    -1 - i    -3/4 pi\n  \n  Notes\n  \n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n  \n    2. Symbols in z are assumed to be positive and real.\n  \n    3. Negative direction adds -pi to angle.\n  \n       Example: z = (-1)^(1/3), abs(z) = 1/3 pi, abs(-z) = -2/3 pi\n  \n    4. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n  \n      arg(numerator(z)) - arg(denominator(z))\n  \n       must be used to get the correct answer. Now the operation is\n       automatic.\n   */\n\n\n  DEBUG_ARG = false;\n\n  Eval_arg = function () {\n    push(cadr(p1));\n    Eval();\n    return arg();\n  };\n\n  arg = function () {\n    save();\n    p1 = pop();\n    push(p1);\n    numerator();\n    yyarg();\n    push(p1);\n    denominator();\n    yyarg();\n    subtract();\n    return restore();\n  };\n\n  yyarg = function () {\n    save();\n    p1 = pop();\n\n    if (ispositivenumber(p1) || p1 === symbol(PI)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(0);\n      } else {\n        push_integer(0);\n      }\n    } else if (isnegativenumber(p1)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      negate();\n    } else if (issymbol(p1)) {\n      push_symbol(ARG);\n      push(p1);\n      list(2);\n    } else if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      push(caddr(p1));\n      imag();\n    } else if (car(p1) === symbol(POWER) && isoneovertwo(caddr(p1))) {\n      if (DEBUG_ARG) {\n        console.log(\"arg of a sqrt: \" + p1);\n      }\n\n      if (DEBUG_ARG) {\n        debugger;\n      }\n\n      push(cadr(p1));\n      arg();\n\n      if (DEBUG_ARG) {\n        console.log(\" = 1/2 * \" + stack[tos - 1]);\n      }\n\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        arg();\n        add();\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n      rect();\n      p1 = pop();\n      push(p1);\n      real();\n      p2 = pop();\n      push(p1);\n      imag();\n      p3 = pop();\n\n      if (isZeroAtomOrTensor(p2)) {\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n\n        if (isnegative(p3)) {\n          negate();\n        }\n      } else {\n        push(p3);\n        push(p2);\n        divide();\n        arctan();\n\n        if (isnegative(p2)) {\n          if (evaluatingAsFloats) {\n            push_double(Math.PI);\n          } else {\n            push_symbol(PI);\n          }\n\n          if (isnegative(p3)) {\n            subtract();\n          } else {\n            add();\n          }\n        }\n      }\n    } else {\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push_integer(0);\n      } else {\n        push_symbol(ARG);\n        push(p1);\n        list(2);\n      }\n    }\n\n    return restore();\n  };\n\n  bake = function () {\n    var h, s, t, x, y, z;\n    h = 0;\n    s = 0;\n    t = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    expanding++;\n    save();\n    p1 = pop();\n    s = ispolyexpandedform(p1, symbol(SYMBOL_S));\n    t = ispolyexpandedform(p1, symbol(SYMBOL_T));\n    x = ispolyexpandedform(p1, symbol(SYMBOL_X));\n    y = ispolyexpandedform(p1, symbol(SYMBOL_Y));\n    z = ispolyexpandedform(p1, symbol(SYMBOL_Z));\n\n    if (s === 1 && t === 0 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_S);\n      bake_poly();\n    } else if (s === 0 && t === 1 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_T);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 1 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_X);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 1 && z === 0) {\n      p2 = symbol(SYMBOL_Y);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 0 && z === 1) {\n      p2 = symbol(SYMBOL_Z);\n      bake_poly();\n    } else if (iscons(p1) && car(p1) !== symbol(FOR)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        bake();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    restore();\n    return expanding--;\n  };\n\n  polyform = function () {\n    var h;\n    h = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (ispolyexpandedform(p1, p2)) {\n      bake_poly();\n    } else if (iscons(p1)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        polyform();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  bake_poly = function () {\n    var a, h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    a = tos;\n    push(p1);\n    push(p2);\n    k = coeff();\n    h = tos;\n\n    for (i = o = ref = k - 1; o >= 0; i = o += -1) {\n      p1 = stack[a + i];\n      bake_poly_term(i);\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      list(n);\n      push(symbol(ADD));\n      swap();\n      cons();\n    }\n\n    p1 = pop();\n    moveTos(tos - k);\n    return push(p1);\n  };\n\n  bake_poly_term = function (k) {\n    var h, n;\n    h = 0;\n    n = 0;\n\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n\n    if (k === 0) {\n      if (car(p1) === symbol(ADD)) {\n        p1 = cdr(p1);\n\n        while (iscons(p1)) {\n          push(car(p1));\n          p1 = cdr(p1);\n        }\n      } else {\n        push(p1);\n      }\n\n      return;\n    }\n\n    h = tos;\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else if (!equaln(p1, 1)) {\n      push(p1);\n    }\n\n    if (k === 1) {\n      push(p2);\n    } else {\n      push(symbol(POWER));\n      push(p2);\n      push_integer(k);\n      list(3);\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      list(n);\n      push(symbol(MULTIPLY));\n      swap();\n      return cons();\n    }\n  };\n  /* besselj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x,n\n  \n  General description\n  -------------------\n  \n  Returns a solution to the Bessel differential equation (Bessel function of first kind).\n  \n  Recurrence relation:\n  \n    besselj(x,n) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n-2)\n  \n    besselj(x,1/2) = sqrt(2/pi/x) sin(x)\n  \n    besselj(x,-1/2) = sqrt(2/pi/x) cos(x)\n  \n  For negative n, reorder the recurrence relation as:\n  \n    besselj(x,n-2) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n)\n  \n  Substitute n+2 for n to obtain\n  \n    besselj(x,n) = (2/x) (n+1) besselj(x,n+1) - besselj(x,n+2)\n  \n  Examples:\n  \n    besselj(x,3/2) = (1/x) besselj(x,1/2) - besselj(x,-1/2)\n  \n    besselj(x,-3/2) = -(1/x) besselj(x,-1/2) - besselj(x,1/2)\n   */\n\n\n  Eval_besselj = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return besselj();\n  };\n\n  besselj = function () {\n    save();\n    yybesselj();\n    return restore();\n  };\n\n  yybesselj = function () {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (isdouble(p1) && !isNaN(n)) {\n      d = jn(n, p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1) && isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1) && !isNaN(n)) {\n      push_integer(0);\n      return;\n    }\n\n    if (p2.k === NUM && MEQUAL(p2.q.b, 2)) {\n      if (MEQUAL(p2.q.a, 1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        sine();\n        multiply();\n        return;\n      }\n\n      if (MEQUAL(p2.q.a, -1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        cosine();\n        multiply();\n        return;\n      }\n\n      push_integer(MSIGN(p2.q.a));\n      p3 = pop();\n      push_integer(2);\n      push(p1);\n      divide();\n      push(p2);\n      push(p3);\n      subtract();\n      multiply();\n      push(p1);\n      push(p2);\n      push(p3);\n      subtract();\n      besselj();\n      multiply();\n      push(p1);\n      push(p2);\n      push_integer(2);\n      push(p3);\n      multiply();\n      subtract();\n      besselj();\n      subtract();\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      power();\n      push(p1);\n      push(p2);\n      negate();\n      power();\n      multiply();\n      push_symbol(BESSELJ);\n      push(p1);\n      negate();\n      push(p2);\n      list(3);\n      multiply();\n      return;\n    }\n\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELJ);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n\n    push(symbol(BESSELJ));\n    push(p1);\n    push(p2);\n    return list(3);\n  };\n  /* bessely =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x,n\n  \n  General description\n  -------------------\n  \n  Bessel function of second kind.\n   */\n\n\n  Eval_bessely = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return bessely();\n  };\n\n  bessely = function () {\n    save();\n    yybessely();\n    return restore();\n  };\n\n  yybessely = function () {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (isdouble(p1) && !isNaN(n)) {\n      d = yn(n, p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELY);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n\n    push_symbol(BESSELY);\n    push(p1);\n    push(p2);\n    list(3);\n  };\n\n  mint = function (a) {\n    return bigInt(a);\n  };\n\n  isSmall = function (a) {\n    return a.geq(Number.MIN_SAFE_INTEGER) && a.leq(Number.MAX_SAFE_INTEGER);\n  };\n\n  setSignTo = function (a, b) {\n    if (a.isPositive()) {\n      if (b < 0) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      if (b > 0) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n\n    return a;\n  };\n\n  makeSignSameAs = function (a, b) {\n    if (a.isPositive()) {\n      if (b.isNegative()) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      if (b.isPositive()) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n\n    return a;\n  };\n\n  makePositive = function (a) {\n    if (a.isNegative()) {\n      return a.multiply(bigInt(-1));\n    }\n\n    return a;\n  };\n  /*\n  mtotal = 0\n  MP_MIN_SIZE = 2\n  MP_MAX_FREE  = 1000\n  \n  mnew = (n) ->\n    if (n < MP_MIN_SIZE)\n      n = MP_MIN_SIZE\n    if (n == MP_MIN_SIZE && mfreecount)\n      p = free_stack[--mfreecount]\n    else\n      p = [] #(unsigned int *) malloc((n + 3) * sizeof (int))\n      #if (p == 0)\n       *  stop(\"malloc failure\")\n    p[0] = n\n    mtotal += n\n    return p[3]\n   */\n\n  /*\n  free_stack = []\n  \n  mfree = (array, p) ->\n    p -= 3\n    mtotal -= array[p]\n    if (array[p] == MP_MIN_SIZE && mfreecount < MP_MAX_FREE)\n      free_stack[mfreecount++] = p\n    else\n      free(p)\n   */\n\n  /*\n  mint = (n) ->\n    p = mnew(1)\n    if (n < 0)\n       * !!! this is FU\n       * MSIGN(p) = -1\n      fu = true\n    else\n       * !!! this is FU\n      #MSIGN(p) = 1\n      fu = true\n     * !!! this is FU\n    #MLENGTH(p) = 1\n    p[0] = Math.abs(n)\n    return p\n   */\n\n  /*\n  mcopy = (a) ->\n    #unsigned int *b\n  \n    b = mnew(MLENGTH(a))\n  \n     * !!! fu\n    #MSIGN(b) = MSIGN(a)\n    #MLENGTH(b) = MLENGTH(a)\n  \n    for i in [0...MLENGTH(a)]\n      b[i] = a[i]\n  \n    return b\n   */\n\n  /*\n   * \n   * ge not invoked from anywhere - is you need ge\n   * just use the bigNum's ge implementation\n   * leaving it here just in case I decide to backport to C\n   *\n   * a >= b ?\n   * and and b arrays of ints, len is an int\n  ge = (a, b, len) ->\n    i = 0\n    for i in [0...len]\n      if (a[i] == b[i])\n        continue\n      else\n        break\n    if (a[i] >= b[i])\n      return 1\n    else\n      return 0\n   */\n\n\n  add_numbers = function () {\n    var a, b, theResult;\n    a = 1.0;\n    b = 1.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qadd();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    theResult = a + b;\n    push_double(theResult);\n    return restore();\n  };\n\n  subtract_numbers = function () {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qsub();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a - b);\n    return restore();\n  };\n\n  multiply_numbers = function () {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qmul();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a * b);\n    return restore();\n  };\n\n  divide_numbers = function () {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qdiv();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"divide by zero\");\n    }\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a / b);\n    return restore();\n  };\n\n  invert_number = function () {\n    var a, b;\n    save();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p1)) {\n      stop(\"divide by zero\");\n    }\n\n    if (isdouble(p1)) {\n      push_double(1 / p1.d);\n      restore();\n      return;\n    }\n\n    a = bigInt(p1.q.a);\n    b = bigInt(p1.q.b);\n    b = makeSignSameAs(b, a);\n    a = setSignTo(a, 1);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = b;\n    p1.q.b = a;\n    push(p1);\n    return restore();\n  };\n\n  compare_rationals = function (a, b) {\n    var ab, ba, t;\n    t = 0;\n    ab = mmul(a.q.a, b.q.b);\n    ba = mmul(a.q.b, b.q.a);\n    t = mcmp(ab, ba);\n    return t;\n  };\n\n  compare_numbers = function (a, b) {\n    var x, y;\n    x = 0.0;\n    y = 0.0;\n\n    if (isrational(a) && isrational(b)) {\n      return compare_rationals(a, b);\n    }\n\n    if (isdouble(a)) {\n      x = a.d;\n    } else {\n      x = convert_rational_to_double(a);\n    }\n\n    if (isdouble(b)) {\n      y = b.d;\n    } else {\n      y = convert_rational_to_double(b);\n    }\n\n    if (x < y) {\n      return -1;\n    }\n\n    if (x > y) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  negate_number = function () {\n    save();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    switch (p1.k) {\n      case NUM:\n        p2 = new U();\n        p2.k = NUM;\n        p2.q.a = bigInt(p1.q.a.multiply(bigInt.minusOne));\n        p2.q.b = bigInt(p1.q.b);\n        push(p2);\n        break;\n\n      case DOUBLE:\n        push_double(-p1.d);\n        break;\n\n      default:\n        stop(\"bug caught in mp_negate_number\");\n    }\n\n    return restore();\n  };\n\n  bignum_truncate = function () {\n    var a;\n    save();\n    p1 = pop();\n    a = mdiv(p1.q.a, p1.q.b);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  mp_numerator = function () {\n    save();\n    p1 = pop();\n\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.a);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  mp_denominator = function () {\n    save();\n    p1 = pop();\n\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.b);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  bignum_power_number = function (expo) {\n    var a, b, t;\n    save();\n    p1 = pop();\n    a = mpow(p1.q.a, Math.abs(expo));\n    b = mpow(p1.q.b, Math.abs(expo));\n\n    if (expo < 0) {\n      t = a;\n      a = b;\n      b = t;\n      a = makeSignSameAs(a, b);\n      b = setSignTo(b, 1);\n    }\n\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = b;\n    push(p1);\n    return restore();\n  };\n\n  convert_bignum_to_double = function (p) {\n    return p.toJSNumber();\n  };\n\n  convert_rational_to_double = function (p) {\n    var quotientAndRemainder, result;\n\n    if (p.q == null) {\n      debugger;\n    }\n\n    quotientAndRemainder = p.q.a.divmod(p.q.b);\n    result = quotientAndRemainder.quotient + quotientAndRemainder.remainder / p.q.b.toJSNumber();\n    return result;\n  };\n\n  push_integer = function (n) {\n    if (DEBUG) {\n      console.log(\"pushing integer \" + n);\n    }\n\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = bigInt(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  push_double = function (d) {\n    save();\n    p1 = new U();\n    p1.k = DOUBLE;\n    p1.d = d;\n    push(p1);\n    return restore();\n  };\n\n  push_rational = function (a, b) {\n    /*\n    save()\n    p1 = new U()\n    p1.k = NUM\n    p1.q.a = bigInt(a)\n    p1.q.b = bigInt(b)\n    ## FIXME -- normalize ##\n    push(p1)\n    restore()\n     */\n    var p;\n    p = new U();\n    p.k = NUM;\n    p.q.a = bigInt(a);\n    p.q.b = bigInt(b);\n    return push(p);\n  };\n\n  pop_integer = function () {\n    var n;\n    n = 0 / 0;\n    save();\n    p1 = pop();\n\n    switch (p1.k) {\n      case NUM:\n        if (isinteger(p1) && isSmall(p1.q.a)) {\n          n = p1.q.a.toJSNumber();\n        }\n\n        break;\n\n      case DOUBLE:\n        if (DEBUG) {\n          console.log(\"popping integer but double is found\");\n        }\n\n        if (Math.floor(p1.d) === p1.d) {\n          if (DEBUG) {\n            console.log(\"...altough it's an integer\");\n          }\n\n          n = p1.d;\n        }\n\n    }\n\n    restore();\n    return n;\n  };\n\n  print_double = function (p, flag) {\n    var accumulator, buf;\n    accumulator = \"\";\n    buf = doubleToReasonableString(p.d);\n\n    if (flag === 1 && buf === '-') {\n      accumulator += print_str(buf + 1);\n    } else {\n      accumulator += print_str(buf);\n    }\n\n    return accumulator;\n  };\n\n  bignum_scan_integer = function (s) {\n    var a, scounter, sign_;\n    save();\n    scounter = 0;\n    sign_ = s[scounter];\n\n    if (sign_ === '+' || sign_ === '-') {\n      scounter++;\n    }\n\n    a = bigInt(s.substring(scounter));\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n\n    if (sign_ === '-') {\n      negate();\n    }\n\n    return restore();\n  };\n\n  bignum_scan_float = function (s) {\n    return push_double(parseFloat(s));\n  };\n\n  print_number = function (p, signed) {\n    var aAsString, accumulator, buf, denominatorString;\n    accumulator = \"\";\n    denominatorString = \"\";\n    buf = \"\";\n\n    switch (p.k) {\n      case NUM:\n        aAsString = p.q.a.toString();\n\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n\n        if (printMode === PRINTMODE_LATEX && isfraction(p)) {\n          aAsString = \"\\\\frac{\" + aAsString + \"}{\";\n        }\n\n        accumulator += aAsString;\n\n        if (isfraction(p)) {\n          if (printMode !== PRINTMODE_LATEX) {\n            accumulator += \"/\";\n          }\n\n          denominatorString = p.q.b.toString();\n\n          if (printMode === PRINTMODE_LATEX) {\n            denominatorString += \"}\";\n          }\n\n          accumulator += denominatorString;\n        }\n\n        break;\n\n      case DOUBLE:\n        aAsString = doubleToReasonableString(p.d);\n\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n\n        accumulator += aAsString;\n    }\n\n    return accumulator;\n  };\n\n  gcd_numbers = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mgcd(p1.q.a, p2.q.a);\n    p3.q.b = mgcd(p1.q.b, p2.q.b);\n    p3.q.a = setSignTo(p3.q.a, 1);\n    push(p3);\n    return restore();\n  };\n\n  pop_double = function () {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    switch (p1.k) {\n      case NUM:\n        d = convert_rational_to_double(p1);\n        break;\n\n      case DOUBLE:\n        d = p1.d;\n        break;\n\n      default:\n        d = 0.0;\n    }\n\n    restore();\n    return d;\n  };\n\n  bignum_float = function () {\n    var d;\n    d = 0.0;\n    d = convert_rational_to_double(pop());\n    return push_double(d);\n  };\n\n  bignum_factorial = function (n) {\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = __factorial(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  __factorial = function (n) {\n    var a, b, i, o, ref, t;\n    i = 0;\n\n    if (n === 0 || n === 1) {\n      a = bigInt(1);\n      return a;\n    }\n\n    a = bigInt(2);\n    b = bigInt(0);\n\n    if (3 <= n) {\n      for (i = o = 3, ref = n; 3 <= ref ? o <= ref : o >= ref; i = 3 <= ref ? ++o : --o) {\n        b = bigInt(i);\n        t = mmul(a, b);\n        a = t;\n      }\n    }\n\n    return a;\n  };\n\n  mask = [0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020, 0x00000040, 0x00000080, 0x00000100, 0x00000200, 0x00000400, 0x00000800, 0x00001000, 0x00002000, 0x00004000, 0x00008000, 0x00010000, 0x00020000, 0x00040000, 0x00080000, 0x00100000, 0x00200000, 0x00400000, 0x00800000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000];\n\n  mp_set_bit = function (x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] |= mask[k % 32];\n  };\n\n  mp_clr_bit = function (x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] &= ~mask[k % 32];\n  };\n\n  mshiftright = function (a) {\n    return a = a.shiftRight();\n  };\n\n  Eval_binomial = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return binomial();\n  };\n\n  binomial = function () {\n    save();\n    ybinomial();\n    return restore();\n  };\n\n  ybinomial = function () {\n    p2 = pop();\n    p1 = pop();\n\n    if (BINOM_check_args() === 0) {\n      push(zero);\n      return;\n    }\n\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    return divide();\n  };\n\n  BINOM_check_args = function () {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  /* ceiling =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Returns the smallest integer not less than x.\n   */\n\n\n  Eval_ceiling = function () {\n    push(cadr(p1));\n    Eval();\n    return ceiling();\n  };\n\n  ceiling = function () {\n    save();\n    yyceiling();\n    return restore();\n  };\n\n  yyceiling = function () {\n    var d, doNothing;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(CEILING);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.ceil(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n\n    if (isnegativenumber(p1)) {\n      return doNothing = 1;\n    } else {\n      push_integer(1);\n      return add();\n    }\n  };\n  /* choose =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  n,k\n  \n  General description\n  -------------------\n  \n  Returns the number of combinations of n items taken k at a time.\n  \n  For example, the number of five card hands is choose(52,5)\n  \n  ```\n                            n!\n        choose(n,k) = -------------\n                       k! (n - k)!\n  ```\n   */\n\n\n  Eval_choose = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return choose();\n  };\n\n  choose = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (choose_check_args() === 0) {\n      push_integer(0);\n      restore();\n      return;\n    }\n\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    divide();\n    return restore();\n  };\n\n  choose_check_args = function () {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  /* circexp =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Returns expression x with circular and hyperbolic functions converted to exponential forms. Sometimes this will simplify an expression.\n   */\n\n\n  Eval_circexp = function () {\n    push(cadr(p1));\n    Eval();\n    circexp();\n    return Eval();\n  };\n\n  circexp = function () {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      expcos();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      expsin();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(TAN)) {\n      p1 = cadr(p1);\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      exponential();\n      p2 = pop();\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      negate();\n      exponential();\n      p3 = pop();\n      push(p3);\n      push(p2);\n      subtract();\n      push(imaginaryunit);\n      multiply();\n      push(p2);\n      push(p3);\n      add();\n      divide();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(COSH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      add();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(SINH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      subtract();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(TANH)) {\n      p1 = cadr(p1);\n      push(p1);\n      push_integer(2);\n      multiply();\n      exponential();\n      p1 = pop();\n      push(p1);\n      push_integer(1);\n      subtract();\n      push(p1);\n      push_integer(1);\n      add();\n      divide();\n      restore();\n      return;\n    }\n\n    if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        circexp();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return;\n    }\n\n    if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        circexp();\n        p1.tensor.elem[i] = pop();\n      }\n\n      push(p1);\n      restore();\n      return;\n    }\n\n    push(p1);\n    return restore();\n  };\n  /* clearall =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  \n  General description\n  -------------------\n  \n  Completely wipes all variables from the environment.\n   */\n\n\n  Eval_clearall = function () {\n    do_clearall();\n    return push(symbol(NIL));\n  };\n\n  do_clearall = function () {\n    if (test_flag === 0) {\n      clear_term();\n    }\n\n    do_clearPatterns();\n    clear_symbols();\n    defn();\n    return codeGen = false;\n  };\n\n  clearall = function () {\n    return run(\"clearall\");\n  };\n\n  clearRenamedVariablesToAvoidBindingToExternalScope = function () {\n    var i, o, ref, results;\n    results = [];\n\n    for (i = o = 0, ref = symtab.length; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (symtab[i].printname.indexOf(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\") !== -1) {\n        symtab[i].k = SYM;\n        symtab[i].printname = \"\";\n        binding[i] = symtab[i];\n        results.push(isSymbolReclaimable[i] = true);\n      } else {\n        results.push(void 0);\n      }\n    }\n\n    return results;\n  };\n  /* clear =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Completely wipes a variable from the environment (while doing x = quote(x) just unassigns it).\n   */\n\n\n  Eval_clear = function () {\n    var indexFound, variableToBeCleared;\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      variableToBeCleared = car(p2);\n\n      if (variableToBeCleared.k !== SYM) {\n        stop(\"symbol error\");\n      }\n\n      indexFound = symtab.indexOf(variableToBeCleared);\n      symtab[indexFound].k = SYM;\n      symtab[indexFound].printname = \"\";\n      binding[indexFound] = symtab[indexFound];\n      isSymbolReclaimable[indexFound] = true;\n      p2 = cdr(p2);\n    }\n\n    return push(symbol(NIL));\n  };\n  /*\n   Convert complex z to clock form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n  \n    clock(z) = abs(z) * (-1) ^ (arg(z) / pi)\n  \n    For example, clock(exp(i pi/3)) gives the result (-1)^(1/3)\n   */\n\n\n  DEBUG_CLOCKFORM = false;\n\n  Eval_clock = function () {\n    push(cadr(p1));\n    Eval();\n    return clockform();\n  };\n\n  clockform = function () {\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: abs of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p1);\n    arg();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: arg of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push(symbol(PI));\n    }\n\n    divide();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: divide : \" + stack[tos - 1]);\n    }\n\n    list(3);\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: power : \" + stack[tos - 1]);\n    }\n\n    multiply();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: multiply : \" + stack[tos - 1]);\n    }\n    /*\n    p1 = pop()\n    push(p1)\n    abs()\n    push(symbol(E))\n    push(p1)\n    arg()\n    push(imaginaryunit)\n    multiply()\n    power()\n    multiply()\n     */\n\n\n    return restore();\n  };\n  /* coeff =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p,x,n\n  \n  General description\n  -------------------\n  Returns the coefficient of x^n in polynomial p. The x argument can be omitted for polynomials in x.\n   */\n\n\n  Eval_coeff = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n\n    if (p3 === symbol(NIL)) {\n      p3 = p2;\n      p2 = symbol(SYMBOL_X);\n    }\n\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    return filter();\n  };\n\n  coeff = function () {\n    var h, n, prev_expanding;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n\n    while (1) {\n      push(p1);\n      push(p2);\n      push(zero);\n      subst();\n      Eval();\n      p3 = pop();\n      push(p3);\n      push(p1);\n      push(p3);\n      subtract();\n      p1 = pop();\n\n      if (equal(p1, zero)) {\n        n = tos - h;\n        restore();\n        return n;\n      }\n\n      push(p1);\n      push(p2);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      p1 = pop();\n    }\n  };\n  /* cofactor =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m,i,j\n  \n  General description\n  -------------------\n  Cofactor of a matrix component.\n  Let c be the cofactor matrix of matrix m, i.e. tranpose(c) = adj(m).\n  This function returns c[i,j].\n   */\n\n\n  Eval_cofactor = function () {\n    var doNothing, i, j, n;\n    i = 0;\n    j = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n\n    if (istensor(p2) && p2.tensor.ndim === 2 && p2.tensor.dim[0] === p2.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"cofactor: 1st arg: square matrix expected\");\n    }\n\n    n = p2.tensor.dim[0];\n    push(caddr(p1));\n    Eval();\n    i = pop_integer();\n\n    if (i < 1 || i > n) {\n      stop(\"cofactor: 2nd arg: row index expected\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (j < 1 || j > n) {\n      stop(\"cofactor: 3rd arg: column index expected\");\n    }\n\n    return cofactor(p2, n, i - 1, j - 1);\n  };\n\n  cofactor = function (p, n, row, col) {\n    var i, i1, j, o, ref, ref1;\n    i = 0;\n    j = 0;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i !== row && j !== col) {\n          push(p.tensor.elem[n * i + j]);\n        }\n      }\n    }\n\n    determinant(n - 1);\n\n    if ((row + col) % 2) {\n      return negate();\n    }\n  };\n\n  Eval_condense = function () {\n    push(cadr(p1));\n    Eval();\n    return Condense();\n  };\n\n  Condense = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    save();\n    yycondense();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yycondense = function () {\n    p1 = pop();\n\n    if (car(p1) !== symbol(ADD)) {\n      push(p1);\n      return;\n    }\n\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply_noexpand();\n      add();\n      p3 = cdr(p3);\n    }\n\n    yyexpand();\n    push(p2);\n    return divide();\n  };\n  /* conj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  z\n  \n  General description\n  -------------------\n  Returns the complex conjugate of z.\n   */\n\n\n  Eval_conj = function () {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    push(p1);\n\n    if (!Find(p1, imaginaryunit)) {\n      polar();\n      conjugate();\n      return clockform();\n    } else {\n      return conjugate();\n    }\n  };\n\n  conjugate = function () {\n    push(imaginaryunit);\n    push(imaginaryunit);\n    negate();\n    subst();\n    return Eval();\n  };\n\n  consCount = 0;\n\n  cons = function () {\n    var p;\n    consCount++;\n\n    if (DEBUG) {\n      console.log(\"cons tos: \" + tos + \" # \" + consCount);\n    }\n\n    p = new U();\n    p.k = CONS;\n    p.cons.cdr = pop();\n\n    if (p === p.cons.cdr) {\n      debugger;\n      console.log(\"something wrong p == its cdr\");\n    }\n\n    p.cons.car = pop();\n    /*\n    console.log \"cons new cdr.k = \" + p.cons.cdr.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.cdr\n    console.log \"cons new car.k = \" + p.cons.car.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.car\n     */\n\n    return push(p);\n  };\n  /* contract =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,i,j\n  \n  General description\n  -------------------\n  Contract across tensor indices i.e. returns \"a\" summed over indices i and j.\n  If i and j are omitted then 1 and 2 are used.\n  contract(m) is equivalent to the trace of matrix m.\n   */\n\n\n  Eval_contract = function () {\n    push(cadr(p1));\n    Eval();\n\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n\n    return contract();\n  };\n\n  contract = function () {\n    save();\n    yycontract();\n    return restore();\n  };\n\n  yycontract = function () {\n    var a, ai, an, b, h, i, i1, j, j1, k, l, l1, m, m1, n, n1, ndim, nelem, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    ndim = 0;\n    nelem = 0;\n    ai = [];\n    an = [];\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"contract: tensor expected, 1st arg is not a tensor\");\n      }\n\n      push(zero);\n      return;\n    }\n\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    ndim = p1.tensor.ndim;\n\n    if (l < 1 || l > ndim || m < 1 || m > ndim || l === m || p1.tensor.dim[l - 1] !== p1.tensor.dim[m - 1]) {\n      stop(\"contract: index out of range\");\n    }\n\n    l--;\n    m--;\n    n = p1.tensor.dim[l];\n    nelem = 1;\n\n    for (i = o = 0, ref = ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (i !== l && i !== m) {\n        nelem *= p1.tensor.dim[i];\n      }\n    }\n\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - 2;\n    j = 0;\n\n    for (i = i1 = 0, ref1 = ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (i !== l && i !== m) {\n        p2.tensor.dim[j++] = p1.tensor.dim[i];\n      }\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n\n    for (i = j1 = 0, ref2 = ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n\n    for (i = l1 = 0, ref3 = nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(zero);\n\n      for (j = m1 = 0, ref4 = n; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        ai[l] = j;\n        ai[m] = j;\n        h = 0;\n\n        for (k = n1 = 0, ref5 = ndim; 0 <= ref5 ? n1 < ref5 : n1 > ref5; k = 0 <= ref5 ? ++n1 : --n1) {\n          h = h * an[k] + ai[k];\n        }\n\n        push(a[h]);\n        add();\n      }\n\n      b[i] = pop();\n\n      for (j = o1 = ref6 = ndim - 1; ref6 <= 0 ? o1 <= 0 : o1 >= 0; j = ref6 <= 0 ? ++o1 : --o1) {\n        if (j === l || j === m) {\n          continue;\n        }\n\n        if (++ai[j] < an[j]) {\n          break;\n        }\n\n        ai[j] = 0;\n      }\n    }\n\n    if (nelem === 1) {\n      return push(b[0]);\n    } else {\n      return push(p2);\n    }\n  };\n  /* cos =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the cosine of x.\n   */\n\n\n  Eval_cos = function () {\n    push(cadr(p1));\n    Eval();\n    return cosine();\n  };\n\n  cosine = function () {\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      cosine_of_angle_sum();\n    } else {\n      cosine_of_angle();\n    }\n\n    return restore();\n  };\n\n  cosine_of_angle_sum = function () {\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      p4 = car(p2);\n\n      if (isnpi(p4)) {\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        cosine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        sine();\n        push(p4);\n        sine();\n        multiply();\n        subtract();\n        return;\n      }\n\n      p2 = cdr(p2);\n    }\n\n    return cosine_of_angle();\n  };\n\n  cosine_of_angle = function () {\n    var d, n;\n\n    if (car(p1) === symbol(ARCCOS)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.cos(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      return;\n    }\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(COS));\n      push(p1);\n      list(2);\n      return;\n    }\n\n    switch (n % 360) {\n      case 90:\n      case 270:\n        return push_integer(0);\n\n      case 60:\n      case 300:\n        return push_rational(1, 2);\n\n      case 120:\n      case 240:\n        return push_rational(-1, 2);\n\n      case 45:\n      case 315:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 135:\n      case 225:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 30:\n      case 330:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 150:\n      case 210:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 0:\n        return push_integer(1);\n\n      case 180:\n        return push_integer(-1);\n\n      default:\n        push(symbol(COS));\n        push(p1);\n        return list(2);\n    }\n  };\n  /* cosh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the hyperbolic cosine of x\n  \n  ```\n              exp(x) + exp(-x)\n    cosh(x) = ----------------\n                     2\n  ```\n   */\n\n\n  Eval_cosh = function () {\n    push(cadr(p1));\n    Eval();\n    return ycosh();\n  };\n\n  ycosh = function () {\n    save();\n    yycosh();\n    return restore();\n  };\n\n  yycosh = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCCOSH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.cosh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n\n    push_symbol(COSH);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_decomp = function () {\n    var h;\n    save();\n    console.log(\"Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!\");\n    h = tos;\n    push(symbol(NIL));\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    decomp(false);\n    list(tos - h);\n    return restore();\n  };\n\n  pushTryNotToDuplicate = function (toBePushed) {\n    if (tos > 0) {\n      if (DEBUG) {\n        console.log(\"comparing \" + toBePushed + \" to: \" + stack[tos - 1]);\n      }\n\n      if (equal(toBePushed, stack[tos - 1])) {\n        if (DEBUG) {\n          console.log(\"skipping \" + toBePushed + \" because it's already on stack \");\n        }\n\n        return;\n      }\n    }\n\n    return push(toBePushed);\n  };\n\n  decomp = function (generalTransform) {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (DEBUG) {\n      console.log(\"DECOMPOSING \" + p1);\n    }\n\n    if (generalTransform) {\n      if (!iscons(p1)) {\n        if (DEBUG) {\n          console.log(\" ground thing: \" + p1);\n        }\n\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    } else {\n      if (Find(p1, p2) === 0) {\n        if (DEBUG) {\n          console.log(\" entire expression is constant\");\n        }\n\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    }\n\n    if (isadd(p1)) {\n      decomp_sum(generalTransform);\n      restore();\n      return;\n    }\n\n    if (ismultiply(p1)) {\n      decomp_product(generalTransform);\n      restore();\n      return;\n    }\n\n    if (DEBUG) {\n      console.log(\" naive decomp\");\n    }\n\n    p3 = cdr(p1);\n\n    if (DEBUG) {\n      console.log(\"startig p3: \" + p3);\n    }\n\n    while (iscons(p3)) {\n      if (generalTransform) {\n        push(car(p3));\n      }\n\n      if (DEBUG) {\n        console.log(\"recursive decomposition\");\n      }\n\n      push(car(p3));\n\n      if (DEBUG) {\n        console.log(\"car(p3): \" + car(p3));\n      }\n\n      push(p2);\n\n      if (DEBUG) {\n        console.log(\"p2: \" + p2);\n      }\n\n      decomp(generalTransform);\n      p3 = cdr(p3);\n    }\n\n    return restore();\n  };\n\n  decomp_sum = function (generalTransform) {\n    var h;\n\n    if (DEBUG) {\n      console.log(\" decomposing the sum \");\n    }\n\n    h = 0;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n\n      p3 = cdr(p3);\n    }\n\n    h = tos;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n\n      p3 = cdr(p3);\n    }\n\n    if (tos - h) {\n      add_all(tos - h);\n      p3 = pop();\n      pushTryNotToDuplicate(p3);\n      push(p3);\n      return negate();\n    }\n  };\n\n  decomp_product = function (generalTransform) {\n    var h;\n\n    if (DEBUG) {\n      console.log(\" decomposing the product \");\n    }\n\n    h = 0;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n\n      p3 = cdr(p3);\n    }\n\n    h = tos;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n\n      p3 = cdr(p3);\n    }\n\n    if (tos - h) {\n      return multiply_all(tos - h);\n    }\n  };\n\n  define_user_function = function () {\n    p3 = caadr(p1);\n    p4 = cdadr(p1);\n    p5 = caddr(p1);\n\n    if (!issymbol(p3)) {\n      stop(\"function name?\");\n    }\n\n    if (car(p5) === symbol(EVAL)) {\n      push(cadr(p5));\n      Eval();\n      p5 = pop();\n    }\n\n    push_symbol(FUNCTION);\n    push(p5);\n    push(p4);\n    list(3);\n    p5 = pop();\n    set_binding(p3, p5);\n    return push_symbol(NIL);\n  };\n\n  Eval_function_reference = function () {\n    return push(p1);\n  };\n  /* defint =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  f,x,a,b[,y,c,d...]\n  \n  General description\n  -------------------\n  Returns the definite integral of f with respect to x evaluated from \"a\" to b.\n  The argument list can be extended for multiple integrals (or \"iterated\n  integrals\"), for example a double integral (which can represent for\n  example a volume under a surface), or a triple integral, etc. For\n  example, defint(f,x,a,b,y,c,d).\n   */\n\n\n  Eval_defint = function () {\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    p1 = cddr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p3 = pop();\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p4 = pop();\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p5 = pop();\n      push(p2);\n      push(p3);\n      integral();\n      p2 = pop();\n      push(p2);\n      push(p3);\n      push(p5);\n      subst();\n      Eval();\n      push(p2);\n      push(p3);\n      push(p4);\n      subst();\n      Eval();\n      subtract();\n      p2 = pop();\n    }\n\n    return push(p2);\n  };\n  /* deg =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p,x\n  \n  General description\n  -------------------\n  Returns the degree of polynomial p(x).\n   */\n\n\n  Eval_degree = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    return degree();\n  };\n\n  degree = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = zero;\n    yydegree(p1);\n    push(p3);\n    return restore();\n  };\n\n  yydegree = function (p) {\n    var results;\n\n    if (equal(p, p2)) {\n      if (isZeroAtomOrTensor(p3)) {\n        return p3 = one;\n      }\n    } else if (car(p) === symbol(POWER)) {\n      if (equal(cadr(p), p2) && isNumericAtom(caddr(p)) && lessp(p3, caddr(p))) {\n        return p3 = caddr(p);\n      }\n    } else if (iscons(p)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        yydegree(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    }\n  };\n  /* denominator =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the denominator of expression x.\n   */\n\n\n  Eval_denominator = function () {\n    push(cadr(p1));\n    Eval();\n    return denominator();\n  };\n\n  denominator = function () {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        denominator();\n        theArgument = cdr(theArgument);\n      }\n\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_denominator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      push(theArgument);\n      return reciprocate();\n    } else {\n      return push(one);\n    }\n  };\n\n  Eval_derivative = function () {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n\n    while (1) {\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n\n        if (isNaN(n)) {\n          stop(\"nth derivative: check n\");\n        }\n      } else {\n        n = 1;\n      }\n\n      push(p3);\n\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          derivative();\n        }\n      } else {\n        n = -n;\n\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          integral();\n        }\n      }\n\n      p3 = pop();\n\n      if (p5 === symbol(NIL)) {\n        break;\n      }\n\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n\n        if (p5 === symbol(NIL)) {\n          break;\n        }\n\n        if (isNumericAtom(p5)) {\n          doNothing = 1;\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop();\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n      }\n    }\n\n    return push(p3);\n  };\n\n  derivative = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isNumericAtom(p2)) {\n      stop(\"undefined function\");\n    }\n\n    if (istensor(p1)) {\n      if (istensor(p2)) {\n        d_tensor_tensor();\n      } else {\n        d_tensor_scalar();\n      }\n    } else {\n      if (istensor(p2)) {\n        d_scalar_tensor();\n      } else {\n        d_scalar_scalar();\n      }\n    }\n\n    return restore();\n  };\n\n  d_scalar_scalar = function () {\n    if (issymbol(p2)) {\n      return d_scalar_scalar_1();\n    } else {\n      push(p1);\n      push(p2);\n      push(symbol(SECRETX));\n      subst();\n      push(symbol(SECRETX));\n      derivative();\n      push(symbol(SECRETX));\n      push(p2);\n      return subst();\n    }\n  };\n\n  d_scalar_scalar_1 = function () {\n    if (equal(p1, p2)) {\n      push(one);\n      return;\n    }\n\n    if (!iscons(p1)) {\n      push(zero);\n      return;\n    }\n\n    if (isadd(p1)) {\n      dsum();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      dproduct();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER)) {\n      dpower();\n      return;\n    }\n\n    if (car(p1) === symbol(DERIVATIVE)) {\n      dd();\n      return;\n    }\n\n    if (car(p1) === symbol(LOG)) {\n      dlog();\n      return;\n    }\n\n    if (car(p1) === symbol(SIN)) {\n      dsin();\n      return;\n    }\n\n    if (car(p1) === symbol(COS)) {\n      dcos();\n      return;\n    }\n\n    if (car(p1) === symbol(TAN)) {\n      dtan();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCSIN)) {\n      darcsin();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCCOS)) {\n      darccos();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCTAN)) {\n      darctan();\n      return;\n    }\n\n    if (car(p1) === symbol(SINH)) {\n      dsinh();\n      return;\n    }\n\n    if (car(p1) === symbol(COSH)) {\n      dcosh();\n      return;\n    }\n\n    if (car(p1) === symbol(TANH)) {\n      dtanh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCSINH)) {\n      darcsinh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCCOSH)) {\n      darccosh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCTANH)) {\n      darctanh();\n      return;\n    }\n\n    if (car(p1) === symbol(ABS)) {\n      dabs();\n      return;\n    }\n\n    if (car(p1) === symbol(SGN)) {\n      dsgn();\n      return;\n    }\n\n    if (car(p1) === symbol(HERMITE)) {\n      dhermite();\n      return;\n    }\n\n    if (car(p1) === symbol(ERF)) {\n      derf();\n      return;\n    }\n\n    if (car(p1) === symbol(ERFC)) {\n      derfc();\n      return;\n    }\n\n    if (car(p1) === symbol(BESSELJ)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbesselj0();\n      } else {\n        dbesseljn();\n      }\n\n      return;\n    }\n\n    if (car(p1) === symbol(BESSELY)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbessely0();\n      } else {\n        dbesselyn();\n      }\n\n      return;\n    }\n\n    if (car(p1) === symbol(INTEGRAL) && caddr(p1) === p2) {\n      derivative_of_integral();\n      return;\n    }\n\n    return dfunction();\n  };\n\n  dsum = function () {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      derivative();\n      p1 = cdr(p1);\n    }\n\n    return add_all(tos - h);\n  };\n\n  dproduct = function () {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = length(p1) - 1;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3 = cdr(p1);\n\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(car(p3));\n\n        if (i === j) {\n          push(p2);\n          derivative();\n        }\n\n        p3 = cdr(p3);\n      }\n\n      multiply_all(n);\n    }\n\n    return add_all(n);\n  };\n\n  dpower = function () {\n    push(caddr(p1));\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    push(cadr(p1));\n    logarithm();\n    push(caddr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    add();\n    push(p1);\n    return multiply();\n  };\n\n  dlog = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    return divide();\n  };\n\n  dd = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    p3 = pop();\n\n    if (car(p3) === symbol(DERIVATIVE)) {\n      push_symbol(DERIVATIVE);\n      push_symbol(DERIVATIVE);\n      push(cadr(p3));\n\n      if (lessp(caddr(p3), caddr(p1))) {\n        push(caddr(p3));\n        list(3);\n        push(caddr(p1));\n      } else {\n        push(caddr(p1));\n        list(3);\n        push(caddr(p3));\n      }\n\n      return list(3);\n    } else {\n      push(p3);\n      push(caddr(p1));\n      return derivative();\n    }\n  };\n\n  dfunction = function () {\n    p3 = cdr(p1);\n\n    if (p3 === symbol(NIL) || Find(p3, p2)) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(zero);\n    }\n  };\n\n  dsin = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    return multiply();\n  };\n\n  dcos = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sine();\n    multiply();\n    return negate();\n  };\n\n  dtan = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsin = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccos = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    multiply();\n    return negate();\n  };\n\n  darctan = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    add();\n    inverse();\n    multiply();\n    return simplify();\n  };\n\n  dsinh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    return multiply();\n  };\n\n  dcosh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ysinh();\n    return multiply();\n  };\n\n  dtanh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsinh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccosh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darctanh = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    inverse();\n    return multiply();\n  };\n\n  dabs = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sgn();\n    return multiply();\n  };\n\n  dsgn = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    dirac();\n    multiply();\n    push_integer(2);\n    return multiply();\n  };\n\n  dhermite = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(2);\n    push(caddr(p1));\n    multiply();\n    multiply();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    hermite();\n    return multiply();\n  };\n\n  derf = function () {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  derfc = function () {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(-2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  dbesselj0 = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesseljn = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    besselj();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    besselj();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  dbessely0 = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesselyn = function () {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    bessely();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    bessely();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  derivative_of_integral = function () {\n    return push(cadr(p1));\n  };\n  /* det =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Returns the determinant of matrix m.\n  Uses Gaussian elimination for numerical matrices.\n  \n  Example:\n  \n    det(((1,2),(3,4)))\n    > -2\n   */\n\n\n  DET_check_arg = function () {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  det = function () {\n    var a, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    save();\n    p1 = pop();\n\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    n = p1.tensor.nelem;\n    a = p1.tensor.elem;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtom(a[i])) {\n        break;\n      }\n    }\n\n    if (i === n) {\n      yydetg();\n    } else {\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n      }\n\n      determinant(p1.tensor.dim[0]);\n    }\n\n    return restore();\n  };\n\n  determinant = function (n) {\n    var a, breakFromOutherWhile, h, i, i1, j, k, o, q, ref, ref1, s, sign_, t;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    q = 0;\n    s = 0;\n    sign_ = 0;\n    t = 0;\n    a = [];\n    h = tos - n * n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      a[i] = i;\n      a[i + n] = 0;\n      a[i + n + n] = 1;\n    }\n\n    sign_ = 1;\n    push(zero);\n\n    while (1) {\n      if (sign_ === 1) {\n        push_integer(1);\n      } else {\n        push_integer(-1);\n      }\n\n      for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        k = n * a[i] + i;\n        push(stack[h + k]);\n        multiply();\n      }\n\n      add();\n      j = n - 1;\n      s = 0;\n      breakFromOutherWhile = false;\n\n      while (1) {\n        q = a[n + j] + a[n + n + j];\n\n        if (q < 0) {\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n\n        if (q === j + 1) {\n          if (j === 0) {\n            breakFromOutherWhile = true;\n            break;\n          }\n\n          s++;\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n\n        break;\n      }\n\n      if (breakFromOutherWhile) {\n        break;\n      }\n\n      t = a[j - a[n + j] + s];\n      a[j - a[n + j] + s] = a[j - q + s];\n      a[j - q + s] = t;\n      a[n + j] = q;\n      sign_ = -sign_;\n    }\n\n    stack[h] = stack[tos - 1];\n    return moveTos(h + 1);\n  };\n\n  detg = function () {\n    save();\n    p1 = pop();\n\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    yydetg();\n    return restore();\n  };\n\n  yydetg = function () {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n\n    for (i = o = 0, ref = n * n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p1.tensor.elem[i]);\n    }\n\n    lu_decomp(n);\n    moveTos(tos - n * n);\n    return push(p1);\n  };\n\n  M = function (h, n, i, j) {\n    return stack[h + n * i + j];\n  };\n\n  setM = function (h, n, i, j, value) {\n    return stack[h + n * i + j] = value;\n  };\n\n  lu_decomp = function (n) {\n    var d, h, i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n    d = 0;\n    h = 0;\n    i = 0;\n    j = 0;\n    h = tos - n * n;\n    p1 = one;\n\n    for (d = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      if (equal(M(h, n, d, d), zero)) {\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(M(h, n, i, d), zero)) {\n            break;\n          }\n        }\n\n        if (i === n) {\n          p1 = zero;\n          break;\n        }\n\n        for (j = j1 = ref3 = d, ref4 = n; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; j = ref3 <= ref4 ? ++j1 : --j1) {\n          p2 = M(h, n, d, j);\n          setM(h, n, d, j, M(h, n, i, j));\n          setM(h, n, i, j, p2);\n        }\n\n        push(p1);\n        negate();\n        p1 = pop();\n      }\n\n      push(p1);\n      push(M(h, n, d, d));\n      multiply();\n      p1 = pop();\n\n      for (i = l1 = ref5 = d + 1, ref6 = n; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n        push(M(h, n, i, d));\n        push(M(h, n, d, d));\n        divide();\n        negate();\n        p2 = pop();\n        setM(h, n, i, d, zero);\n\n        for (j = m1 = ref7 = d + 1, ref8 = n; ref7 <= ref8 ? m1 < ref8 : m1 > ref8; j = ref7 <= ref8 ? ++m1 : --m1) {\n          push(M(h, n, d, j));\n          push(p2);\n          multiply();\n          push(M(h, n, i, j));\n          add();\n          setM(h, n, i, j, pop());\n        }\n      }\n    }\n\n    push(p1);\n    push(M(h, n, n - 1, n - 1));\n    multiply();\n    return p1 = pop();\n  };\n\n  Eval_dirac = function () {\n    push(cadr(p1));\n    Eval();\n    return dirac();\n  };\n\n  dirac = function () {\n    save();\n    ydirac();\n    return restore();\n  };\n\n  ydirac = function () {\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      if (p1.d === 0) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n\n    if (isrational(p1)) {\n      if (MZERO(mmul(p1.q.a, p1.q.b))) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n\n    if (car(p1) === symbol(POWER)) {\n      push_symbol(DIRAC);\n      push(cadr(p1));\n      list(2);\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(DIRAC);\n      push(p1);\n      negate();\n      list(2);\n      return;\n    }\n\n    if (isnegativeterm(p1) || car(p1) === symbol(ADD) && isnegativeterm(cadr(p1))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    push_symbol(DIRAC);\n    push(p1);\n    return list(2);\n  };\n\n  divisors = function () {\n    var h, i, n, o, ref, subsetOfStack;\n    i = 0;\n    h = 0;\n    n = 0;\n    save();\n    h = tos - 1;\n    divisors_onstack();\n    n = tos - h;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  divisors_onstack = function () {\n    var h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    h = tos;\n\n    if (isNumericAtom(p1)) {\n      push(p1);\n      factor_small_number();\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n\n      __factor_add();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      if (isNumericAtom(car(p1))) {\n        push(car(p1));\n        factor_small_number();\n        p1 = cdr(p1);\n      }\n\n      while (iscons(p1)) {\n        p2 = car(p1);\n\n        if (car(p2) === symbol(POWER)) {\n          push(cadr(p2));\n          push(caddr(p2));\n        } else {\n          push(p2);\n          push(one);\n        }\n\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(POWER)) {\n      push(cadr(p1));\n      push(caddr(p1));\n    } else {\n      push(p1);\n      push(one);\n    }\n\n    k = tos;\n    push(one);\n    gen(h, k);\n    n = tos - k;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[h + i] = stack[k + i];\n    }\n\n    moveTos(h + n);\n    return restore();\n  };\n\n  gen = function (h, k) {\n    var expo, i, o, ref;\n    expo = 0;\n    i = 0;\n    save();\n    p1 = pop();\n\n    if (h === k) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    p2 = stack[h + 0];\n    p3 = stack[h + 1];\n    push(p3);\n    expo = pop_integer();\n\n    if (!isNaN(expo)) {\n      for (i = o = 0, ref = Math.abs(expo); 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(p1);\n        push(p2);\n        push_integer(sign(expo) * i);\n        power();\n        multiply();\n        gen(h + 2, k);\n      }\n    }\n\n    return restore();\n  };\n\n  __factor_add = function () {\n    save();\n    p1 = pop();\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n\n    p2 = pop();\n\n    if (isplusone(p2)) {\n      push(p1);\n      push(one);\n      restore();\n      return;\n    }\n\n    if (isNumericAtom(p2)) {\n      push(p2);\n      factor_small_number();\n    } else if (car(p2) === symbol(MULTIPLY)) {\n      p3 = cdr(p2);\n\n      if (isNumericAtom(car(p3))) {\n        push(car(p3));\n        factor_small_number();\n      } else {\n        push(car(p3));\n        push(one);\n      }\n\n      p3 = cdr(p3);\n\n      while (iscons(p3)) {\n        push(car(p3));\n        push(one);\n        p3 = cdr(p3);\n      }\n    } else {\n      push(p2);\n      push(one);\n    }\n\n    push(p2);\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply();\n      add();\n      p3 = cdr(p3);\n    }\n\n    push(one);\n    return restore();\n  };\n\n  dpow = function () {\n    var a, b, base, expo, result, theta;\n    a = 0.0;\n    b = 0.0;\n    base = 0.0;\n    expo = 0.0;\n    result = 0.0;\n    theta = 0.0;\n    expo = pop_double();\n    base = pop_double();\n\n    if (base === 0.0 && expo < 0.0) {\n      stop(\"divide by zero\");\n    }\n\n    if (base >= 0.0 || expo % 1.0 === 0.0) {\n      result = Math.pow(base, expo);\n      push_double(result);\n      return;\n    }\n\n    result = Math.pow(Math.abs(base), expo);\n    theta = Math.PI * expo;\n\n    if (expo % 0.5 === 0.0) {\n      a = 0.0;\n      b = Math.sin(theta);\n    } else {\n      a = Math.cos(theta);\n      b = Math.sin(theta);\n    }\n\n    push_double(a * result);\n    push_double(b * result);\n    push(imaginaryunit);\n    multiply();\n    return add();\n  };\n  /* eigen =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvalues and eigenvectors. Matrix m must be both numerical and symmetric.\n  The eigenval function returns a matrix with the eigenvalues along the diagonal.\n  The eigenvec function returns a matrix with the eigenvectors arranged as row vectors.\n  The eigen function does not return anything but stores the eigenvalue matrix in D\n  and the eigenvector matrix in Q.\n  \n  Input:    stack[tos - 1]    symmetric matrix\n  \n  Output:    D      diagnonal matrix\n        Q      eigenvector matrix\n  \n  D and Q have the property that\n  \n    A == dot(transpose(Q),D,Q)\n  \n  where A is the original matrix.\n  \n  The eigenvalues are on the diagonal of D.\n  The eigenvectors are row vectors in Q.\n  \n  The eigenvalue relation:\n  \n    A X = lambda X\n  \n  can be checked as follows:\n  \n    lambda = D[1,1]\n    X = Q[1]\n    dot(A,X) - lambda X\n  \n  Example 1. Check the relation AX = lambda X where lambda is an eigenvalue and X is the associated eigenvector.\n  \n  Enter:\n  \n       A = hilbert(3)\n  \n       eigen(A)\n  \n       lambda = D[1,1]\n  \n       X = Q[1]\n  \n       dot(A,X) - lambda X\n  \n  Result:\n  \n       -1.16435e-14\n   \n       -6.46705e-15\n   \n       -4.55191e-15\n  \n  Example 2: Check the relation A = QTDQ.\n  \n  Enter:\n  \n    A - dot(transpose(Q),D,Q)\n  \n  Result: \n  \n    6.27365e-12    -1.58236e-11   1.81902e-11\n   \n    -1.58236e-11   -1.95365e-11   2.56514e-12\n   \n    1.81902e-11    2.56514e-12    1.32627e-11\n   */\n\n\n  EIG_N = 0;\n  EIG_yydd = [];\n  EIG_yyqq = [];\n\n  Eval_eigen = function () {\n    if (EIG_check_arg() === 0) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n\n    eigen(EIGEN);\n    p1 = usr_symbol(\"D\");\n    set_binding(p1, p2);\n    p1 = usr_symbol(\"Q\");\n    set_binding(p1, p3);\n    return push(symbol(NIL));\n  };\n  /* eigenval =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvalues of m. See \"eigen\" for more info.\n   */\n\n\n  Eval_eigenval = function () {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVAL);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    eigen(EIGENVAL);\n    return push(p2);\n  };\n  /* eigenvec =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvectors of m. See \"eigen\" for more info.\n   */\n\n\n  Eval_eigenvec = function () {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVEC);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    eigen(EIGENVEC);\n    return push(p3);\n  };\n\n  EIG_check_arg = function () {\n    var i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      return 0;\n    }\n\n    if (p1.tensor.ndim !== 2 || p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n\n    EIG_N = p1.tensor.dim[0];\n\n    for (i = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (!isdouble(p1.tensor.elem[EIG_N * i + j])) {\n          stop(\"eigen: matrix is not numerical\");\n        }\n      }\n    }\n\n    for (i = j1 = 0, ref2 = EIG_N - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        if (Math.abs(p1.tensor.elem[EIG_N * i + j].d - p1.tensor.elem[EIG_N * j + i].d) > 1e-10) {\n          stop(\"eigen: matrix is not symmetrical\");\n        }\n      }\n    }\n\n    return 1;\n  };\n\n  eigen = function (op) {\n    var i, i1, j, j1, l1, m1, n1, o, o1, q1, r1, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s1;\n    i = 0;\n    j = 0;\n\n    for (i = o = 0, ref = EIG_N * EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      EIG_yydd[i] = 0.0;\n    }\n\n    for (i = i1 = 0, ref1 = EIG_N * EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      EIG_yyqq[i] = 0.0;\n    }\n\n    for (i = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      EIG_yydd[EIG_N * i + i] = p1.tensor.elem[EIG_N * i + i].d;\n\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        EIG_yydd[EIG_N * i + j] = p1.tensor.elem[EIG_N * i + j].d;\n        EIG_yydd[EIG_N * j + i] = p1.tensor.elem[EIG_N * i + j].d;\n      }\n    }\n\n    for (i = m1 = 0, ref5 = EIG_N; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      EIG_yyqq[EIG_N * i + i] = 1.0;\n\n      for (j = n1 = ref6 = i + 1, ref7 = EIG_N; ref6 <= ref7 ? n1 < ref7 : n1 > ref7; j = ref6 <= ref7 ? ++n1 : --n1) {\n        EIG_yyqq[EIG_N * i + j] = 0.0;\n        EIG_yyqq[EIG_N * j + i] = 0.0;\n      }\n    }\n\n    for (i = o1 = 0; o1 < 100; i = ++o1) {\n      if (step() === 0) {\n        break;\n      }\n    }\n\n    if (i === 100) {\n      printstr(\"\\nnote: eigen did not converge\\n\");\n    }\n\n    if (op === EIGEN || op === EIGENVAL) {\n      push(p1);\n      copy_tensor();\n      p2 = pop();\n\n      for (i = q1 = 0, ref8 = EIG_N; 0 <= ref8 ? q1 < ref8 : q1 > ref8; i = 0 <= ref8 ? ++q1 : --q1) {\n        for (j = r1 = 0, ref9 = EIG_N; 0 <= ref9 ? r1 < ref9 : r1 > ref9; j = 0 <= ref9 ? ++r1 : --r1) {\n          push_double(EIG_yydd[EIG_N * i + j]);\n          p2.tensor.elem[EIG_N * i + j] = pop();\n        }\n      }\n    }\n\n    if (op === EIGEN || op === EIGENVEC) {\n      push(p1);\n      copy_tensor();\n      p3 = pop();\n      results = [];\n\n      for (i = s1 = 0, ref10 = EIG_N; 0 <= ref10 ? s1 < ref10 : s1 > ref10; i = 0 <= ref10 ? ++s1 : --s1) {\n        results.push(function () {\n          var ref11, results1, t1;\n          results1 = [];\n\n          for (j = t1 = 0, ref11 = EIG_N; 0 <= ref11 ? t1 < ref11 : t1 > ref11; j = 0 <= ref11 ? ++t1 : --t1) {\n            push_double(EIG_yyqq[EIG_N * i + j]);\n            results1.push(p3.tensor.elem[EIG_N * i + j] = pop());\n          }\n\n          return results1;\n        }());\n      }\n\n      return results;\n    }\n  };\n\n  step = function () {\n    var count, i, i1, j, o, ref, ref1, ref2;\n    i = 0;\n    j = 0;\n    count = 0;\n\n    for (i = o = 0, ref = EIG_N - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = ref1 = i + 1, ref2 = EIG_N; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (EIG_yydd[EIG_N * i + j] !== 0.0) {\n          step2(i, j);\n          count++;\n        }\n      }\n    }\n\n    return count;\n  };\n\n  step2 = function (p, q) {\n    var c, cc, i1, j1, k, o, ref, ref1, ref2, s, ss, t, theta;\n    k = 0;\n    t = 0.0;\n    theta = 0.0;\n    c = 0.0;\n    cc = 0.0;\n    s = 0.0;\n    ss = 0.0;\n    theta = 0.5 * (EIG_yydd[EIG_N * p + p] - EIG_yydd[EIG_N * q + q]) / EIG_yydd[EIG_N * p + q];\n    t = 1.0 / (Math.abs(theta) + Math.sqrt(theta * theta + 1.0));\n\n    if (theta < 0.0) {\n      t = -t;\n    }\n\n    c = 1.0 / Math.sqrt(t * t + 1.0);\n    s = t * c;\n\n    for (k = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; k = 0 <= ref ? ++o : --o) {\n      cc = EIG_yydd[EIG_N * p + k];\n      ss = EIG_yydd[EIG_N * q + k];\n      EIG_yydd[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yydd[EIG_N * q + k] = c * ss - s * cc;\n    }\n\n    for (k = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      cc = EIG_yydd[EIG_N * k + p];\n      ss = EIG_yydd[EIG_N * k + q];\n      EIG_yydd[EIG_N * k + p] = c * cc + s * ss;\n      EIG_yydd[EIG_N * k + q] = c * ss - s * cc;\n    }\n\n    for (k = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      cc = EIG_yyqq[EIG_N * p + k];\n      ss = EIG_yyqq[EIG_N * q + k];\n      EIG_yyqq[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yyqq[EIG_N * q + k] = c * ss - s * cc;\n    }\n\n    EIG_yydd[EIG_N * p + q] = 0.0;\n    return EIG_yydd[EIG_N * q + p] = 0.0;\n  };\n  /* erf =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Authors\n  -------\n  philippe.billet@noos.fr\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Error function erf(x).\n  erf(-x)=erf(x)\n   */\n\n\n  Eval_erf = function () {\n    push(cadr(p1));\n    Eval();\n    return yerf();\n  };\n\n  yerf = function () {\n    save();\n    yyerf();\n    return restore();\n  };\n\n  yyerf = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      d = 1.0 - erfc(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(ERF);\n      push(p1);\n      negate();\n      list(2);\n      negate();\n      return;\n    }\n\n    push_symbol(ERF);\n    push(p1);\n    list(2);\n  };\n\n  Eval_erfc = function () {\n    push(cadr(p1));\n    Eval();\n    return yerfc();\n  };\n\n  yerfc = function () {\n    save();\n    yyerfc();\n    return restore();\n  };\n\n  yyerfc = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      d = erfc(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n\n    push_symbol(ERFC);\n    push(p1);\n    list(2);\n  };\n\n  erfc = function (x) {\n    var ans, t, z;\n\n    if (x === 0) {\n      return 1.0;\n    }\n\n    t = 0.0;\n    z = 0.0;\n    ans = 0.0;\n    z = Math.abs(x);\n    t = 1.0 / (1.0 + 0.5 * z);\n    ans = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n\n    if (x >= 0.0) {\n      return ans;\n    } else {\n      return 2.0 - ans;\n    }\n  };\n\n  Eval = function () {\n    var willEvaluateAsFloats;\n    check_esc_flag();\n    save();\n    p1 = pop();\n\n    if (p1 == null) {\n      debugger;\n    }\n\n    if (!evaluatingAsFloats && isfloating(p1)) {\n      willEvaluateAsFloats = true;\n      evaluatingAsFloats++;\n    }\n\n    switch (p1.k) {\n      case CONS:\n        Eval_cons();\n        break;\n\n      case NUM:\n        if (evaluatingAsFloats) {\n          push_double(convert_rational_to_double(p1));\n        } else {\n          push(p1);\n        }\n\n        break;\n\n      case DOUBLE:\n      case STR:\n        push(p1);\n        break;\n\n      case TENSOR:\n        Eval_tensor();\n        break;\n\n      case SYM:\n        Eval_sym();\n        break;\n\n      default:\n        stop(\"atom?\");\n    }\n\n    if (willEvaluateAsFloats) {\n      evaluatingAsFloats--;\n    }\n\n    return restore();\n  };\n\n  Eval_sym = function () {\n    var cycleString, i, o, positionIfSymbolAlreadyBeingEvaluated, ref, ref1;\n\n    if (iskeyword(p1)) {\n      push(p1);\n      push(symbol(LAST));\n      list(2);\n      Eval();\n      return;\n    } else if (p1 === symbol(PI) && evaluatingAsFloats) {\n      push_double(Math.PI);\n      return;\n    }\n\n    p2 = get_binding(p1);\n\n    if (DEBUG) {\n      console.log(\"looked up: \" + p1 + \" which contains: \" + p2);\n    }\n\n    push(p2);\n\n    if (p1 !== p2) {\n      positionIfSymbolAlreadyBeingEvaluated = chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1);\n\n      if (positionIfSymbolAlreadyBeingEvaluated !== -1) {\n        cycleString = \"\";\n\n        for (i = o = ref = positionIfSymbolAlreadyBeingEvaluated, ref1 = chainOfUserSymbolsNotFunctionsBeingEvaluated.length; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n          cycleString += chainOfUserSymbolsNotFunctionsBeingEvaluated[i].printname + \" -> \";\n        }\n\n        cycleString += p1.printname;\n        stop(\"recursive evaluation of symbols: \" + cycleString);\n        return;\n      }\n\n      chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1);\n      Eval();\n      return chainOfUserSymbolsNotFunctionsBeingEvaluated.pop();\n    }\n  };\n\n  Eval_cons = function () {\n    var cons_head;\n    cons_head = car(p1);\n\n    if (car(cons_head) === symbol(EVAL)) {\n      Eval_user_function();\n      return;\n    }\n\n    if (!issymbol(cons_head)) {\n      stop(\"cons?\");\n    }\n\n    switch (symnum(cons_head)) {\n      case ABS:\n        return Eval_abs();\n\n      case ADD:\n        return Eval_add();\n\n      case ADJ:\n        return Eval_adj();\n\n      case AND:\n        return Eval_and();\n\n      case ARCCOS:\n        return Eval_arccos();\n\n      case ARCCOSH:\n        return Eval_arccosh();\n\n      case ARCSIN:\n        return Eval_arcsin();\n\n      case ARCSINH:\n        return Eval_arcsinh();\n\n      case ARCTAN:\n        return Eval_arctan();\n\n      case ARCTANH:\n        return Eval_arctanh();\n\n      case ARG:\n        return Eval_arg();\n\n      case ATOMIZE:\n        return Eval_atomize();\n\n      case BESSELJ:\n        return Eval_besselj();\n\n      case BESSELY:\n        return Eval_bessely();\n\n      case BINDING:\n        return Eval_binding();\n\n      case BINOMIAL:\n        return Eval_binomial();\n\n      case CEILING:\n        return Eval_ceiling();\n\n      case CHECK:\n        return Eval_check();\n\n      case CHOOSE:\n        return Eval_choose();\n\n      case CIRCEXP:\n        return Eval_circexp();\n\n      case CLEAR:\n        return Eval_clear();\n\n      case CLEARALL:\n        return Eval_clearall();\n\n      case CLEARPATTERNS:\n        return Eval_clearpatterns();\n\n      case CLOCK:\n        return Eval_clock();\n\n      case COEFF:\n        return Eval_coeff();\n\n      case COFACTOR:\n        return Eval_cofactor();\n\n      case CONDENSE:\n        return Eval_condense();\n\n      case CONJ:\n        return Eval_conj();\n\n      case CONTRACT:\n        return Eval_contract();\n\n      case COS:\n        return Eval_cos();\n\n      case COSH:\n        return Eval_cosh();\n\n      case DECOMP:\n        return Eval_decomp();\n\n      case DEGREE:\n        return Eval_degree();\n\n      case DEFINT:\n        return Eval_defint();\n\n      case DENOMINATOR:\n        return Eval_denominator();\n\n      case DERIVATIVE:\n        return Eval_derivative();\n\n      case DET:\n        return Eval_det();\n\n      case DIM:\n        return Eval_dim();\n\n      case DIRAC:\n        return Eval_dirac();\n\n      case DIVISORS:\n        return Eval_divisors();\n\n      case DO:\n        return Eval_do();\n\n      case DOT:\n        return Eval_inner();\n\n      case DRAW:\n        return Eval_draw();\n\n      case DSOLVE:\n        return Eval_dsolve();\n\n      case EIGEN:\n        return Eval_eigen();\n\n      case EIGENVAL:\n        return Eval_eigenval();\n\n      case EIGENVEC:\n        return Eval_eigenvec();\n\n      case ERF:\n        return Eval_erf();\n\n      case ERFC:\n        return Eval_erfc();\n\n      case EVAL:\n        return Eval_Eval();\n\n      case EXP:\n        return Eval_exp();\n\n      case EXPAND:\n        return Eval_expand();\n\n      case EXPCOS:\n        return Eval_expcos();\n\n      case EXPSIN:\n        return Eval_expsin();\n\n      case FACTOR:\n        return Eval_factor();\n\n      case FACTORIAL:\n        return Eval_factorial();\n\n      case FACTORPOLY:\n        return Eval_factorpoly();\n\n      case FILTER:\n        return Eval_filter();\n\n      case FLOATF:\n        return Eval_float();\n\n      case APPROXRATIO:\n        return Eval_approxratio();\n\n      case FLOOR:\n        return Eval_floor();\n\n      case FOR:\n        return Eval_for();\n\n      case FUNCTION:\n        return Eval_function_reference();\n\n      case GAMMA:\n        return Eval_gamma();\n\n      case GCD:\n        return Eval_gcd();\n\n      case HERMITE:\n        return Eval_hermite();\n\n      case HILBERT:\n        return Eval_hilbert();\n\n      case IMAG:\n        return Eval_imag();\n\n      case INDEX:\n        return Eval_index();\n\n      case INNER:\n        return Eval_inner();\n\n      case INTEGRAL:\n        return Eval_integral();\n\n      case INV:\n        return Eval_inv();\n\n      case INVG:\n        return Eval_invg();\n\n      case ISINTEGER:\n        return Eval_isinteger();\n\n      case ISPRIME:\n        return Eval_isprime();\n\n      case LAGUERRE:\n        return Eval_laguerre();\n\n      case LCM:\n        return Eval_lcm();\n\n      case LEADING:\n        return Eval_leading();\n\n      case LEGENDRE:\n        return Eval_legendre();\n\n      case LOG:\n        return Eval_log();\n\n      case LOOKUP:\n        return Eval_lookup();\n\n      case MOD:\n        return Eval_mod();\n\n      case MULTIPLY:\n        return Eval_multiply();\n\n      case NOT:\n        return Eval_not();\n\n      case NROOTS:\n        return Eval_nroots();\n\n      case NUMBER:\n        return Eval_number();\n\n      case NUMERATOR:\n        return Eval_numerator();\n\n      case OPERATOR:\n        return Eval_operator();\n\n      case OR:\n        return Eval_or();\n\n      case OUTER:\n        return Eval_outer();\n\n      case PATTERN:\n        return Eval_pattern();\n\n      case PATTERNSINFO:\n        return Eval_patternsinfo();\n\n      case POLAR:\n        return Eval_polar();\n\n      case POWER:\n        return Eval_power();\n\n      case PRIME:\n        return Eval_prime();\n\n      case PRINT:\n        return Eval_print();\n\n      case PRINT2DASCII:\n        return Eval_print2dascii();\n\n      case PRINTFULL:\n        return Eval_printcomputer();\n\n      case PRINTLATEX:\n        return Eval_printlatex();\n\n      case PRINTLIST:\n        return Eval_printlist();\n\n      case PRINTPLAIN:\n        return Eval_printhuman();\n\n      case PRODUCT:\n        return Eval_product();\n\n      case QUOTE:\n        return Eval_quote();\n\n      case QUOTIENT:\n        return Eval_quotient();\n\n      case RANK:\n        return Eval_rank();\n\n      case RATIONALIZE:\n        return Eval_rationalize();\n\n      case REAL:\n        return Eval_real();\n\n      case ROUND:\n        return Eval_round();\n\n      case YYRECT:\n        return Eval_rect();\n\n      case ROOTS:\n        return Eval_roots();\n\n      case SETQ:\n        return Eval_setq();\n\n      case SGN:\n        return Eval_sgn();\n\n      case SILENTPATTERN:\n        return Eval_silentpattern();\n\n      case SIMPLIFY:\n        return Eval_simplify();\n\n      case SIN:\n        return Eval_sin();\n\n      case SINH:\n        return Eval_sinh();\n\n      case SHAPE:\n        return Eval_shape();\n\n      case SQRT:\n        return Eval_sqrt();\n\n      case STOP:\n        return Eval_stop();\n\n      case SUBST:\n        return Eval_subst();\n\n      case SUM:\n        return Eval_sum();\n\n      case SYMBOLSINFO:\n        return Eval_symbolsinfo();\n\n      case TAN:\n        return Eval_tan();\n\n      case TANH:\n        return Eval_tanh();\n\n      case TAYLOR:\n        return Eval_taylor();\n\n      case TEST:\n        return Eval_test();\n\n      case TESTEQ:\n        return Eval_testeq();\n\n      case TESTGE:\n        return Eval_testge();\n\n      case TESTGT:\n        return Eval_testgt();\n\n      case TESTLE:\n        return Eval_testle();\n\n      case TESTLT:\n        return Eval_testlt();\n\n      case TRANSPOSE:\n        return Eval_transpose();\n\n      case UNIT:\n        return Eval_unit();\n\n      case ZERO:\n        return Eval_zero();\n\n      default:\n        return Eval_user_function();\n    }\n  };\n\n  Eval_binding = function () {\n    return push(get_binding(cadr(p1)));\n  };\n  /* check =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p\n  \n  General description\n  -------------------\n  Returns whether the predicate p is true/false or unknown:\n  0 if false, 1 if true or remains unevaluated if unknown.\n  Note that if \"check\" is passed an assignment, it turns it into a test,\n  i.e. check(a = b) is turned into check(a==b) \n  so \"a\" is not assigned anything.\n  Like in many programming languages, \"check\" also gives truthyness/falsyness\n  for numeric values. In which case, \"true\" is returned for non-zero values.\n  Potential improvements: \"check\" can't evaluate strings yet.\n   */\n\n\n  Eval_check = function () {\n    var checkResult;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n\n    if (checkResult == null) {\n      return push(p1);\n    } else {\n      return push_integer(checkResult);\n    }\n  };\n\n  Eval_det = function () {\n    push(cadr(p1));\n    Eval();\n    return det();\n  };\n  /* dim =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m,n\n  \n  General description\n  -------------------\n  Returns the cardinality of the nth index of tensor \"m\".\n   */\n\n\n  Eval_dim = function () {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n\n    if (iscons(cddr(p1))) {\n      push(caddr(p1));\n      Eval();\n      n = pop_integer();\n    } else {\n      n = 1;\n    }\n\n    if (!istensor(p2)) {\n      return push_integer(1);\n    } else if (n < 1 || n > p2.tensor.ndim) {\n      return push(p1);\n    } else {\n      return push_integer(p2.tensor.dim[n - 1]);\n    }\n  };\n\n  Eval_divisors = function () {\n    push(cadr(p1));\n    Eval();\n    return divisors();\n  };\n  /* do =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  Evaluates each argument from left to right. Returns the result of the last argument.\n   */\n\n\n  Eval_do = function () {\n    var results;\n    push(car(p1));\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      pop();\n      push(car(p1));\n      Eval();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  Eval_dsolve = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    return dsolve();\n  };\n\n  Eval_Eval = function () {\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      push(cadr(p1));\n      Eval();\n      subst();\n      p1 = cddr(p1);\n    }\n\n    return Eval();\n  };\n\n  Eval_exp = function () {\n    push(cadr(p1));\n    Eval();\n    return exponential();\n  };\n\n  Eval_factorial = function () {\n    push(cadr(p1));\n    Eval();\n    return factorial();\n  };\n\n  Eval_factorpoly = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    factorpoly();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factorpoly();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  Eval_hermite = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return hermite();\n  };\n\n  Eval_hilbert = function () {\n    push(cadr(p1));\n    Eval();\n    return hilbert();\n  };\n\n  Eval_index = function () {\n    var h, orig, theTensor;\n    h = tos;\n    orig = p1;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    theTensor = stack[tos - 1];\n\n    if (isNumericAtom(theTensor)) {\n      stop(\"trying to access a scalar as a tensor\");\n    }\n\n    if (!istensor(theTensor)) {\n      moveTos(h);\n      push(orig);\n      return;\n    }\n\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n\n      if (!isintegerorintegerfloat(stack[tos - 1])) {\n        moveTos(h);\n        push(orig);\n        return;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    return index_function(tos - h);\n  };\n\n  Eval_inv = function () {\n    push(cadr(p1));\n    Eval();\n    return inv();\n  };\n\n  Eval_invg = function () {\n    push(cadr(p1));\n    Eval();\n    return invg();\n  };\n\n  Eval_isinteger = function () {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (isrational(p1)) {\n      if (isinteger(p1)) {\n        push(one);\n      } else {\n        push(zero);\n      }\n\n      return;\n    }\n\n    if (isdouble(p1)) {\n      n = Math.floor(p1.d);\n\n      if (n === p1.d) {\n        push(one);\n      } else {\n        push(zero);\n      }\n\n      return;\n    }\n\n    push_symbol(ISINTEGER);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_number = function () {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1.k === NUM || p1.k === DOUBLE) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_operator = function () {\n    var h;\n    h = tos;\n    push_symbol(OPERATOR);\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p1 = cdr(p1);\n    }\n\n    return list(tos - h);\n  };\n\n  Eval_quote = function () {\n    return push(cadr(p1));\n  };\n\n  Eval_rank = function () {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      return push_integer(p1.tensor.ndim);\n    } else {\n      return push(zero);\n    }\n  };\n\n  Eval_setq = function () {\n    if (caadr(p1) === symbol(INDEX)) {\n      setq_indexed();\n      return;\n    }\n\n    if (iscons(cadr(p1))) {\n      define_user_function();\n      return;\n    }\n\n    if (!issymbol(cadr(p1))) {\n      stop(\"symbol assignment: error in symbol\");\n    }\n\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    set_binding(cadr(p1), p2);\n    return push(symbol(NIL));\n  };\n\n  setq_indexed = function () {\n    var h;\n    p4 = cadadr(p1);\n    console.log(\"p4: \" + p4);\n\n    if (!issymbol(p4)) {\n      stop(\"indexed assignment: expected a symbol name\");\n    }\n\n    h = tos;\n    push(caddr(p1));\n    Eval();\n    p2 = cdadr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      p2 = cdr(p2);\n    }\n\n    set_component(tos - h);\n    p3 = pop();\n    set_binding(p4, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_sqrt = function () {\n    push(cadr(p1));\n    Eval();\n    push_rational(1, 2);\n    return power();\n  };\n\n  Eval_stop = function () {\n    return stop(\"user stop\");\n  };\n\n  Eval_subst = function () {\n    push(cadddr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadr(p1));\n    Eval();\n    subst();\n    return Eval();\n  };\n\n  Eval_unit = function () {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      push(p1);\n      return;\n    }\n\n    if (n < 1) {\n      push(p1);\n      return;\n    }\n\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[n * i + i] = one;\n    }\n\n    check_tensor_dimensions(p1);\n    return push(p1);\n  };\n\n  Eval_noexpand = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  Eval_predicate = function () {\n    save();\n    p1 = top();\n\n    if (car(p1) === symbol(SETQ)) {\n      pop();\n      push_symbol(TESTEQ);\n      push(cadr(p1));\n      push(caddr(p1));\n      list(3);\n    }\n\n    Eval();\n    return restore();\n  };\n\n  Eval_expand = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    return expand();\n  };\n\n  expand = function () {\n    var prev_expanding;\n    save();\n    p9 = pop();\n    p5 = pop();\n\n    if (istensor(p5)) {\n      expand_tensor();\n      restore();\n      return;\n    }\n\n    if (car(p5) === symbol(ADD)) {\n      push_integer(0);\n      p1 = cdr(p5);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p9);\n        expand();\n        add();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    }\n\n    push(p5);\n    numerator();\n    p3 = pop();\n    push(p5);\n    denominator();\n    p2 = pop();\n    remove_negative_exponents();\n    push(p3);\n    push(p2);\n    push(p9);\n\n    if (isone(p3) || isone(p2)) {\n      if (!ispolyexpandedform(p2, p9) || isone(p2)) {\n        pop();\n        pop();\n        pop();\n        push(p5);\n        restore();\n        return;\n      }\n    }\n\n    divpoly();\n    p7 = pop();\n    push(p3);\n    push(p2);\n    push(p7);\n    multiply();\n    subtract();\n    p3 = pop();\n\n    if (isZeroAtomOrTensor(p3)) {\n      push(p7);\n      restore();\n      return;\n    }\n\n    push(p2);\n    push(p9);\n    factorpoly();\n    p2 = pop();\n    expand_get_C();\n    expand_get_B();\n    expand_get_A();\n\n    if (istensor(p4)) {\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      inv();\n      expanding = prev_expanding;\n      push(p3);\n      inner();\n      push(p2);\n      inner();\n    } else {\n      push(p3);\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p2);\n      multiply();\n    }\n\n    push(p7);\n    add();\n    return restore();\n  };\n\n  expand_tensor = function () {\n    var i, o, ref;\n    i = 0;\n    push(p5);\n    copy_tensor();\n    p5 = pop();\n\n    for (i = o = 0, ref = p5.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p5.tensor.elem[i]);\n      push(p9);\n      expand();\n      p5.tensor.elem[i] = pop();\n    }\n\n    return push(p5);\n  };\n\n  remove_negative_exponents = function () {\n    var h, i, j, k, n, o, ref;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    n = 0;\n    h = tos;\n    factors(p2);\n    factors(p3);\n    n = tos - h;\n    j = 0;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1 = stack[h + i];\n\n      if (car(p1) !== symbol(POWER)) {\n        continue;\n      }\n\n      if (cadr(p1) !== p9) {\n        continue;\n      }\n\n      push(caddr(p1));\n      k = pop_integer();\n\n      if (isNaN(k)) {\n        continue;\n      }\n\n      if (k < j) {\n        j = k;\n      }\n    }\n\n    moveTos(h);\n\n    if (j === 0) {\n      return;\n    }\n\n    push(p2);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    p2 = pop();\n    push(p3);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    return p3 = pop();\n  };\n\n  expand_get_C = function () {\n    var a, h, i, i1, j, n, o, prev_expanding, ref, ref1;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    h = tos;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p1 = cdr(p2);\n\n      while (iscons(p1)) {\n        p5 = car(p1);\n        expand_get_CF();\n        p1 = cdr(p1);\n      }\n    } else {\n      p5 = p2;\n      expand_get_CF();\n    }\n\n    n = tos - h;\n\n    if (n === 1) {\n      p4 = pop();\n      return;\n    }\n\n    p4 = alloc_tensor(n * n);\n    p4.tensor.ndim = 2;\n    p4.tensor.dim[0] = n;\n    p4.tensor.dim[1] = n;\n    a = h;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(stack[a + j]);\n        push(p9);\n        push_integer(i);\n        power();\n        prev_expanding = expanding;\n        expanding = 1;\n        divide();\n        expanding = prev_expanding;\n        push(p9);\n        filter();\n        p4.tensor.elem[n * i + j] = pop();\n      }\n    }\n\n    return moveTos(tos - n);\n  };\n\n  expand_get_CF = function () {\n    var d, i, j, n, o, prev_expanding, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n\n    if (!Find(p5, p9)) {\n      return;\n    }\n\n    prev_expanding = expanding;\n    expanding = 1;\n    trivial_divide();\n    expanding = prev_expanding;\n\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p6 = cadr(p5);\n    } else {\n      n = 1;\n      p6 = p5;\n    }\n\n    push(p6);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      results.push(function () {\n        var i1, ref1, results1;\n        results1 = [];\n\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p8);\n          push(p6);\n          push_integer(i);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          expanding = prev_expanding;\n          push(p9);\n          push_integer(j);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          results1.push(expanding = prev_expanding);\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  };\n\n  trivial_divide = function () {\n    var h;\n    h = 0;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      h = tos;\n      p0 = cdr(p2);\n\n      while (iscons(p0)) {\n        if (!equal(car(p0), p5)) {\n          push(car(p0));\n          Eval();\n        }\n\n        p0 = cdr(p0);\n      }\n\n      multiply_all(tos - h);\n    } else {\n      push_integer(1);\n    }\n\n    return p8 = pop();\n  };\n\n  expand_get_B = function () {\n    var i, n, o, prev_expanding, ref;\n    i = 0;\n    n = 0;\n\n    if (!istensor(p4)) {\n      return;\n    }\n\n    n = p4.tensor.dim[0];\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p3);\n      push(p9);\n      push_integer(i);\n      power();\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p9);\n      filter();\n      p8.tensor.elem[i] = pop();\n    }\n\n    return p3 = p8;\n  };\n\n  expand_get_A = function () {\n    var h, i, n, o, ref;\n    h = 0;\n    i = 0;\n    n = 0;\n\n    if (!istensor(p4)) {\n      push(p2);\n      reciprocate();\n      p2 = pop();\n      return;\n    }\n\n    h = tos;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p8 = cdr(p2);\n\n      while (iscons(p8)) {\n        p5 = car(p8);\n        expand_get_AF();\n        p8 = cdr(p8);\n      }\n    } else {\n      p5 = p2;\n      expand_get_AF();\n    }\n\n    n = tos - h;\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p8.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    return p2 = p8;\n  };\n\n  expand_get_AF = function () {\n    var d, i, j, n, o, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 1;\n\n    if (!Find(p5, p9)) {\n      return;\n    }\n\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p5 = cadr(p5);\n    }\n\n    push(p5);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n\n    for (i = o = ref = n; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      results.push(function () {\n        var i1, ref1, results1;\n        results1 = [];\n\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p5);\n          push_integer(i);\n          power();\n          reciprocate();\n          push(p9);\n          push_integer(j);\n          power();\n          results1.push(multiply());\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  };\n\n  Eval_expcos = function () {\n    push(cadr(p1));\n    Eval();\n    return expcos();\n  };\n\n  expcos = function () {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    add();\n    return restore();\n  };\n\n  Eval_expsin = function () {\n    push(cadr(p1));\n    Eval();\n    return expsin();\n  };\n\n  expsin = function () {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    subtract();\n    return restore();\n  };\n\n  Eval_factor = function () {\n    var results;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    factor();\n    p1 = cdddr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factor_again();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  factor_again = function () {\n    var h, n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        factor_term();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      factor_term();\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      multiply_all_noexpand(n);\n    }\n\n    return restore();\n  };\n\n  factor_term = function () {\n    save();\n    factorpoly();\n    p1 = pop();\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  factor = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isinteger(p1)) {\n      push(p1);\n      factor_number();\n    } else {\n      push(p1);\n      push(p2);\n      factorpoly();\n    }\n\n    return restore();\n  };\n\n  factor_small_number = function () {\n    var d, expo, i, n, o, ref;\n    i = 0;\n    save();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      stop(\"number too big to factor\");\n    }\n\n    if (n < 0) {\n      n = -n;\n    }\n\n    for (i = o = 0, ref = MAXPRIMETAB; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      d = primetab[i];\n\n      if (d > n / d) {\n        break;\n      }\n\n      expo = 0;\n\n      while (n % d === 0) {\n        n /= d;\n        expo++;\n      }\n\n      if (expo) {\n        push_integer(d);\n        push_integer(expo);\n      }\n    }\n\n    if (n > 1) {\n      push_integer(n);\n      push_integer(1);\n    }\n\n    return restore();\n  };\n\n  factorial = function () {\n    var n;\n    n = 0;\n    save();\n    p1 = pop();\n    push(p1);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(FACTORIAL);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    bignum_factorial(n);\n    return restore();\n  };\n\n  simplifyfactorials = function () {\n    var x;\n    x = 0;\n    save();\n    x = expanding;\n    expanding = 0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      push(zero);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        simplifyfactorials();\n        add();\n        p1 = cdr(p1);\n      }\n\n      expanding = x;\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      sfac_product();\n      expanding = x;\n      restore();\n      return;\n    }\n\n    push(p1);\n    expanding = x;\n    return restore();\n  };\n\n  sfac_product = function () {\n    var i, i1, j, j1, n, o, ref, ref1, ref2, ref3, s;\n    i = 0;\n    j = 0;\n    n = 0;\n    s = tos;\n    p1 = cdr(p1);\n    n = 0;\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      n++;\n    }\n\n    for (i = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n\n      for (j = i1 = ref1 = i + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (stack[s + j] === symbol(NIL)) {\n          continue;\n        }\n\n        sfac_product_f(s, i, j);\n      }\n    }\n\n    push(one);\n\n    for (i = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n\n      push(stack[s + i]);\n      multiply();\n    }\n\n    p1 = pop();\n    moveTos(tos - n);\n    return push(p1);\n  };\n\n  sfac_product_f = function (s, a, b) {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    p1 = stack[s + a];\n    p2 = stack[s + b];\n\n    if (ispower(p1)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n\n    if (ispower(p2)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n\n    if (isfactorial(p1) && isfactorial(p2)) {\n      push(p3);\n      push(p4);\n      add();\n      yyexpand();\n      n = pop_integer();\n\n      if (n !== 0) {\n        return;\n      }\n\n      push(cadr(p1));\n      push(cadr(p2));\n      subtract();\n      yyexpand();\n      n = pop_integer();\n\n      if (n === 0 || isNaN(n)) {\n        return;\n      }\n\n      if (n < 0) {\n        n = -n;\n        p5 = p1;\n        p1 = p2;\n        p2 = p5;\n        p5 = p3;\n        p3 = p4;\n        p4 = p5;\n      }\n\n      push(one);\n\n      for (i = o = 1, ref = n; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        push(cadr(p2));\n        push_integer(i);\n        add();\n        push(p3);\n        power();\n        multiply();\n      }\n\n      stack[s + a] = pop();\n      return stack[s + b] = symbol(NIL);\n    }\n  };\n\n  polycoeff = 0;\n  factpoly_expo = 0;\n\n  factorpoly = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (!Find(p1, p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (!ispolyexpandedform(p1, p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (!issymbol(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push(p2);\n    yyfactorpoly();\n    return restore();\n  };\n\n  yyfactorpoly = function () {\n    var checkingTheDivision, dividend, foundComplexRoot, foundRealRoot, h, i, i1, j1, l1, o, prev_expanding, previousFactorisation, ref, ref1, ref2, ref3, remainingPoly, whichRootsAreWeFinding;\n    h = 0;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n\n    if (isfloating(p1)) {\n      stop(\"floating point numbers in polynomial\");\n    }\n\n    polycoeff = tos;\n    push(p1);\n    push(p2);\n    factpoly_expo = coeff() - 1;\n    rationalize_coefficients(h);\n    whichRootsAreWeFinding = \"real\";\n    remainingPoly = null;\n\n    while (factpoly_expo > 0) {\n      if (isZeroAtomOrTensor(stack[polycoeff + 0])) {\n        push_integer(1);\n        p4 = pop();\n        push_integer(0);\n        p5 = pop();\n      } else {\n        if (whichRootsAreWeFinding === \"real\") {\n          foundRealRoot = get_factor_from_real_root();\n        } else if (whichRootsAreWeFinding === \"complex\") {\n          foundComplexRoot = get_factor_from_complex_root(remainingPoly);\n        }\n      }\n\n      if (whichRootsAreWeFinding === \"real\") {\n        if (foundRealRoot === 0) {\n          whichRootsAreWeFinding = \"complex\";\n          continue;\n        } else {\n          push(p4);\n          push(p2);\n          multiply();\n          push(p5);\n          add();\n          p8 = pop();\n\n          if (DEBUG) {\n            console.log(\"success\\nFACTOR=\" + p8);\n          }\n          /*\n          if (isnegativeterm(p4))\n            push(p8)\n            negate()\n            p8 = pop()\n            push(p7)\n            negate_noexpand()\n            p7 = pop()\n           */\n\n\n          push(p7);\n          push(p8);\n          multiply_noexpand();\n          p7 = pop();\n          yydivpoly();\n\n          while (factpoly_expo && isZeroAtomOrTensor(stack[polycoeff + factpoly_expo])) {\n            factpoly_expo--;\n          }\n\n          push(zero);\n\n          for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            push(stack[polycoeff + i]);\n            push(p2);\n            push_integer(i);\n            power();\n            multiply();\n            add();\n          }\n\n          remainingPoly = pop();\n        }\n      } else if (whichRootsAreWeFinding === \"complex\") {\n        if (foundComplexRoot === 0) {\n          break;\n        } else {\n          push(p4);\n          push(p2);\n          subtract();\n          push(p4);\n          conjugate();\n          push(p2);\n          subtract();\n          multiply();\n          p8 = pop();\n\n          if (DEBUG) {\n            console.log(\"success\\nFACTOR=\" + p8);\n          }\n          /*\n          if (isnegativeterm(p4))\n            push(p8)\n            negate()\n            p8 = pop()\n            push(p7)\n            negate_noexpand()\n            p7 = pop()\n           */\n\n\n          push(p7);\n          previousFactorisation = pop();\n          push(p7);\n          push(p8);\n          multiply_noexpand();\n          p7 = pop();\n\n          if (remainingPoly == null) {\n            push(zero);\n\n            for (i = i1 = 0, ref1 = factpoly_expo; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n              push(stack[polycoeff + i]);\n              push(p2);\n              push_integer(i);\n              power();\n              multiply();\n              add();\n            }\n\n            remainingPoly = pop();\n          }\n\n          dividend = remainingPoly;\n          push(dividend);\n          push(p8);\n          push(p2);\n          divpoly();\n          remainingPoly = pop();\n          push(remainingPoly);\n          push(p8);\n          multiply();\n          checkingTheDivision = pop();\n\n          if (!equal(checkingTheDivision, dividend)) {\n            if (DEBUG) {\n              console.log(\"we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting\");\n            }\n\n            if (DEBUG) {\n              console.log(\"so just returning previousFactorisation times dividend: \" + previousFactorisation + \" * \" + dividend);\n            }\n\n            push(previousFactorisation);\n            push(dividend);\n            prev_expanding = expanding;\n            expanding = 0;\n            yycondense();\n            expanding = prev_expanding;\n            multiply_noexpand();\n            p7 = pop();\n            stack[h] = p7;\n            moveTos(h + 1);\n            restore();\n            return;\n          }\n          /*\n          if compare_numbers(startingDegree, remainingDegree)\n             * ok even if we found a complex root that\n             * together with the conjugate generates a poly in Z,\n             * that doesn't mean that the division would end up in Z.\n             * Example: 1+x^2+x^4+x^6 has +i and -i as one of its roots\n             * so a factor is 1+x^2 ( = (x+i)*(x-i))\n             * BUT\n           */\n\n\n          for (i = j1 = 0, ref2 = factpoly_expo; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n            pop();\n          }\n\n          push(remainingPoly);\n          push(p2);\n          coeff();\n          factpoly_expo -= 2;\n        }\n      }\n    }\n\n    push(zero);\n\n    for (i = l1 = 0, ref3 = factpoly_expo; 0 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[polycoeff + i]);\n      push(p2);\n      push_integer(i);\n      power();\n      multiply();\n      add();\n    }\n\n    p1 = pop();\n\n    if (DEBUG) {\n      console.log(\"POLY=\" + p1);\n    }\n\n    push(p1);\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    p1 = pop();\n\n    if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff + factpoly_expo])) {\n      push(p1);\n      negate();\n      p1 = pop();\n      push(p7);\n      negate_noexpand();\n      p7 = pop();\n    }\n\n    push(p7);\n    push(p1);\n    multiply_noexpand();\n    p7 = pop();\n\n    if (DEBUG) {\n      console.log(\"RESULT=\" + p7);\n    }\n\n    stack[h] = p7;\n    moveTos(h + 1);\n    return restore();\n  };\n\n  rationalize_coefficients = function (h) {\n    var i, i1, o, ref, ref1, ref2, ref3;\n    i = 0;\n    p7 = one;\n\n    for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      push(stack[i]);\n      denominator();\n      push(p7);\n      lcm();\n      p7 = pop();\n    }\n\n    for (i = i1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      push(p7);\n      push(stack[i]);\n      multiply();\n      stack[i] = pop();\n    }\n\n    push(p7);\n    reciprocate();\n    p7 = pop();\n\n    if (DEBUG) {\n      return console.log(\"rationalize_coefficients result\");\n    }\n  };\n\n  get_factor_from_real_root = function () {\n    var a0, an, h, i, i1, j, j1, l1, m1, na0, nan, o, ref, ref1, ref2, ref3, ref4, rootsTries_i, rootsTries_j;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n\n    if (DEBUG) {\n      push(zero);\n\n      for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(stack[polycoeff + i]);\n        push(p2);\n        push_integer(i);\n        power();\n        multiply();\n        add();\n      }\n\n      p1 = pop();\n      console.log(\"POLY=\" + p1);\n    }\n\n    h = tos;\n    an = tos;\n    push(stack[polycoeff + factpoly_expo]);\n    divisors_onstack();\n    nan = tos - an;\n    a0 = tos;\n    push(stack[polycoeff + 0]);\n    divisors_onstack();\n    na0 = tos - a0;\n\n    if (DEBUG) {\n      console.log(\"divisors of base term\");\n\n      for (i = i1 = 0, ref1 = na0; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        console.log(\", \" + stack[a0 + i]);\n      }\n\n      console.log(\"divisors of leading term\");\n\n      for (i = j1 = 0, ref2 = nan; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        console.log(\", \" + stack[an + i]);\n      }\n    }\n\n    for (rootsTries_i = l1 = 0, ref3 = nan; 0 <= ref3 ? l1 < ref3 : l1 > ref3; rootsTries_i = 0 <= ref3 ? ++l1 : --l1) {\n      for (rootsTries_j = m1 = 0, ref4 = na0; 0 <= ref4 ? m1 < ref4 : m1 > ref4; rootsTries_j = 0 <= ref4 ? ++m1 : --m1) {\n        p4 = stack[an + rootsTries_i];\n        p5 = stack[a0 + rootsTries_j];\n        push(p5);\n        push(p4);\n        divide();\n        negate();\n        p3 = pop();\n        Evalpoly();\n\n        if (DEBUG) {\n          console.log(\"try A=\" + p4);\n          console.log(\", B=\" + p5);\n          console.log(\", root \" + p2);\n          console.log(\"=-B/A=\" + p3);\n          console.log(\", POLY(\" + p3);\n          console.log(\")=\" + p6);\n        }\n\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n\n          return 1;\n        }\n\n        push(p5);\n        negate();\n        p5 = pop();\n        push(p3);\n        negate();\n        p3 = pop();\n        Evalpoly();\n\n        if (DEBUG) {\n          console.log(\"try A=\" + p4);\n          console.log(\", B=\" + p5);\n          console.log(\", root \" + p2);\n          console.log(\"=-B/A=\" + p3);\n          console.log(\", POLY(\" + p3);\n          console.log(\")=\" + p6);\n        }\n\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n\n          return 1;\n        }\n      }\n    }\n\n    moveTos(h);\n\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root returning 0\");\n    }\n\n    return 0;\n  };\n\n  get_factor_from_complex_root = function (remainingPoly) {\n    var a0, an, h, i, i1, j, na0, nan, o, rootsTries_i, rootsTries_j;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n\n    if (factpoly_expo <= 2) {\n      if (DEBUG) {\n        console.log(\"no more factoring via complex roots to be found in polynomial of degree <= 2\");\n      }\n\n      return 0;\n    }\n\n    p1 = remainingPoly;\n\n    if (DEBUG) {\n      console.log(\"complex root finding for POLY=\" + p1);\n    }\n\n    h = tos;\n    an = tos;\n    push_integer(-1);\n    push_rational(2, 3);\n    power();\n    rect();\n    p4 = pop();\n\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + p4);\n    }\n\n    push(p4);\n    p3 = pop();\n    push(p3);\n    Evalpoly();\n\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + p6);\n    }\n\n    if (isZeroAtomOrTensor(p6)) {\n      moveTos(h);\n\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n\n      return 1;\n    }\n\n    push_integer(1);\n    push_rational(2, 3);\n    power();\n    rect();\n    p4 = pop();\n\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + p4);\n    }\n\n    push(p4);\n    p3 = pop();\n    push(p3);\n    Evalpoly();\n\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + p6);\n    }\n\n    if (isZeroAtomOrTensor(p6)) {\n      moveTos(h);\n\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n\n      return 1;\n    }\n\n    for (rootsTries_i = o = -10; o <= 10; rootsTries_i = ++o) {\n      for (rootsTries_j = i1 = 1; i1 <= 5; rootsTries_j = ++i1) {\n        push_integer(rootsTries_i);\n        push_integer(rootsTries_j);\n        push(imaginaryunit);\n        multiply();\n        add();\n        rect();\n        p4 = pop();\n        push(p4);\n        p3 = pop();\n        push(p3);\n        Evalpoly();\n\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"found complex root: \" + p6);\n          }\n\n          return 1;\n        }\n      }\n    }\n\n    moveTos(h);\n\n    if (DEBUG) {\n      console.log(\"get_factor_from_complex_root returning 0\");\n    }\n\n    return 0;\n  };\n\n  yydivpoly = function () {\n    var i, o, ref;\n    i = 0;\n    p6 = zero;\n\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      push(stack[polycoeff + i]);\n      stack[polycoeff + i] = p6;\n      push(p4);\n      divide();\n      p6 = pop();\n      push(stack[polycoeff + i - 1]);\n      push(p6);\n      push(p5);\n      multiply();\n      subtract();\n      stack[polycoeff + i - 1] = pop();\n    }\n\n    stack[polycoeff + 0] = p6;\n\n    if (DEBUG) {\n      return console.log(\"yydivpoly Q:\");\n    }\n  };\n\n  Evalpoly = function () {\n    var i, o, ref;\n    i = 0;\n    push(zero);\n\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o <= 0 : o >= 0; i = ref <= 0 ? ++o : --o) {\n      push(p3);\n      multiply();\n      push(stack[polycoeff + i]);\n\n      if (DEBUG) {\n        console.log(\"Evalpoly top of stack:\");\n        console.log(print_list(stack[tos - i]));\n      }\n\n      add();\n    }\n\n    return p6 = pop();\n  };\n\n  factors = function (p) {\n    var h;\n    h = tos;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        push_term_factors(car(p));\n        p = cdr(p);\n      }\n    } else {\n      push_term_factors(p);\n    }\n\n    return tos - h;\n  };\n\n  push_term_factors = function (p) {\n    var results;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return push(p);\n    }\n  };\n  /*\n  Remove terms that involve a given symbol or expression. For example...\n  \n    filter(x^2 + x + 1, x)    =>  1\n  \n    filter(x^2 + x + 1, x^2)  =>  x + 1\n   */\n\n\n  Eval_filter = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      filter();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n  /*\n   For example...\n  \n    push(F)\n    push(X)\n    filter()\n    F = pop()\n   */\n\n\n  filter = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n    filter_main();\n    return restore();\n  };\n\n  filter_main = function () {\n    if (car(p1) === symbol(ADD)) {\n      return filter_sum();\n    } else if (istensor(p1)) {\n      return filter_tensor();\n    } else if (Find(p1, p2)) {\n      return push_integer(0);\n    } else {\n      return push(p1);\n    }\n  };\n\n  filter_sum = function () {\n    var results;\n    push_integer(0);\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      filter();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  filter_tensor = function () {\n    var i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    n = p1.tensor.nelem;\n    p3 = alloc_tensor(n);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      filter();\n      p3.tensor.elem[i] = pop();\n    }\n\n    return push(p3);\n  };\n\n  Eval_float = function () {\n    evaluatingAsFloats++;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    return evaluatingAsFloats--;\n  };\n\n  checkFloatHasWorkedOutCompletely = function (nodeToCheck) {\n    var numberOfEs, numberOfMults, numberOfPIs, numberOfPowers, numberOfSums;\n    numberOfPowers = countOccurrencesOfSymbol(symbol(POWER), nodeToCheck);\n    numberOfPIs = countOccurrencesOfSymbol(symbol(PI), nodeToCheck);\n    numberOfEs = countOccurrencesOfSymbol(symbol(E), nodeToCheck);\n    numberOfMults = countOccurrencesOfSymbol(symbol(MULTIPLY), nodeToCheck);\n    numberOfSums = countOccurrencesOfSymbol(symbol(ADD), nodeToCheck);\n\n    if (DEBUG) {\n      console.log(\"     ... numberOfPowers: \" + numberOfPowers);\n      console.log(\"     ... numberOfPIs: \" + numberOfPIs);\n      console.log(\"     ... numberOfEs: \" + numberOfEs);\n      console.log(\"     ... numberOfMults: \" + numberOfMults);\n      console.log(\"     ... numberOfSums: \" + numberOfSums);\n    }\n\n    if (numberOfPowers > 1 || numberOfPIs > 0 || numberOfEs > 0 || numberOfMults > 1 || numberOfSums > 1) {\n      return stop(\"float: some unevalued parts in \" + nodeToCheck);\n    }\n  };\n\n  zzfloat = function () {\n    save();\n    evaluatingAsFloats++;\n    Eval();\n    yyfloat();\n    Eval();\n    evaluatingAsFloats--;\n    return restore();\n  };\n\n  yyfloat = function () {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    evaluatingAsFloats++;\n    save();\n    p1 = pop();\n\n    if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        yyfloat();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        yyfloat();\n        p1.tensor.elem[i] = pop();\n      }\n\n      push(p1);\n    } else if (p1.k === NUM) {\n      push(p1);\n      bignum_float();\n    } else if (p1 === symbol(PI)) {\n      push_double(Math.PI);\n    } else if (p1 === symbol(E)) {\n      push_double(Math.E);\n    } else {\n      push(p1);\n    }\n\n    restore();\n    return evaluatingAsFloats--;\n  };\n\n  Eval_floor = function () {\n    push(cadr(p1));\n    Eval();\n    return yfloor();\n  };\n\n  yfloor = function () {\n    save();\n    yyfloor();\n    return restore();\n  };\n\n  yyfloor = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(FLOOR);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.floor(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n\n    if (isnegativenumber(p1)) {\n      push_integer(-1);\n      return add();\n    }\n  };\n  /*\n  x=0\n  y=2\n  for(do(x=sqrt(2+x),y=2*y/x),k,1,9)\n  float(y)\n  \n  X: k\n  B: 1...9\n  \n  1st parameter is the body\n  2nd parameter is the variable to loop with\n  3rd and 4th are the limits\n   */\n\n\n  Eval_for = function () {\n    var i, j, k, loopingVariable, o, ref, ref1;\n    i = 0;\n    j = 0;\n    k = 0;\n    loopingVariable = caddr(p1);\n\n    if (!issymbol(loopingVariable)) {\n      stop(\"for: 2nd arg should be the variable to loop over\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n\n    p4 = get_binding(loopingVariable);\n\n    for (i = o = ref = j, ref1 = k; ref <= ref1 ? o <= ref1 : o >= ref1; i = ref <= ref1 ? ++o : --o) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(loopingVariable, p5);\n      push(cadr(p1));\n      Eval();\n      pop();\n    }\n\n    set_binding(loopingVariable, p4);\n    return push_symbol(NIL);\n  };\n\n  Eval_gamma = function () {\n    push(cadr(p1));\n    Eval();\n    return gamma();\n  };\n\n  gamma = function () {\n    save();\n    gammaf();\n    return restore();\n  };\n\n  gammaf = function () {\n    p1 = pop();\n\n    if (isrational(p1) && MEQUAL(p1.q.a, 1) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_rational(1, 2);\n      power();\n      return;\n    }\n\n    if (isrational(p1) && MEQUAL(p1.q.a, 3) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_rational(1, 2);\n      power();\n      push_rational(1, 2);\n      multiply();\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_integer(-1);\n      multiply();\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push(p1);\n      multiply();\n      sine();\n      push(p1);\n      multiply();\n      push(p1);\n      negate();\n      gamma();\n      multiply();\n      divide();\n      return;\n    }\n\n    if (car(p1) === symbol(ADD)) {\n      gamma_of_sum();\n      return;\n    }\n\n    push_symbol(GAMMA);\n    push(p1);\n    list(2);\n  };\n\n  gamma_of_sum = function () {\n    p3 = cdr(p1);\n\n    if (isrational(car(p3)) && MEQUAL(car(p3).q.a, 1) && MEQUAL(car(p3).q.b, 1)) {\n      push(cadr(p3));\n      push(cadr(p3));\n      gamma();\n      return multiply();\n    } else {\n      if (isrational(car(p3)) && MEQUAL(car(p3).q.a, -1) && MEQUAL(car(p3).q.b, 1)) {\n        push(cadr(p3));\n        gamma();\n        push(cadr(p3));\n        push_integer(-1);\n        add();\n        return divide();\n      } else {\n        push_symbol(GAMMA);\n        push(p1);\n        list(2);\n      }\n    }\n  };\n\n  Eval_gcd = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      gcd();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  gcd = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    gcd_main();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  gcd_main = function () {\n    var polyVar;\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n\n    if (equal(p1, p2)) {\n      push(p1);\n      return;\n    }\n\n    if (isrational(p1) && isrational(p2)) {\n      push(p1);\n      push(p2);\n      gcd_numbers();\n      return;\n    }\n\n    if (polyVar = areunivarpolysfactoredorexpandedform(p1, p2)) {\n      gcd_polys(polyVar);\n      return;\n    }\n\n    if (car(p1) === symbol(ADD) && car(p2) === symbol(ADD)) {\n      gcd_sum_sum();\n      return;\n    }\n\n    if (car(p1) === symbol(ADD)) {\n      gcd_sum(p1);\n      p1 = pop();\n    }\n\n    if (car(p2) === symbol(ADD)) {\n      gcd_sum(p2);\n      p2 = pop();\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      gcd_sum_product();\n      return;\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      gcd_product_sum();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n\n    return gcd_powers_with_same_base();\n  };\n\n  areunivarpolysfactoredorexpandedform = function (p1, p2) {\n    var polyVar;\n\n    if (polyVar = isunivarpolyfactoredorexpandedform(p1)) {\n      if (isunivarpolyfactoredorexpandedform(p2, polyVar)) {\n        return polyVar;\n      }\n    }\n\n    return false;\n  };\n\n  gcd_polys = function (polyVar) {\n    push(p1);\n    push(polyVar);\n    factorpoly();\n    p1 = pop();\n    push(p2);\n    push(polyVar);\n    factorpoly();\n    p2 = pop();\n\n    if (DEBUG) {\n      console.log(\"factored polys:\");\n    }\n\n    if (DEBUG) {\n      console.log(\"p1:\" + p1.toString());\n    }\n\n    if (DEBUG) {\n      console.log(\"p2:\" + p2.toString());\n    }\n\n    if (car(p1) === symbol(MULTIPLY) || car(p2) === symbol(MULTIPLY)) {\n      if (car(p1) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push(one);\n        list(3);\n        p1 = pop();\n      }\n\n      if (car(p2) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p2);\n        push(one);\n        list(3);\n        p2 = pop();\n      }\n    }\n\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n\n    gcd_powers_with_same_base();\n    return true;\n  };\n\n  gcd_product_product = function () {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n\n    while (iscons(p3)) {\n      p4 = cdr(p2);\n\n      while (iscons(p4)) {\n        push(car(p3));\n        push(car(p4));\n        gcd();\n        multiply();\n        p4 = cdr(p4);\n      }\n\n      results.push(p3 = cdr(p3));\n    }\n\n    return results;\n  };\n\n  gcd_powers_with_same_base = function () {\n    if (car(p1) === symbol(POWER)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n\n    if (car(p2) === symbol(POWER)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n\n    if (!equal(p1, p2)) {\n      push(one);\n      return;\n    }\n\n    if (isNumericAtom(p3) && isNumericAtom(p4)) {\n      push(p1);\n\n      if (lessp(p3, p4)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n\n      power();\n      return;\n    }\n\n    push(p3);\n    push(p4);\n    divide();\n    p5 = pop();\n\n    if (isNumericAtom(p5)) {\n      push(p1);\n\n      if (car(p3) === symbol(MULTIPLY) && isNumericAtom(cadr(p3))) {\n        p5 = cadr(p3);\n      } else {\n        p5 = one;\n      }\n\n      if (car(p4) === symbol(MULTIPLY) && isNumericAtom(cadr(p4))) {\n        p6 = cadr(p4);\n      } else {\n        p6 = one;\n      }\n\n      if (lessp(p5, p6)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n\n      power();\n      return;\n    }\n\n    push(p3);\n    push(p4);\n    subtract();\n    p5 = pop();\n\n    if (!isNumericAtom(p5)) {\n      push(one);\n      return;\n    }\n\n    push(p1);\n\n    if (isnegativenumber(p5)) {\n      push(p3);\n    } else {\n      push(p4);\n    }\n\n    return power();\n  };\n\n  gcd_sum_sum = function () {\n    if (length(p1) !== length(p2)) {\n      push(one);\n      return;\n    }\n\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n\n    p3 = pop();\n    p4 = cdr(p2);\n    push(car(p4));\n    p4 = cdr(p4);\n\n    while (iscons(p4)) {\n      push(car(p4));\n      gcd();\n      p4 = cdr(p4);\n    }\n\n    p4 = pop();\n    push(p1);\n    push(p3);\n    divide();\n    p5 = pop();\n    push(p2);\n    push(p4);\n    divide();\n    p6 = pop();\n\n    if (equal(p5, p6)) {\n      push(p5);\n      push(p3);\n      push(p4);\n      gcd();\n      return multiply();\n    } else {\n      return push(one);\n    }\n  };\n\n  gcd_sum = function (p) {\n    var results;\n    p = cdr(p);\n    push(car(p));\n    p = cdr(p);\n    results = [];\n\n    while (iscons(p)) {\n      push(car(p));\n      gcd();\n      results.push(p = cdr(p));\n    }\n\n    return results;\n  };\n\n  gcd_sum_product = function () {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n\n    while (iscons(p3)) {\n      push(car(p3));\n      push(p2);\n      gcd();\n      multiply();\n      results.push(p3 = cdr(p3));\n    }\n\n    return results;\n  };\n\n  gcd_product_sum = function () {\n    var results;\n    push(one);\n    p4 = cdr(p2);\n    results = [];\n\n    while (iscons(p4)) {\n      push(p1);\n      push(car(p4));\n      gcd();\n      multiply();\n      results.push(p4 = cdr(p4));\n    }\n\n    return results;\n  };\n\n  guess = function () {\n    var p;\n    p = pop();\n    push(p);\n\n    if (Find(p, symbol(SYMBOL_X))) {\n      return push_symbol(SYMBOL_X);\n    } else if (Find(p, symbol(SYMBOL_Y))) {\n      return push_symbol(SYMBOL_Y);\n    } else if (Find(p, symbol(SYMBOL_Z))) {\n      return push_symbol(SYMBOL_Z);\n    } else if (Find(p, symbol(SYMBOL_T))) {\n      return push_symbol(SYMBOL_T);\n    } else if (Find(p, symbol(SYMBOL_S))) {\n      return push_symbol(SYMBOL_S);\n    } else {\n      return push_symbol(SYMBOL_X);\n    }\n  };\n\n  hermite = function () {\n    save();\n    yyhermite();\n    return restore();\n  };\n\n  yyhermite = function () {\n    var n;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(HERMITE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    if (issymbol(p1)) {\n      return yyhermite2(n);\n    } else {\n      p3 = p1;\n      p1 = symbol(SECRETX);\n      yyhermite2(n);\n      p1 = p3;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      return Eval();\n    }\n  };\n\n  yyhermite2 = function (n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p4 = pop();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p4;\n      p4 = pop();\n      push(p1);\n      push(p4);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(2);\n      results.push(multiply());\n    }\n\n    return results;\n  };\n\n  hilbert = function () {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p2 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 2) {\n      push_symbol(HILBERT);\n      push(p2);\n      list(2);\n      restore();\n      return;\n    }\n\n    push_zero_matrix(n, n);\n    p1 = pop();\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push_integer(i + j + 1);\n        inverse();\n        p1.tensor.elem[i * n + j] = pop();\n      }\n    }\n\n    push(p1);\n    return restore();\n  };\n  /*\n   Returns the coefficient of the imaginary part of complex z\n  \n    z    imag(z)\n    -    -------\n  \n    a + i b    b\n  \n    exp(i a)  sin(a)\n   */\n\n\n  DEBUG_IMAG = false;\n\n  Eval_imag = function () {\n    push(cadr(p1));\n    Eval();\n    return imag();\n  };\n\n  imag = function () {\n    save();\n    rect();\n    p1 = pop();\n\n    if (DEBUG_IMAG) {\n      console.log(\"IMAGE of \" + p1);\n    }\n\n    push(p1);\n    push(p1);\n    conjugate();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: conjugate result: \" + stack[tos - 1]);\n    }\n\n    subtract();\n    push_integer(2);\n    divide();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: 1st divide result: \" + stack[tos - 1]);\n    }\n\n    push(imaginaryunit);\n    divide();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: 2nd divide result: \" + stack[tos - 1]);\n    }\n\n    return restore();\n  };\n\n  index_function = function (n) {\n    var i, i1, j1, k, l1, m, m1, ndim, nelem, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    save();\n    s = tos - n;\n    p1 = stack[s];\n    ndim = p1.tensor.ndim;\n    m = n - 1;\n\n    if (m > ndim) {\n      stop(\"too many indices for tensor\");\n    }\n\n    k = 0;\n\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 1]);\n      t = pop_integer();\n\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"index out of range\");\n      }\n\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n\n    if (ndim === m) {\n      moveTos(tos - n);\n      push(p1.tensor.elem[k]);\n      restore();\n      return;\n    }\n\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n\n    nelem = 1;\n\n    for (i = j1 = ref3 = m, ref4 = ndim; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; i = ref3 <= ref4 ? ++j1 : --j1) {\n      nelem *= p1.tensor.dim[i];\n    }\n\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - m;\n\n    for (i = l1 = ref5 = m, ref6 = ndim; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n      p2.tensor.dim[i - m] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref7 = nelem; 0 <= ref7 ? m1 < ref7 : m1 > ref7; i = 0 <= ref7 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[k + i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  set_component = function (n) {\n    var i, i1, j1, k, l1, m, m1, n1, ndim, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    t = 0;\n    save();\n\n    if (n < 3) {\n      stop(\"error in indexed assign\");\n    }\n\n    s = tos - n;\n    p2 = stack[s];\n    p1 = stack[s + 1];\n\n    if (!istensor(p1)) {\n      stop(\"error in indexed assign: assigning to something that is not a tensor\");\n    }\n\n    ndim = p1.tensor.ndim;\n    m = n - 2;\n\n    if (m > ndim) {\n      stop(\"error in indexed assign\");\n    }\n\n    k = 0;\n\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 2]);\n      t = pop_integer();\n\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"error in indexed assign\\n\");\n      }\n\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = j1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = l1 = 0, ref4 = p1.tensor.nelem; 0 <= ref4 ? l1 < ref4 : l1 > ref4; i = 0 <= ref4 ? ++l1 : --l1) {\n      p3.tensor.elem[i] = p1.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p3);\n    p1 = p3;\n\n    if (ndim === m) {\n      if (istensor(p2)) {\n        stop(\"error in indexed assign\");\n      }\n\n      p1.tensor.elem[k] = p2;\n      check_tensor_dimensions(p1);\n      moveTos(tos - n);\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (!istensor(p2)) {\n      stop(\"error in indexed assign\");\n    }\n\n    if (ndim - m !== p2.tensor.ndim) {\n      stop(\"error in indexed assign\");\n    }\n\n    for (i = m1 = 0, ref5 = p2.tensor.ndim; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      if (p1.tensor.dim[m + i] !== p2.tensor.dim[i]) {\n        stop(\"error in indexed assign\");\n      }\n    }\n\n    for (i = n1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? n1 < ref6 : n1 > ref6; i = 0 <= ref6 ? ++n1 : --n1) {\n      p1.tensor.elem[k + i] = p2.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p1);\n    return restore();\n  };\n  /* dot =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  \n  The inner (or dot) operator gives products of vectors,\n  matrices, and tensors.\n  \n  Note that for Algebrite, the elements of a vector/matrix\n  can only be scalars. This allows for example to flesh out\n  matrix multiplication using the usual multiplication.\n  So for example block-representations are not allowed.\n  \n  There is an aweful lot of confusion between sw packages on\n  what dot and inner do.\n  \n  First off, the \"dot\" operator is different from the\n  mathematical notion of dot product, which can be\n  slightly confusing.\n  \n  The mathematical notion of dot product is here:\n    http://mathworld.wolfram.com/DotProduct.html\n  \n  However, \"dot\" does that and a bunch of other things,\n  i.e. in Algebrite\n  dot/inner does what the dot of Mathematica does, i.e.:\n  \n  scalar product of vectors:\n  \n    inner((a, b, c), (x, y, z))\n    > a x + b y + c z\n  \n  products of matrices and vectors:\n  \n    inner(((a, b), (c,d)), (x, y))\n    > (a x + b y,c x + d y)\n  \n    inner((x, y), ((a, b), (c,d)))\n    > (a x + c y,b x + d y)\n  \n    inner((x, y), ((a, b), (c,d)), (r, s))\n    > a r x + b s x + c r y + d s y\n  \n  matrix product:\n  \n    inner(((a,b),(c,d)),((r,s),(t,u)))\n    > ((a r + b t,a s + b u),(c r + d t,c s + d u))\n  \n  the \"dot/inner\" operator is associative and\n  distributive but not commutative.\n  \n  In Mathematica, Inner is a generalisation of Dot where\n  the user can specify the multiplication and the addition\n  operators.\n  But here in Algebrite they do the same thing.\n  \n   https://reference.wolfram.com/language/ref/Dot.html\n   https://reference.wolfram.com/language/ref/Inner.html\n  \n   http://uk.mathworks.com/help/matlab/ref/dot.html\n   http://uk.mathworks.com/help/matlab/ref/mtimes.html\n   */\n\n\n  Eval_inner = function () {\n    var difference, i, i1, j1, l1, moretheArguments, o, operands, ref, ref1, ref2, ref3, refinedOperands, results, secondArgument, shift, theArguments;\n    theArguments = [];\n    theArguments.push(car(cdr(p1)));\n    secondArgument = car(cdr(cdr(p1)));\n\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    moretheArguments = cdr(cdr(p1));\n\n    while (moretheArguments !== symbol(NIL)) {\n      theArguments.push(car(moretheArguments));\n      moretheArguments = cdr(moretheArguments);\n    }\n\n    if (theArguments.length > 2) {\n      push_symbol(INNER);\n      push(theArguments[theArguments.length - 2]);\n      push(theArguments[theArguments.length - 1]);\n      list(3);\n\n      for (i = o = 2, ref = theArguments.length; 2 <= ref ? o < ref : o > ref; i = 2 <= ref ? ++o : --o) {\n        push_symbol(INNER);\n        swap();\n        push(theArguments[theArguments.length - i - 1]);\n        swap();\n        list(3);\n      }\n\n      p1 = pop();\n      Eval_inner();\n      return;\n    }\n\n    operands = [];\n    get_innerprod_factors(p1, operands);\n    refinedOperands = [];\n\n    for (i = i1 = 0, ref1 = operands.length; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (operands[i] === symbol(SYMBOL_IDENTITY_MATRIX)) {\n        continue;\n      } else {\n        refinedOperands.push(operands[i]);\n      }\n    }\n\n    operands = refinedOperands;\n    refinedOperands = [];\n\n    if (operands.length > 1) {\n      shift = 0;\n\n      for (i = j1 = 0, ref2 = operands.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        if (i + shift + 1 <= operands.length - 1) {\n          if (!(isNumericAtomOrTensor(operands[i + shift]) || isNumericAtomOrTensor(operands[i + shift + 1]))) {\n            push(operands[i + shift]);\n            Eval();\n            inv();\n            push(operands[i + shift + 1]);\n            Eval();\n            subtract();\n            difference = pop();\n\n            if (isZeroAtomOrTensor(difference)) {\n              shift += 1;\n            } else {\n              refinedOperands.push(operands[i + shift]);\n            }\n          } else {\n            refinedOperands.push(operands[i + shift]);\n          }\n        } else {\n          break;\n        }\n\n        if (i + shift === operands.length - 2) {\n          refinedOperands.push(operands[operands.length - 1]);\n        }\n\n        if (i + shift >= operands.length - 1) {\n          break;\n        }\n      }\n\n      operands = refinedOperands;\n    }\n\n    push(symbol(INNER));\n\n    if (operands.length > 0) {\n      for (i = l1 = 0, ref3 = operands.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        push(operands[i]);\n      }\n    } else {\n      pop();\n      push(symbol(SYMBOL_IDENTITY_MATRIX));\n      return;\n    }\n\n    list(operands.length + 1);\n    p1 = pop();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      inner();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  inner = function () {\n    var arg1, arg2, arg3, subtractionResult;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isnegativeterm(p2) && isnegativeterm(p1)) {\n      push(p2);\n      negate();\n      p2 = pop();\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    if (isinnerordot(p1)) {\n      arg1 = car(cdr(p1));\n      arg2 = car(cdr(cdr(p1)));\n      arg3 = p2;\n      p1 = arg1;\n      push(arg2);\n      push(arg3);\n      inner();\n      p2 = pop();\n    }\n\n    if (p1 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p2);\n      restore();\n      return;\n    } else if (p2 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (istensor(p1) && istensor(p2)) {\n      inner_f();\n    } else {\n      if (!(isNumericAtomOrTensor(p1) || isNumericAtomOrTensor(p2))) {\n        push(p1);\n        push(p2);\n        inv();\n        subtract();\n        subtractionResult = pop();\n\n        if (isZeroAtomOrTensor(subtractionResult)) {\n          push_symbol(SYMBOL_IDENTITY_MATRIX);\n          restore();\n          return;\n        }\n      }\n\n      if (expanding && isadd(p1)) {\n        p1 = cdr(p1);\n        push(zero);\n\n        while (iscons(p1)) {\n          push(car(p1));\n          push(p2);\n          inner();\n          add();\n          p1 = cdr(p1);\n        }\n\n        restore();\n        return;\n      }\n\n      if (expanding && isadd(p2)) {\n        p2 = cdr(p2);\n        push(zero);\n\n        while (iscons(p2)) {\n          push(p1);\n          push(car(p2));\n          inner();\n          add();\n          p2 = cdr(p2);\n        }\n\n        restore();\n        return;\n      }\n\n      push(p1);\n      push(p2);\n\n      if (istensor(p1) && isNumericAtom(p2)) {\n        tensor_times_scalar();\n      } else if (isNumericAtom(p1) && istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        if (isNumericAtom(p1) || isNumericAtom(p2)) {\n          multiply();\n        } else {\n          pop();\n          pop();\n          push_symbol(INNER);\n          push(p1);\n          push(p2);\n          list(3);\n          restore();\n          return;\n        }\n      }\n    }\n\n    return restore();\n  };\n\n  inner_f = function () {\n    var a, ak, b, bk, c, i, i1, j, j1, k, l1, m1, n, n1, ndim, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    n = p1.tensor.dim[p1.tensor.ndim - 1];\n\n    if (n !== p2.tensor.dim[0]) {\n      debugger;\n      stop(\"inner: tensor dimension check\");\n    }\n\n    ndim = p1.tensor.ndim + p2.tensor.ndim - 2;\n\n    if (ndim > MAXDIM) {\n      stop(\"inner: rank of result exceeds maximum\");\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    ak = 1;\n\n    for (i = o = 0, ref = p1.tensor.ndim - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      ak *= p1.tensor.dim[i];\n    }\n\n    bk = 1;\n\n    for (i = i1 = 1, ref1 = p2.tensor.ndim; 1 <= ref1 ? i1 < ref1 : i1 > ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      bk *= p2.tensor.dim[i];\n    }\n\n    p3 = alloc_tensor(ak * bk);\n    c = p3.tensor.elem;\n\n    for (i = j1 = 0, ref2 = ak; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n        if (isZeroAtomOrTensor(a[i * n + j])) {\n          continue;\n        }\n\n        for (k = m1 = 0, ref4 = bk; 0 <= ref4 ? m1 < ref4 : m1 > ref4; k = 0 <= ref4 ? ++m1 : --m1) {\n          push(a[i * n + j]);\n          push(b[j * bk + k]);\n          multiply();\n          push(c[i * bk + k]);\n          add();\n          c[i * bk + k] = pop();\n        }\n      }\n    }\n\n    if (ndim === 0) {\n      return push(p3.tensor.elem[0]);\n    } else {\n      p3.tensor.ndim = ndim;\n      j = 0;\n\n      for (i = n1 = 0, ref5 = p1.tensor.ndim - 1; 0 <= ref5 ? n1 < ref5 : n1 > ref5; i = 0 <= ref5 ? ++n1 : --n1) {\n        p3.tensor.dim[i] = p1.tensor.dim[i];\n      }\n\n      j = p1.tensor.ndim - 1;\n\n      for (i = o1 = 0, ref6 = p2.tensor.ndim - 1; 0 <= ref6 ? o1 < ref6 : o1 > ref6; i = 0 <= ref6 ? ++o1 : --o1) {\n        p3.tensor.dim[j + i] = p2.tensor.dim[i + 1];\n      }\n\n      return push(p3);\n    }\n  };\n\n  get_innerprod_factors = function (tree, factors_accumulator) {\n    if (!iscons(tree)) {\n      add_factor_to_accumulator(tree, factors_accumulator);\n      return;\n    }\n\n    if (cdr(tree) === symbol(NIL)) {\n      tree = get_innerprod_factors(car(tree), factors_accumulator);\n      return;\n    }\n\n    if (isinnerordot(tree)) {\n      get_innerprod_factors(car(cdr(tree)), factors_accumulator);\n      get_innerprod_factors(cdr(cdr(tree)), factors_accumulator);\n      return;\n    }\n\n    return add_factor_to_accumulator(tree, factors_accumulator);\n  };\n\n  add_factor_to_accumulator = function (tree, factors_accumulator) {\n    if (tree !== symbol(NIL)) {\n      return factors_accumulator.push(tree);\n    }\n  };\n  /*\n   Table of integrals\n  \n  The symbol f is just a dummy symbol for creating a list f(A,B,C,C,...) where\n  \n    A  is the template expression\n  \n    B  is the result expression\n  \n    C  is an optional list of conditional expressions\n   */\n\n\n  itab = [\"f(a,a*x)\", \"f(1/x,log(x))\", \"f(x^a,x^(a+1)/(a+1))\", \"f(x^(-2),-x^(-1))\", \"f(x^(-1/2),2*x^(1/2))\", \"f(x^(1/2),2/3*x^(3/2))\", \"f(x,x^2/2)\", \"f(x^2,x^3/3)\", \"f(exp(a*x),1/a*exp(a*x))\", \"f(exp(a*x+b),1/a*exp(a*x+b))\", \"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\", \"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\", \"f(log(a*x),x*log(a*x)-x)\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\", \"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/(a+b*x),1/b*log(a+b*x))\", \"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\", \"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\", \"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\", \"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\", \"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\", \"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\", \"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\", \"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\", \"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\", \"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\", \"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\", \"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\", \"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\", \"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\", \"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\", \"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\", \"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\", \"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\", \"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\", \"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\", \"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\", \"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\", \"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\", \"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\", \"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\", \"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\", \"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\", \"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\", \"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\", \"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\", \"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\", \"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\", \"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\", \"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\", \"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\", \"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\", \"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\", \"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\", \"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\", \"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\", \"f(sin(a*x),-cos(a*x)/a)\", \"f(cos(a*x),sin(a*x)/a)\", \"f(tan(a*x),-log(cos(a*x))/a)\", \"f(1/tan(a*x),log(sin(a*x))/a)\", \"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\", \"f(1/sin(a*x),log(tan(a*x/2))/a)\", \"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\", \"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", \"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\", \"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", \"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\", \"f(1/cos(a*x)^2,tan(a*x)/a)\", \"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\", \"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\", \"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\", \"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\", \"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\", \"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\", \"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\", \"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\", \"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\", \"f(sin(a+b*x),-cos(a+b*x)/b)\", \"f(cos(a+b*x),sin(a+b*x)/b)\", \"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\", \"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\", \"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\", \"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\", \"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\", \"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\", \"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\", \"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\", \"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\", \"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\", \"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\", \"f(1/x*1/(a+log(x)),log(a+log(x)))\", \"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\", \"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\", \"f(sinh(x),cosh(x))\", \"f(cosh(x),sinh(x))\", \"f(tanh(x),log(cosh(x)))\", \"f(x*sinh(x),x*cosh(x)-sinh(x))\", \"f(x*cosh(x),x*sinh(x)-cosh(x))\", \"f(sinh(x)^2,sinh(2*x)/4-x/2)\", \"f(tanh(x)^2,x-tanh(x))\", \"f(cosh(x)^2,sinh(2*x)/4+x/2)\", \"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\", \"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\", \"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\", \"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\", \"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\", \"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\", \"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\", \"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\", \"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\", \"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\", 0];\n\n  Eval_integral = function () {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n\n    while (1) {\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n\n        if (isNaN(n)) {\n          stop(\"nth integral: check n\");\n        }\n      } else {\n        n = 1;\n      }\n\n      push(p3);\n\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          integral();\n        }\n      } else {\n        n = -n;\n\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          derivative();\n        }\n      }\n\n      p3 = pop();\n\n      if (p5 === symbol(NIL)) {\n        break;\n      }\n\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n\n        if (p5 === symbol(NIL)) {\n          break;\n        }\n\n        if (isNumericAtom(p5)) {\n          doNothing = 1;\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop();\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n      }\n    }\n\n    return push(p3);\n  };\n\n  integral = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      integral_of_sum();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      integral_of_product();\n    } else {\n      integral_of_form();\n    }\n\n    p1 = pop();\n\n    if (Find(p1, symbol(INTEGRAL))) {\n      stop(\"integral: sorry, could not find a solution\");\n    }\n\n    push(p1);\n    simplify();\n    Eval();\n    return restore();\n  };\n\n  integral_of_sum = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    push(p2);\n    integral();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      integral();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  integral_of_product = function () {\n    push(p1);\n    push(p2);\n    partition();\n    p1 = pop();\n    integral_of_form();\n    return multiply();\n  };\n\n  integral_of_form = function () {\n    var hc, tab;\n    hc = italu_hashcode(p1, p2).toFixed(6);\n    tab = hashed_itab[hc];\n\n    if (!tab) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    push(p1);\n    push(p2);\n    transform(tab, false);\n    p3 = pop();\n\n    if (p3 === symbol(NIL)) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(p3);\n    }\n  };\n\n  hashcode_values = {\n    'x': 0.95532,\n    'constexp': 1.43762,\n    'constant': 1.14416593629414332,\n    'constbase': 1.20364122304218824,\n    'sin': 1.73305482518303221,\n    'arcsin': 1.6483368529465804,\n    'cos': 1.058672123686340116,\n    'arccos': 1.8405225918106694,\n    'tan': 1.12249437762925064,\n    'arctan': 1.1297397925394962,\n    'sinh': 1.8176164926060078,\n    'cosh': 1.9404934661708022,\n    'tanh': 1.6421307715103121,\n    'log': 1.47744370135492387,\n    'erf': 1.0825269225702916\n  };\n\n  italu_hashcode = function (u, x) {\n    var half;\n\n    if (issymbol(u)) {\n      if (equal(u, x)) {\n        return hashcode_values.x;\n      } else {\n        return hashcode_values.constant;\n      }\n    } else if (iscons(u)) {\n      switch (symnum(car(u))) {\n        case ADD:\n          return hash_addition(cdr(u), x);\n\n        case MULTIPLY:\n          return hash_multiplication(cdr(u), x);\n\n        case POWER:\n          return hash_power(cadr(u), caddr(u), x);\n\n        case EXP:\n          return hash_power(symbol(E), cadr(u), x);\n\n        case SQRT:\n          push_double(0.5);\n          half = pop();\n          return hash_power(cadr(u), half, x);\n\n        default:\n          return hash_function(u, x);\n      }\n    }\n\n    return hashcode_values.constant;\n  };\n\n  hash_function = function (u, x) {\n    var arg_hash, base, name;\n\n    if (!Find(cadr(u), x)) {\n      return hashcode_values.constant;\n    }\n\n    name = car(u);\n    arg_hash = italu_hashcode(cadr(u), x);\n    base = hashcode_values[name.printname];\n\n    if (!base) {\n      throw new Error('Unsupported function ' + name.printname);\n    }\n\n    return Math.pow(base, arg_hash);\n  };\n\n  hash_addition = function (terms, x) {\n    var k, sum, term, term_hash, term_set, v;\n    term_set = {};\n\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      term_hash = 0;\n\n      if (Find(term, x)) {\n        term_hash = italu_hashcode(term, x);\n      } else {\n        term_hash = hashcode_values.constant;\n      }\n\n      term_set[term_hash.toFixed(6)] = true;\n    }\n\n    sum = 0;\n\n    for (k in term_set) {\n      if (!hasProp.call(term_set, k)) continue;\n      v = term_set[k];\n      sum = sum + parseFloat(k, 10);\n    }\n\n    return sum;\n  };\n\n  hash_multiplication = function (terms, x) {\n    var product, term;\n    product = 1;\n\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n\n      if (Find(term, x)) {\n        product = product * italu_hashcode(term, x);\n      }\n    }\n\n    return product;\n  };\n\n  hash_power = function (base, power, x) {\n    var base_hash, exp_hash;\n    base_hash = hashcode_values.constant;\n    exp_hash = hashcode_values.constexp;\n\n    if (Find(base, x)) {\n      base_hash = italu_hashcode(base, x);\n    }\n\n    if (Find(power, x)) {\n      exp_hash = italu_hashcode(power, x);\n    } else {\n      if (base_hash === hashcode_values.constant) {\n        return hashcode_values.constant;\n      }\n\n      if (isminusone(power)) {\n        exp_hash = -1;\n      } else if (isoneovertwo(power)) {\n        exp_hash = 0.5;\n      } else if (isminusoneovertwo(power)) {\n        exp_hash = -0.5;\n      } else if (equalq(power, 2, 1)) {\n        exp_hash = 2;\n      } else if (equalq(power, -2, 1)) {\n        exp_hash = -2;\n      }\n    }\n\n    return Math.pow(base_hash, exp_hash);\n  };\n\n  make_hashed_itab = function () {\n    var f, h, key, len, o, s, tab, u;\n    tab = {};\n\n    for (o = 0, len = itab.length; o < len; o++) {\n      s = itab[o];\n\n      if (!s) {\n        break;\n      }\n\n      scan_meta(s);\n      f = pop();\n      u = cadr(f);\n      h = italu_hashcode(u, symbol(METAX));\n      key = h.toFixed(6);\n\n      if (!tab[key]) {\n        tab[key] = [];\n      }\n\n      tab[key].push(s);\n    }\n\n    console.log('hashed_itab = ' + JSON.stringify(tab, null, 2));\n    return tab;\n  };\n\n  $.make_hashed_itab = make_hashed_itab;\n  hashed_itab = {\n    \"1.144166\": [\"f(a,a*x)\"],\n    \"1.046770\": [\"f(1/x,log(x))\"],\n    \"0.936400\": [\"f(x^a,x^(a+1)/(a+1))\"],\n    \"1.095727\": [\"f(x^(-2),-x^(-1))\"],\n    \"1.023118\": [\"f(x^(-1/2),2*x^(1/2))\"],\n    \"0.977405\": [\"f(x^(1/2),2/3*x^(3/2))\"],\n    \"0.955320\": [\"f(x,x^2/2)\"],\n    \"0.912636\": [\"f(x^2,x^3/3)\"],\n    \"1.137302\": [\"f(exp(a*x),1/a*exp(a*x))\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\"],\n    \"1.326774\": [\"f(exp(a*x+b),1/a*exp(a*x+b))\"],\n    \"1.080259\": [\"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\"],\n    \"1.260228\": [\"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\"],\n    \"1.451902\": [\"f(log(a*x),x*log(a*x)-x)\"],\n    \"0.486192\": [\"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.697274\": [\"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\"],\n    \"0.476307\": [\"f(1/(a+b*x),1/b*log(a+b*x))\"],\n    \"0.226868\": [\"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\"],\n    \"2.904531\": [\"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\"],\n    \"0.455026\": [\"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\"],\n    \"0.216732\": [\"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\"],\n    \"0.434695\": [\"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\"],\n    \"0.207048\": [\"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\"],\n    \"2.650781\": [\"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\"],\n    \"0.498584\": [\"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\"],\n    \"0.237479\": [\"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\"],\n    \"3.040375\": [\"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\"],\n    \"0.521902\": [\"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\"],\n    \"0.446014\": [\"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\"],\n    \"0.248586\": [\"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\"],\n    \"0.464469\": [\"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\"],\n    \"0.443716\": [\"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\"],\n    \"0.236382\": [\"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\"],\n    \"0.508931\": [\"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\"],\n    \"0.532733\": [\"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\"],\n    \"0.480638\": [\"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\"],\n    \"0.438648\": [\"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\"],\n    \"0.459164\": [\"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.450070\": [\"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\"],\n    \"1.448960\": [\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\"],\n    \"1.384221\": [\"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\"],\n    \"1.322374\": [\"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\"],\n    \"1.516728\": [\"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.587665\": [\"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"0.690150\": [\"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\"],\n    \"0.659314\": [\"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\"],\n    \"0.629856\": [\"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\"],\n    \"0.722428\": [\"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\"],\n    \"0.756216\": [\"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.434156\": [\"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\"],\n    \"0.729886\": [\"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"1.501230\": [\"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"0.666120\": [\"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\"],\n    \"1.370077\": [\"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\"],\n    \"1.730087\": [\"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\"],\n    \"0.578006\": [\"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\"],\n    \"0.552180\": [\"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\"],\n    \"1.652787\": [\"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\"],\n    \"1.308862\": [\"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\"],\n    \"1.342944\": [\"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\"],\n    \"0.636358\": [\"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"0.652928\": [\"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\"],\n    \"0.764022\": [\"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\"],\n    \"1.578940\": [\"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\"],\n    \"1.620055\": [\"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\"],\n    \"0.332117\": [\"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\"],\n    \"1.571443\": [\"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"1.690994\": [\"f(sin(a*x),-cos(a*x)/a)\"],\n    \"1.055979\": [\"f(cos(a*x),sin(a*x)/a)\"],\n    \"1.116714\": [\"f(tan(a*x),-log(cos(a*x))/a)\"],\n    \"0.895484\": [\"f(1/tan(a*x),log(sin(a*x))/a)\"],\n    \"0.946989\": [\"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\"],\n    \"0.591368\": [\"f(1/sin(a*x),log(tan(a*x/2))/a)\"],\n    \"2.859462\": [\"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\"],\n    \"2.128050\": [\"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"1.115091\": [\"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\"],\n    \"1.081452\": [\"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"0.349716\": [\"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\"],\n    \"0.896788\": [\"f(1/cos(a*x)^2,tan(a*x)/a)\"],\n    \"1.785654\": [\"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\"],\n    \"3.188560\": [\"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\"],\n    \"1.516463\": [\"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\"],\n    \"2.707879\": [\"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\"],\n    \"0.369293\": [\"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\"],\n    \"0.560019\": [\"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\"],\n    \"0.530332\": [\"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\"],\n    \"0.331177\": [\"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\"],\n    \"0.313621\": [\"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\"],\n    \"3.172365\": [\"f(sin(a+b*x),-cos(a+b*x)/b)\"],\n    \"1.127162\": [\"f(cos(a+b*x),sin(a+b*x)/b)\"],\n    \"0.352714\": [\"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\"],\n    \"0.454515\": [\"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\"],\n    \"1.615441\": [\"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\"],\n    \"1.543263\": [\"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\"],\n    \"1.008798\": [\"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\"],\n    \"0.963724\": [\"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\"],\n    \"1.611938\": [\"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\"],\n    \"1.791033\": [\"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\"],\n    \"1.123599\": [\"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\"],\n    \"1.387031\": [\"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\"],\n    \"1.325058\": [\"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\"],\n    \"2.108018\": [\"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\"],\n    \"0.403214\": [\"f(1/x*1/(a+log(x)),log(a+log(x)))\"],\n    \"2.269268\": [\"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\"],\n    \"2.486498\": [\"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\"],\n    \"1.769733\": [\"f(sinh(x),cosh(x))\"],\n    \"1.883858\": [\"f(cosh(x),sinh(x))\"],\n    \"1.606140\": [\"f(tanh(x),log(cosh(x)))\"],\n    \"1.690661\": [\"f(x*sinh(x),x*cosh(x)-sinh(x))\"],\n    \"1.799688\": [\"f(x*cosh(x),x*sinh(x)-cosh(x))\"],\n    \"3.131954\": [\"f(sinh(x)^2,sinh(2*x)/4-x/2)\"],\n    \"2.579685\": [\"f(tanh(x)^2,x-tanh(x))\"],\n    \"3.548923\": [\"f(cosh(x)^2,sinh(2*x)/4+x/2)\"],\n    \"1.058866\": [\"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\"],\n    \"1.235270\": [\"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\"],\n    \"1.130783\": [\"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\"],\n    \"1.078698\": [\"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\"],\n    \"2.573650\": [\"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\"],\n    \"2.640666\": [\"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\"],\n    \"1.086487\": [\"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\"],\n    \"1.267493\": [\"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\"],\n    \"1.037943\": [\"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.210862\": [\"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.064970\": [\"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\"],\n    \"1.242392\": [\"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\"]\n  };\n\n  INV_check_arg = function () {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  inv = function () {\n    var accumulator, eachEntry, i, n, o, ref;\n    i = 0;\n    n = 0;\n    save();\n    p1 = pop();\n\n    if (isinv(p1)) {\n      push(car(cdr(p1)));\n      restore();\n      return;\n    }\n\n    if (isidentitymatrix(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n\n      while (iscons(p1)) {\n        accumulator.push(car(p1));\n        p1 = cdr(p1);\n      }\n\n      for (eachEntry = o = ref = accumulator.length - 1; ref <= 0 ? o <= 0 : o >= 0; eachEntry = ref <= 0 ? ++o : --o) {\n        push(accumulator[eachEntry]);\n        inv();\n\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n\n      restore();\n      return;\n    }\n\n    if (INV_check_arg() === 0) {\n      push_symbol(INV);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    if (isNumericAtomOrTensor(p1)) {\n      yyinvg();\n    } else {\n      push(p1);\n      adj();\n      push(p1);\n      det();\n      p2 = pop();\n\n      if (isZeroAtomOrTensor(p2)) {\n        stop(\"inverse of singular matrix\");\n      }\n\n      push(p2);\n      divide();\n    }\n\n    return restore();\n  };\n\n  invg = function () {\n    save();\n    p1 = pop();\n\n    if (INV_check_arg() === 0) {\n      push_symbol(INVG);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    yyinvg();\n    return restore();\n  };\n\n  yyinvg = function () {\n    var h, i, i1, j, j1, l1, n, o, ref, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    h = tos;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i === j) {\n          push(one);\n        } else {\n          push(zero);\n        }\n      }\n    }\n\n    for (i = j1 = 0, ref2 = n * n; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      push(p1.tensor.elem[i]);\n    }\n\n    INV_decomp(n);\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n\n    for (i = l1 = 0, ref3 = n * n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(tos - 2 * n * n);\n    return push(p1);\n  };\n\n  INV_decomp = function (n) {\n    var a, d, i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4, results, u;\n    a = 0;\n    d = 0;\n    i = 0;\n    j = 0;\n    u = 0;\n    a = tos - n * n;\n    u = a - n * n;\n    results = [];\n\n    for (d = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      if (equal(stack[a + n * d + d], zero)) {\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(stack[a + n * i + d], zero)) {\n            break;\n          }\n        }\n\n        if (i === n) {\n          stop(\"inverse of singular matrix\");\n        }\n\n        for (j = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; j = 0 <= ref3 ? ++j1 : --j1) {\n          p2 = stack[a + n * d + j];\n          stack[a + n * d + j] = stack[a + n * i + j];\n          stack[a + n * i + j] = p2;\n          p2 = stack[u + n * d + j];\n          stack[u + n * d + j] = stack[u + n * i + j];\n          stack[u + n * i + j] = p2;\n        }\n      }\n\n      p2 = stack[a + n * d + d];\n\n      for (j = l1 = 0, ref4 = n; 0 <= ref4 ? l1 < ref4 : l1 > ref4; j = 0 <= ref4 ? ++l1 : --l1) {\n        if (j > d) {\n          push(stack[a + n * d + j]);\n          push(p2);\n          divide();\n          stack[a + n * d + j] = pop();\n        }\n\n        push(stack[u + n * d + j]);\n        push(p2);\n        divide();\n        stack[u + n * d + j] = pop();\n      }\n\n      results.push(function () {\n        var m1, ref5, results1;\n        results1 = [];\n\n        for (i = m1 = 0, ref5 = n; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n          if (i === d) {\n            continue;\n          }\n\n          p2 = stack[a + n * i + d];\n          results1.push(function () {\n            var n1, ref6, results2;\n            results2 = [];\n\n            for (j = n1 = 0, ref6 = n; 0 <= ref6 ? n1 < ref6 : n1 > ref6; j = 0 <= ref6 ? ++n1 : --n1) {\n              if (j > d) {\n                push(stack[a + n * i + j]);\n                push(stack[a + n * d + j]);\n                push(p2);\n                multiply();\n                subtract();\n                stack[a + n * i + j] = pop();\n              }\n\n              push(stack[u + n * i + j]);\n              push(stack[u + n * d + j]);\n              push(p2);\n              multiply();\n              subtract();\n              results2.push(stack[u + n * i + j] = pop());\n            }\n\n            return results2;\n          }());\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  };\n\n  DEBUG_IS = false;\n\n  isZeroAtom = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MZERO(p.q.a)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === 0.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isZeroTensor = function (p) {\n    var i, o, ref;\n\n    if (p.k !== TENSOR) {\n      return 0;\n    }\n\n    for (i = o = 0, ref = p.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isZeroAtomOrTensor(p.tensor.elem[i])) {\n        return 0;\n      }\n    }\n\n    return 1;\n  };\n\n  isZeroAtomOrTensor = function (p) {\n    return isZeroAtom(p) || isZeroTensor(p);\n  };\n\n  isZeroLikeOrNonZeroLikeOrUndetermined = function (valueOrPredicate) {\n    var evalledArgument;\n    push(valueOrPredicate);\n    Eval_predicate();\n    evalledArgument = pop();\n\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n\n    push(evalledArgument);\n    zzfloat();\n    evalledArgument = pop();\n\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n\n    if (Find(evalledArgument, imaginaryunit)) {\n      push(evalledArgument);\n      absValFloat();\n      Eval_predicate();\n      evalledArgument = pop();\n\n      if (isZeroAtomOrTensor(evalledArgument)) {\n        return 0;\n      }\n\n      if (isNumericAtomOrTensor(evalledArgument)) {\n        return 1;\n      }\n    }\n\n    return null;\n  };\n\n  isnegativenumber = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === -1) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d < 0.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  ispositivenumber = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === 1) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d > 0.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isplustwo = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 2) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === 2.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isplusone = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === 1.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isminusone = function (p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, -1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === -1.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isone = function (p) {\n    return isplusone(p) || isminusone(p);\n  };\n\n  isinteger = function (p) {\n    if (p.k === NUM && MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isintegerorintegerfloat = function (p) {\n    if (p.k === DOUBLE) {\n      if (p.d === Math.round(p.d)) {\n        return 1;\n      }\n\n      return 0;\n    }\n\n    return isinteger(p);\n  };\n\n  isnonnegativeinteger = function (p) {\n    if (isrational(p) && MEQUAL(p.q.b, 1) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isposint = function (p) {\n    if (isinteger(p) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isunivarpolyfactoredorexpandedform = function (p, x) {\n    if (x == null) {\n      push(p);\n      guess();\n      x = pop();\n      pop();\n    }\n\n    if (ispolyfactoredorexpandedform(p, x) && Find(p, symbol(SYMBOL_X)) + Find(p, symbol(SYMBOL_Y)) + Find(p, symbol(SYMBOL_Z)) === 1) {\n      return x;\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyfactoredorexpandedform = function (p, x) {\n    return ispolyfactoredorexpandedform_factor(p, x);\n  };\n\n  ispolyfactoredorexpandedform_factor = function (p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (DEBUG) {\n          console.log(\"ispolyfactoredorexpandedform_factor testing \" + car(p));\n        }\n\n        if (!ispolyfactoredorexpandedform_power(car(p), x)) {\n          if (DEBUG) {\n            console.log(\"... tested negative:\" + car(p));\n          }\n\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyfactoredorexpandedform_power(p, x);\n    }\n  };\n\n  ispolyfactoredorexpandedform_power = function (p, x) {\n    if (car(p) === symbol(POWER)) {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power (isposint(caddr(p)) \" + (isposint(caddr(p)), DEBUG ? console.log(\"ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) \" + ispolyexpandedform_expr(cadr(p), x)) : void 0));\n      }\n\n      return isposint(caddr(p)) && ispolyexpandedform_expr(cadr(p), x);\n    } else {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power not a power, testing if this is exp form: \" + p);\n      }\n\n      return ispolyexpandedform_expr(p, x);\n    }\n  };\n\n  ispolyexpandedform = function (p, x) {\n    if (Find(p, x)) {\n      return ispolyexpandedform_expr(p, x);\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyexpandedform_expr = function (p, x) {\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (!ispolyexpandedform_term(car(p), x)) {\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyexpandedform_term(p, x);\n    }\n  };\n\n  ispolyexpandedform_term = function (p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (!ispolyexpandedform_factor(car(p), x)) {\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyexpandedform_factor(p, x);\n    }\n  };\n\n  ispolyexpandedform_factor = function (p, x) {\n    if (equal(p, x)) {\n      return 1;\n    }\n\n    if (car(p) === symbol(POWER) && equal(cadr(p), x)) {\n      if (isposint(caddr(p))) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n    if (Find(p, x)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  isnegativeterm = function (p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    } else if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  hasNegativeRationalExponent = function (p) {\n    if (car(p) === symbol(POWER) && isrational(car(cdr(cdr(p)))) && isnegativenumber(car(cdr(p)))) {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has imaginary component\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has NO imaginary component\");\n      }\n\n      return 0;\n    }\n  };\n\n  isimaginarynumberdouble = function (p) {\n    if (car(p) === symbol(MULTIPLY) && length(p) === 3 && isdouble(cadr(p)) && hasNegativeRationalExponent(caddr(p)) || equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isimaginarynumber = function (p) {\n    if (car(p) === symbol(MULTIPLY) && length(p) === 3 && isNumericAtom(cadr(p)) && equal(caddr(p), imaginaryunit) || equal(p, imaginaryunit) || hasNegativeRationalExponent(caddr(p))) {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" isn't an imaginary number\");\n      }\n\n      return 0;\n    }\n  };\n\n  iscomplexnumberdouble = function (p) {\n    if (car(p) === symbol(ADD) && length(p) === 3 && isdouble(cadr(p)) && isimaginarynumberdouble(caddr(p)) || isimaginarynumberdouble(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  iscomplexnumber = function (p) {\n    if (DEBUG_IS) {\n      debugger;\n    }\n\n    if (car(p) === symbol(ADD) && length(p) === 3 && isNumericAtom(cadr(p)) && isimaginarynumber(caddr(p)) || isimaginarynumber(p)) {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 0;\n    }\n  };\n\n  iseveninteger = function (p) {\n    if (isinteger(p) && p.q.a.isEven()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isnegative = function (p) {\n    if (car(p) === symbol(ADD) && isnegativeterm(cadr(p))) {\n      return 1;\n    } else if (isnegativeterm(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  issymbolic = function (p) {\n    if (issymbol(p)) {\n      return 1;\n    } else {\n      while (iscons(p)) {\n        if (issymbolic(car(p))) {\n          return 1;\n        }\n\n        p = cdr(p);\n      }\n\n      return 0;\n    }\n  };\n\n  isintegerfactor = function (p) {\n    if (isinteger(p) || car(p) === symbol(POWER) && isinteger(cadr(p)) && isinteger(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isNumberOneOverSomething = function (p) {\n    if (isfraction(p) && MEQUAL(p.q.a.abs(), 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isoneover = function (p) {\n    if (car(p) === symbol(POWER) && isminusone(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isfraction = function (p) {\n    if (p.k === NUM && !MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  equaln = function (p, n) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, n) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === n) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  equalq = function (p, a, b) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, a) && MEQUAL(p.q.b, b)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === a / b) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isoneovertwo = function (p) {\n    if (equalq(p, 1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isminusoneovertwo = function (p) {\n    if (equalq(p, -1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isoneoversqrttwo = function (p) {\n    if (car(p) === symbol(POWER) && equaln(cadr(p), 2) && equalq(caddr(p), -1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isminusoneoversqrttwo = function (p) {\n    if (car(p) === symbol(MULTIPLY) && equaln(cadr(p), -1) && isoneoversqrttwo(caddr(p)) && length(p) === 3) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isfloating = function (p) {\n    if (p.k === DOUBLE || p === symbol(FLOATF)) {\n      return 1;\n    }\n\n    while (iscons(p)) {\n      if (isfloating(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  isimaginaryunit = function (p) {\n    if (equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isquarterturn = function (p) {\n    var minussign, n;\n    n = 0;\n    minussign = 0;\n\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n\n    if (equal(cadr(p), imaginaryunit)) {\n      if (caddr(p) !== symbol(PI)) {\n        return 0;\n      }\n\n      if (length(p) !== 3) {\n        return 0;\n      }\n\n      return 2;\n    }\n\n    if (!isNumericAtom(cadr(p))) {\n      return 0;\n    }\n\n    if (!equal(caddr(p), imaginaryunit)) {\n      return 0;\n    }\n\n    if (cadddr(p) !== symbol(PI)) {\n      return 0;\n    }\n\n    if (length(p) !== 4) {\n      return 0;\n    }\n\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      return 0;\n    }\n\n    if (n < 1) {\n      minussign = 1;\n      n = -n;\n    }\n\n    switch (n % 4) {\n      case 0:\n        n = 1;\n        break;\n\n      case 1:\n        if (minussign) {\n          n = 4;\n        } else {\n          n = 3;\n        }\n\n        break;\n\n      case 2:\n        n = 2;\n        break;\n\n      case 3:\n        if (minussign) {\n          n = 3;\n        } else {\n          n = 4;\n        }\n\n    }\n\n    return n;\n  };\n\n  isnpi = function (p) {\n    var doNothing, n;\n    n = 0;\n\n    if (p === symbol(PI)) {\n      return 2;\n    }\n\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && caddr(p) === symbol(PI) && length(p) === 3) {\n      doNothing = 0;\n    } else {\n      return 0;\n    }\n\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      return 0;\n    }\n\n    if (n < 0) {\n      n = 4 - -n % 4;\n    } else {\n      n = 1 + (n - 1) % 4;\n    }\n\n    return n;\n  };\n\n  $.isZeroAtomOrTensor = isZeroAtomOrTensor;\n  $.isnegativenumber = isnegativenumber;\n  $.isplusone = isplusone;\n  $.isminusone = isminusone;\n  $.isinteger = isinteger;\n  $.isnonnegativeinteger = isnonnegativeinteger;\n  $.isposint = isposint;\n  $.isnegativeterm = isnegativeterm;\n  $.isimaginarynumber = isimaginarynumber;\n  $.iscomplexnumber = iscomplexnumber;\n  $.iseveninteger = iseveninteger;\n  $.isnegative = isnegative;\n  $.issymbolic = issymbolic;\n  $.isintegerfactor = isintegerfactor;\n  $.isoneover = isoneover;\n  $.isfraction = isfraction;\n  $.isoneoversqrttwo = isoneoversqrttwo;\n  $.isminusoneoversqrttwo = isminusoneoversqrttwo;\n  $.isfloating = isfloating;\n  $.isimaginaryunit = isimaginaryunit;\n  $.isquarterturn = isquarterturn;\n  $.isnpi = isnpi;\n\n  Eval_isprime = function () {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (isnonnegativeinteger(p1) && mprime(p1.q.a)) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n  /*\n   Laguerre function\n  \n  Example\n  \n    laguerre(x,3)\n  \n  Result\n  \n       1   3    3   2\n    - --- x  + --- x  - 3 x + 1\n       6        2\n  \n  The computation uses the following recurrence relation.\n  \n    L(x,0,k) = 1\n  \n    L(x,1,k) = -x + k + 1\n  \n    n*L(x,n,k) = (2*(n-1)+1-x+k)*L(x,n-1,k) - (n-1+k)*L(x,n-2,k)\n  \n  In the \"for\" loop i = n-1 so the recurrence relation becomes\n  \n    (i+1)*L(x,n,k) = (2*i+1-x+k)*L(x,n-1,k) - (i+k)*L(x,n-2,k)\n   */\n\n\n  Eval_laguerre = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n\n    return laguerre();\n  };\n\n  laguerre = function () {\n    var n;\n    n = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(LAGUERRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      restore();\n      return;\n    }\n\n    if (issymbol(p1)) {\n      laguerre2(n);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      laguerre2(n);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n\n    return restore();\n  };\n\n  laguerre2 = function (n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      subtract();\n      push(p3);\n      add();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p3);\n      add();\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      results.push(divide());\n    }\n\n    return results;\n  };\n\n  Eval_lcm = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      lcm();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  lcm = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    yylcm();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yylcm = function () {\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    gcd();\n    push(p1);\n    divide();\n    push(p2);\n    divide();\n    return inverse();\n  };\n  /*\n   Return the leading coefficient of a polynomial.\n  \n  Example\n  \n    leading(5x^2+x+1,x)\n  \n  Result\n  \n    5\n  \n  The result is undefined if P is not a polynomial.\n   */\n\n\n  Eval_leading = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    return leading();\n  };\n\n  leading = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    degree();\n    p3 = pop();\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    filter();\n    return restore();\n  };\n  /*\n   Legendre function\n  \n  Example\n  \n    legendre(x,3,0)\n  \n  Result\n  \n     5   3    3\n    --- x  - --- x\n     2        2\n  \n  The computation uses the following recurrence relation.\n  \n    P(x,0) = 1\n  \n    P(x,1) = x\n  \n    n*P(x,n) = (2*(n-1)+1)*x*P(x,n-1) - (n-1)*P(x,n-2)\n  \n  In the \"for\" loop we have i = n-1 so the recurrence relation becomes\n  \n    (i+1)*P(x,n) = (2*i+1)*x*P(x,n-1) - i*P(x,n-2)\n  \n  For m > 0\n  \n    P(x,n,m) = (-1)^m * (1-x^2)^(m/2) * d^m/dx^m P(x,n)\n   */\n\n\n  Eval_legendre = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n\n    return legendre();\n  };\n\n  legendre = function () {\n    save();\n\n    __legendre();\n\n    return restore();\n  };\n\n  __legendre = function () {\n    var m, n;\n    m = 0;\n    n = 0;\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    push(p3);\n    m = pop_integer();\n\n    if (n < 0 || isNaN(n) || m < 0 || isNaN(m)) {\n      push_symbol(LEGENDRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      return;\n    }\n\n    if (issymbol(p1)) {\n      __legendre2(n, m);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n\n      __legendre2(n, m);\n\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n\n    return __legendre3(m);\n  };\n\n  __legendre2 = function (n, m) {\n    var i, i1, o, ref, ref1, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      multiply();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      divide();\n    }\n\n    results = [];\n\n    for (i = i1 = 0, ref1 = m; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1);\n      results.push(derivative());\n    }\n\n    return results;\n  };\n\n  __legendre3 = function (m) {\n    if (m === 0) {\n      return;\n    }\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      sine();\n      square();\n    } else if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      cosine();\n      square();\n    } else {\n      push_integer(1);\n      push(p1);\n      square();\n      subtract();\n    }\n\n    push_integer(m);\n    push_rational(1, 2);\n    multiply();\n    power();\n    multiply();\n\n    if (m % 2) {\n      return negate();\n    }\n  };\n\n  list = function (n) {\n    var listIterator, o, ref, results;\n    listIterator = 0;\n    push(symbol(NIL));\n    results = [];\n\n    for (listIterator = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; listIterator = 0 <= ref ? ++o : --o) {\n      results.push(cons());\n    }\n\n    return results;\n  };\n\n  Eval_log = function () {\n    push(cadr(p1));\n    Eval();\n    return logarithm();\n  };\n\n  logarithm = function () {\n    save();\n    yylog();\n    return restore();\n  };\n\n  yylog = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (p1 === symbol(E)) {\n      push_integer(1);\n      return;\n    }\n\n    if (equaln(p1, 1)) {\n      push_integer(0);\n      return;\n    }\n\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      logarithm();\n      push(imaginaryunit);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      multiply();\n      add();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.log(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isfraction(p1)) {\n      push(p1);\n      numerator();\n      logarithm();\n      push(p1);\n      denominator();\n      logarithm();\n      subtract();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER)) {\n      push(caddr(p1));\n      push(cadr(p1));\n      logarithm();\n      multiply();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        logarithm();\n        add();\n        p1 = cdr(p1);\n      }\n\n      return;\n    }\n\n    push_symbol(LOG);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_lookup = function () {\n    p1 = cadr(p1);\n\n    if (!iscons(p1) && cadr(p1).k === SYM) {\n      p1 = get_binding(p1);\n    }\n\n    return push(p1);\n  };\n\n  madd = function (a, b) {\n    return a.add(b);\n  };\n\n  msub = function (a, b) {\n    return a.subtract(b);\n  };\n\n  addf = function (a, b) {\n    return a.add(b);\n  };\n\n  subf = function (a, b) {\n    return a.subtract(b);\n  };\n\n  ucmp = function (a, b) {\n    return a.compareAbs(b);\n  };\n\n  mgcd = function (u, v) {\n    return bigInt.gcd(u, v);\n  };\n\n  new_string = function (s) {\n    save();\n    p1 = new U();\n    p1.k = STR;\n    p1.str = s;\n    push(p1);\n    return restore();\n  };\n\n  out_of_memory = function () {\n    return stop(\"out of memory\");\n  };\n\n  push_zero_matrix = function (i, j) {\n    push(alloc_tensor(i * j));\n    stack[tos - 1].tensor.ndim = 2;\n    stack[tos - 1].tensor.dim[0] = i;\n    return stack[tos - 1].tensor.dim[1] = j;\n  };\n\n  push_identity_matrix = function (n) {\n    var i, o, ref;\n    push_zero_matrix(n, n);\n    i = 0;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[tos - 1].tensor.elem[i * n + i] = one;\n    }\n\n    return check_tensor_dimensions(stack[tos - 1]);\n  };\n\n  push_cars = function (p) {\n    var results;\n    results = [];\n\n    while (iscons(p)) {\n      push(car(p));\n      results.push(p = cdr(p));\n    }\n\n    return results;\n  };\n\n  peek = function () {\n    save();\n    p1 = pop();\n    push(p1);\n    return restore();\n  };\n\n  equal = function (p1, p2) {\n    if (cmp_expr(p1, p2) === 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  lessp = function (p1, p2) {\n    if (cmp_expr(p1, p2) < 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  sign = function (n) {\n    if (n < 0) {\n      return -1;\n    } else if (n > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  cmp_expr = function (p1, p2) {\n    var n;\n    n = 0;\n\n    if (p1 === p2) {\n      return 0;\n    }\n\n    if (p1 === symbol(NIL)) {\n      return -1;\n    }\n\n    if (p2 === symbol(NIL)) {\n      return 1;\n    }\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      return sign(compare_numbers(p1, p2));\n    }\n\n    if (isNumericAtom(p1)) {\n      return -1;\n    }\n\n    if (isNumericAtom(p2)) {\n      return 1;\n    }\n\n    if (isstr(p1) && isstr(p2)) {\n      return sign(strcmp(p1.str, p2.str));\n    }\n\n    if (isstr(p1)) {\n      return -1;\n    }\n\n    if (isstr(p2)) {\n      return 1;\n    }\n\n    if (issymbol(p1) && issymbol(p2)) {\n      return sign(strcmp(get_printname(p1), get_printname(p2)));\n    }\n\n    if (issymbol(p1)) {\n      return -1;\n    }\n\n    if (issymbol(p2)) {\n      return 1;\n    }\n\n    if (istensor(p1) && istensor(p2)) {\n      return compare_tensors(p1, p2);\n    }\n\n    if (istensor(p1)) {\n      return -1;\n    }\n\n    if (istensor(p2)) {\n      return 1;\n    }\n\n    while (iscons(p1) && iscons(p2)) {\n      n = cmp_expr(car(p1), car(p2));\n\n      if (n !== 0) {\n        return n;\n      }\n\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n\n    if (iscons(p2)) {\n      return -1;\n    }\n\n    if (iscons(p1)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  length = function (p) {\n    var n;\n    n = 0;\n\n    while (iscons(p)) {\n      p = cdr(p);\n      n++;\n    }\n\n    return n;\n  };\n\n  unique = function (p) {\n    save();\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    unique_f(p);\n\n    if (p2 !== symbol(NIL)) {\n      p1 = symbol(NIL);\n    }\n\n    p = p1;\n    restore();\n    return p;\n  };\n\n  unique_f = function (p) {\n    if (isstr(p)) {\n      if (p1 === symbol(NIL)) {\n        p1 = p;\n      } else if (p !== p1) {\n        p2 = p;\n      }\n\n      return;\n    }\n\n    while (iscons(p)) {\n      unique_f(car(p));\n\n      if (p2 !== symbol(NIL)) {\n        return;\n      }\n\n      p = cdr(p);\n    }\n  };\n\n  ssqrt = function () {\n    push_rational(1, 2);\n    return power();\n  };\n\n  yyexpand = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  exponential = function () {\n    push_symbol(E);\n    swap();\n    return power();\n  };\n\n  square = function () {\n    push_integer(2);\n    return power();\n  };\n\n  sort_stack = function (n) {\n    var h, subsetOfStack;\n    h = tos - n;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    return stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n  };\n\n  $.equal = equal;\n  $.length = length;\n\n  mmul = function (a, b) {\n    return a.multiply(b);\n  };\n\n  mdiv = function (a, b) {\n    return a.divide(b);\n  };\n  /*\n  static void\n  addf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # can be signed or unsigned \n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] + b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n  \n  // a = a - b\n  \n  static void\n  subf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # must be signed\n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] - b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n  \n  // a = b * c\n  \n  // 0xffffffff + 0xffffffff * 0xffffffff == 0xffffffff00000000\n  \n  static void\n  mulf(unsigned int *a, unsigned int *b, int len, unsigned int c)\n  {\n    int i\n    unsigned long long t = 0; # must be unsigned\n    for (i = 0; i < len; i++) {\n      t += (unsigned long long) b[i] * c\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n    a[i] = (unsigned int) t\n  }\n   */\n\n\n  mmod = function (a, b) {\n    return a.mod(b);\n  };\n\n  mdivrem = function (a, b) {\n    var toReturn;\n    toReturn = a.divmod(b);\n    return [toReturn.quotient, toReturn.remainder];\n  };\n\n  Eval_mod = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return mod();\n  };\n\n  mod = function () {\n    var n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"mod function: divide by zero\");\n    }\n\n    if (!isNumericAtom(p1) || !isNumericAtom(p2)) {\n      push_symbol(MOD);\n      push(p1);\n      push(p2);\n      list(3);\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      push(p1);\n      n = pop_integer();\n\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n\n      push_integer(n);\n      p1 = pop();\n    }\n\n    if (isdouble(p2)) {\n      push(p2);\n      n = pop_integer();\n\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n\n      push_integer(n);\n      p2 = pop();\n    }\n\n    if (!isinteger(p1) || !isinteger(p2)) {\n      stop(\"mod function: integer arguments expected\");\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mmod(p1.q.a, p2.q.a);\n    p3.q.b = mint(1);\n    push(p3);\n    return restore();\n  };\n\n  mpow = function (a, n) {\n    return a.pow(n);\n  };\n\n  mprime = function (n) {\n    return n.isProbablePrime();\n  };\n\n  mroot = function (n, index) {\n    var i, j, k, o, ref, x, y;\n    n = n.abs();\n    i = 0;\n    j = 0;\n    k = 0;\n\n    if (index === 0) {\n      stop(\"root index is zero\");\n    }\n\n    k = 0;\n\n    while (n.shiftRight(k) > 0) {\n      k++;\n    }\n\n    if (k === 0) {\n      return mint(0);\n    }\n\n    k = Math.floor((k - 1) / index);\n    j = Math.floor(k / 32 + 1);\n    x = bigInt(j);\n\n    for (i = o = 0, ref = j; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      x = x.and(bigInt(1).shiftLeft(i).not());\n    }\n\n    while (k >= 0) {\n      x = x.or(bigInt(1).shiftLeft(k));\n      y = mpow(x, index);\n\n      switch (mcmp(y, n)) {\n        case 0:\n          return x;\n\n        case 1:\n          x = x.and(bigInt(1).shiftLeft(k).not());\n      }\n\n      k--;\n    }\n\n    return 0;\n  };\n\n  Eval_multiply = function () {\n    var results;\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      multiply();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  multiply = function () {\n    if (esc_flag) {\n      stop(\"escape key stop\");\n    }\n\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply_numbers();\n    } else {\n      save();\n      yymultiply();\n      return restore();\n    }\n  };\n\n  yymultiply = function () {\n    var h, i, n, o, ref, ref1;\n    h = 0;\n    i = 0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n\n    if (isZeroAtom(p1) || isZeroAtom(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      return;\n    }\n\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        multiply();\n        add();\n        p1 = cdr(p1);\n      }\n\n      return;\n    }\n\n    if (expanding && isadd(p2)) {\n      p2 = cdr(p2);\n\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      while (iscons(p2)) {\n        push(p1);\n        push(car(p2));\n        multiply();\n        add();\n        p2 = cdr(p2);\n      }\n\n      return;\n    }\n\n    if (!istensor(p1) && istensor(p2)) {\n      push(p1);\n      push(p2);\n      scalar_times_tensor();\n      return;\n    }\n\n    if (istensor(p1) && !istensor(p2)) {\n      push(p1);\n      push(p2);\n      tensor_times_scalar();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n    } else {\n      push(p1);\n      list(1);\n      p1 = pop();\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n    } else {\n      push(p2);\n      list(1);\n      p2 = pop();\n    }\n\n    if (isNumericAtom(car(p1)) && isNumericAtom(car(p2))) {\n      push(car(p1));\n      push(car(p2));\n      multiply_numbers();\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    } else if (isNumericAtom(car(p1))) {\n      push(car(p1));\n      p1 = cdr(p1);\n    } else if (isNumericAtom(car(p2))) {\n      push(car(p2));\n      p2 = cdr(p2);\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n    }\n\n    parse_p1();\n    parse_p2();\n\n    while (iscons(p1) && iscons(p2)) {\n      if (caar(p1) === symbol(OPERATOR) && caar(p2) === symbol(OPERATOR)) {\n        push_symbol(OPERATOR);\n        push(cdar(p1));\n        push(cdar(p2));\n        append();\n        cons();\n        p1 = cdr(p1);\n        p2 = cdr(p2);\n        parse_p1();\n        parse_p2();\n        continue;\n      }\n\n      switch (cmp_expr(p3, p4)) {\n        case -1:\n          push(car(p1));\n          p1 = cdr(p1);\n          parse_p1();\n          break;\n\n        case 1:\n          push(car(p2));\n          p2 = cdr(p2);\n          parse_p2();\n          break;\n\n        case 0:\n          combine_factors(h);\n          p1 = cdr(p1);\n          p2 = cdr(p2);\n          parse_p1();\n          parse_p2();\n          break;\n\n        default:\n          stop(\"internal error 2\");\n      }\n    }\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p2)) {\n      push(car(p2));\n      p2 = cdr(p2);\n    }\n\n    __normalize_radical_factors(h);\n\n    if (expanding) {\n      for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n        if (isadd(stack[i])) {\n          multiply_all(tos - h);\n          return;\n        }\n      }\n    }\n\n    n = tos - h;\n\n    if (n === 1) {\n      return;\n    }\n\n    if (isrational(stack[h]) && equaln(stack[h], 1)) {\n      if (n === 2) {\n        p7 = pop();\n        pop();\n        push(p7);\n      } else {\n        stack[h] = symbol(MULTIPLY);\n        list(n);\n      }\n\n      return;\n    }\n\n    list(n);\n    p7 = pop();\n    push_symbol(MULTIPLY);\n    push(p7);\n    return cons();\n  };\n\n  parse_p1 = function () {\n    p3 = car(p1);\n    p5 = evaluatingAsFloats ? one_as_double : one;\n\n    if (car(p3) === symbol(POWER)) {\n      p5 = caddr(p3);\n      return p3 = cadr(p3);\n    }\n  };\n\n  parse_p2 = function () {\n    p4 = car(p2);\n    p6 = evaluatingAsFloats ? one_as_double : one;\n\n    if (car(p4) === symbol(POWER)) {\n      p6 = caddr(p4);\n      return p4 = cadr(p4);\n    }\n  };\n\n  combine_factors = function (h) {\n    push(p4);\n    push(p5);\n    push(p6);\n    add();\n    power();\n    p7 = pop();\n\n    if (isNumericAtom(p7)) {\n      push(stack[h]);\n      push(p7);\n      multiply_numbers();\n      return stack[h] = pop();\n    } else if (car(p7) === symbol(MULTIPLY)) {\n      if (isNumericAtom(cadr(p7)) && cdddr(p7) === symbol(NIL)) {\n        push(stack[h]);\n        push(cadr(p7));\n        multiply_numbers();\n        stack[h] = pop();\n        return push(caddr(p7));\n      } else {\n        return push(p7);\n      }\n    } else {\n      return push(p7);\n    }\n  };\n\n  gp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, -6, -7, -8, -3, -4, -5, 13, 14, 15, -16, 9, 10, 11, -12], [0, 0, 6, -1, -11, 10, -2, -15, 14, 12, -5, 4, -9, 16, -8, 7, -13], [0, 0, 7, 11, -1, -9, 15, -2, -13, 5, 12, -3, -10, 8, 16, -6, -14], [0, 0, 8, -10, 9, -1, -14, 13, -2, -4, 3, 12, -11, -7, 6, 16, -15], [0, 0, 3, 2, 15, -14, 1, 11, -10, 16, -8, 7, 13, 12, -5, 4, 9], [0, 0, 4, -15, 2, 13, -11, 1, 9, 8, 16, -6, 14, 5, 12, -3, 10], [0, 0, 5, 14, -13, 2, 10, -9, 1, -7, 6, 16, 15, -4, 3, 12, 11], [0, 0, 13, 12, -5, 4, 16, -8, 7, -1, -11, 10, -3, -2, -15, 14, -6], [0, 0, 14, 5, 12, -3, 8, 16, -6, 11, -1, -9, -4, 15, -2, -13, -7], [0, 0, 15, -4, 3, 12, -7, 6, 16, -10, 9, -1, -5, -14, 13, -2, -8], [0, 0, 16, -9, -10, -11, -13, -14, -15, -3, -4, -5, 1, -6, -7, -8, 2], [0, 0, 9, -16, 8, -7, -12, 5, -4, -2, -15, 14, 6, -1, -11, 10, 3], [0, 0, 10, -8, -16, 6, -5, -12, 3, 15, -2, -13, 7, 11, -1, -9, 4], [0, 0, 11, 7, -6, -16, 4, -3, -12, -14, 13, -2, 8, -10, 9, -1, 5], [0, 0, 12, 13, 14, 15, 9, 10, 11, -6, -7, -8, -2, -3, -4, -5, -1]];\n\n  combine_gammas = function (h) {\n    var n;\n    n = gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)];\n\n    if (n < 0) {\n      n = -n;\n      push(stack[h]);\n      negate();\n      stack[h] = pop();\n    }\n\n    if (n > 1) {\n      return push(_gamma[n]);\n    }\n  };\n\n  multiply_noexpand = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply();\n    return expanding = prev_expanding;\n  };\n\n  multiply_all = function (n) {\n    var h, i, o, ref;\n    i = 0;\n\n    if (n === 1) {\n      return;\n    }\n\n    if (n === 0) {\n      push(evaluatingAsFloats ? one_as_double : one);\n      return;\n    }\n\n    h = tos - n;\n    push(stack[h]);\n\n    for (i = o = 1, ref = n; 1 <= ref ? o < ref : o > ref; i = 1 <= ref ? ++o : --o) {\n      push(stack[h + i]);\n      multiply();\n    }\n\n    stack[h] = pop();\n    return moveTos(h + 1);\n  };\n\n  multiply_all_noexpand = function (n) {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply_all(n);\n    return expanding = prev_expanding;\n  };\n\n  divide = function () {\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return divide_numbers();\n    } else {\n      inverse();\n      return multiply();\n    }\n  };\n\n  inverse = function () {\n    if (isNumericAtom(stack[tos - 1])) {\n      return invert_number();\n    } else {\n      push_integer(-1);\n      return power();\n    }\n  };\n\n  reciprocate = function () {\n    return inverse();\n  };\n\n  negate = function () {\n    if (isNumericAtom(stack[tos - 1])) {\n      return negate_number();\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(-1.0);\n      } else {\n        push_integer(-1);\n      }\n\n      return multiply();\n    }\n  };\n\n  negate_expand = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  negate_noexpand = function () {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  __normalize_radical_factors = function (h) {\n    var i, i1, j1, o, ref, ref1, ref2, ref3, ref4, ref5;\n    i = 0;\n\n    if (isplusone(stack[h]) || isminusone(stack[h]) || isdouble(stack[h])) {\n      return;\n    }\n\n    for (i = o = ref = h + 1, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      if (__is_radical_number(stack[i])) {\n        break;\n      }\n    }\n\n    if (i === tos) {\n      return;\n    }\n\n    save();\n    push(stack[h]);\n    mp_numerator();\n    p1 = pop();\n\n    for (i = i1 = ref2 = h + 1, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      if (isplusone(p1) || isminusone(p1)) {\n        break;\n      }\n\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n\n      if (!isnegativenumber(p4)) {\n        continue;\n      }\n\n      push(p1);\n      push(p3);\n      divide();\n      p5 = pop();\n\n      if (!isinteger(p5)) {\n        continue;\n      }\n\n      p1 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(evaluatingAsFloats ? one_as_double : one);\n      push(p4);\n      add();\n      list(3);\n      stack[i] = pop();\n    }\n\n    push(stack[h]);\n    mp_denominator();\n    p2 = pop();\n\n    for (i = j1 = ref4 = h + 1, ref5 = tos; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; i = ref4 <= ref5 ? ++j1 : --j1) {\n      if (isplusone(p2)) {\n        break;\n      }\n\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n\n      if (isnegativenumber(p4)) {\n        continue;\n      }\n\n      push(p2);\n      push(p3);\n      divide();\n      p5 = pop();\n\n      if (!isinteger(p5)) {\n        continue;\n      }\n\n      p2 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(p4);\n      push(one);\n      subtract();\n\n      if (dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication) {\n        if (isinteger(p3) && !isinteger(stack[tos - 1]) && isnegativenumber(stack[tos - 1])) {\n          pop();\n          pop();\n          pop();\n          push(p1);\n          push(p3);\n          divide();\n          p1 = pop();\n          break;\n        }\n      }\n\n      list(3);\n      stack[i] = pop();\n    }\n\n    push(p1);\n    push(p2);\n    divide();\n    stack[h] = pop();\n    return restore();\n  };\n\n  __is_radical_number = function (p) {\n    if (car(p) === symbol(POWER) && isNumericAtom(cadr(p)) && isNumericAtom(caddr(p)) && !isminusone(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  NROOTS_YMAX = 101;\n  NROOTS_DELTA = 1.0e-6;\n  NROOTS_EPSILON = 1.0e-9;\n\n  NROOTS_ABS = function (z) {\n    return Math.sqrt(z.r * z.r + z.i * z.i);\n  };\n\n  theRandom = 0.0;\n\n  NROOTS_RANDOM = function () {\n    return 4.0 * Math.random() - 2.0;\n  };\n\n  numericRootOfPolynomial = function () {\n    function numericRootOfPolynomial() {}\n\n    numericRootOfPolynomial.prototype.r = 0.0;\n    numericRootOfPolynomial.prototype.i = 0.0;\n    return numericRootOfPolynomial;\n  }();\n\n  nroots_a = new numericRootOfPolynomial();\n  nroots_b = new numericRootOfPolynomial();\n  nroots_x = new numericRootOfPolynomial();\n  nroots_y = new numericRootOfPolynomial();\n  nroots_fa = new numericRootOfPolynomial();\n  nroots_fb = new numericRootOfPolynomial();\n  nroots_dx = new numericRootOfPolynomial();\n  nroots_df = new numericRootOfPolynomial();\n  nroots_c = [];\n\n  for (initNRoots = o = 0, ref = NROOTS_YMAX; 0 <= ref ? o < ref : o > ref; initNRoots = 0 <= ref ? ++o : --o) {\n    nroots_c[initNRoots] = new numericRootOfPolynomial();\n  }\n\n  Eval_nroots = function () {\n    var h, i, i1, j1, k, l1, n, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    p2 = pop();\n    p1 = pop();\n\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"nroots: polynomial?\");\n    }\n\n    h = tos;\n    push(p1);\n    push(p2);\n    n = coeff();\n\n    if (n > NROOTS_YMAX) {\n      stop(\"nroots: degree?\");\n    }\n\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(stack[h + i]);\n      real();\n      yyfloat();\n      Eval();\n      p1 = pop();\n      push(stack[h + i]);\n      imag();\n      yyfloat();\n      Eval();\n      p2 = pop();\n\n      if (!isdouble(p1) || !isdouble(p2)) {\n        stop(\"nroots: coefficients?\");\n      }\n\n      nroots_c[i].r = p1.d;\n      nroots_c[i].i = p2.d;\n    }\n\n    moveTos(h);\n    monic(n);\n\n    for (k = j1 = ref2 = n; j1 > 1; k = j1 += -1) {\n      findroot(k);\n\n      if (Math.abs(nroots_a.r) < NROOTS_DELTA) {\n        nroots_a.r = 0.0;\n      }\n\n      if (Math.abs(nroots_a.i) < NROOTS_DELTA) {\n        nroots_a.i = 0.0;\n      }\n\n      push_double(nroots_a.r);\n      push_double(nroots_a.i);\n      push(imaginaryunit);\n      multiply();\n      add();\n      NROOTS_divpoly(k);\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      sort_stack(n);\n      p1 = alloc_tensor(n);\n      p1.tensor.ndim = 1;\n      p1.tensor.dim[0] = n;\n\n      for (i = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        p1.tensor.elem[i] = stack[h + i];\n      }\n\n      moveTos(h);\n      return push(p1);\n    }\n  };\n\n  monic = function (n) {\n    var i1, k, ref1, t;\n    k = 0;\n    t = 0.0;\n    nroots_y.r = nroots_c[n - 1].r;\n    nroots_y.i = nroots_c[n - 1].i;\n    t = nroots_y.r * nroots_y.r + nroots_y.i * nroots_y.i;\n\n    for (k = i1 = 0, ref1 = n - 1; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      nroots_c[k].r = (nroots_c[k].r * nroots_y.r + nroots_c[k].i * nroots_y.i) / t;\n      nroots_c[k].i = (nroots_c[k].i * nroots_y.r - nroots_c[k].r * nroots_y.i) / t;\n    }\n\n    nroots_c[n - 1].r = 1.0;\n    return nroots_c[n - 1].i = 0.0;\n  };\n\n  findroot = function (n) {\n    var i1, j, j1, k, nrabs, t;\n    j = 0;\n    k = 0;\n    t = 0.0;\n\n    if (NROOTS_ABS(nroots_c[0]) < NROOTS_DELTA) {\n      nroots_a.r = 0.0;\n      nroots_a.i = 0.0;\n      return;\n    }\n\n    for (j = i1 = 0; i1 < 100; j = ++i1) {\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      compute_fa(n);\n      nroots_b.r = nroots_a.r;\n      nroots_b.i = nroots_a.i;\n      nroots_fb.r = nroots_fa.r;\n      nroots_fb.i = nroots_fa.i;\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n\n      for (k = j1 = 0; j1 < 1000; k = ++j1) {\n        compute_fa(n);\n        nrabs = NROOTS_ABS(nroots_fa);\n\n        if (DEBUG) {\n          console.log(\"nrabs: \" + nrabs);\n        }\n\n        if (nrabs < NROOTS_EPSILON) {\n          return;\n        }\n\n        if (NROOTS_ABS(nroots_fa) < NROOTS_ABS(nroots_fb)) {\n          nroots_x.r = nroots_a.r;\n          nroots_x.i = nroots_a.i;\n          nroots_a.r = nroots_b.r;\n          nroots_a.i = nroots_b.i;\n          nroots_b.r = nroots_x.r;\n          nroots_b.i = nroots_x.i;\n          nroots_x.r = nroots_fa.r;\n          nroots_x.i = nroots_fa.i;\n          nroots_fa.r = nroots_fb.r;\n          nroots_fa.i = nroots_fb.i;\n          nroots_fb.r = nroots_x.r;\n          nroots_fb.i = nroots_x.i;\n        }\n\n        nroots_dx.r = nroots_b.r - nroots_a.r;\n        nroots_dx.i = nroots_b.i - nroots_a.i;\n        nroots_df.r = nroots_fb.r - nroots_fa.r;\n        nroots_df.i = nroots_fb.i - nroots_fa.i;\n        t = nroots_df.r * nroots_df.r + nroots_df.i * nroots_df.i;\n\n        if (t === 0.0) {\n          break;\n        }\n\n        nroots_y.r = (nroots_dx.r * nroots_df.r + nroots_dx.i * nroots_df.i) / t;\n        nroots_y.i = (nroots_dx.i * nroots_df.r - nroots_dx.r * nroots_df.i) / t;\n        nroots_a.r = nroots_b.r - (nroots_y.r * nroots_fb.r - nroots_y.i * nroots_fb.i);\n        nroots_a.i = nroots_b.i - (nroots_y.r * nroots_fb.i + nroots_y.i * nroots_fb.r);\n      }\n    }\n\n    return stop(\"nroots: convergence error\");\n  };\n\n  compute_fa = function (n) {\n    var i1, k, ref1, results, t;\n    k = 0;\n    t = 0.0;\n    nroots_x.r = nroots_a.r;\n    nroots_x.i = nroots_a.i;\n    nroots_fa.r = nroots_c[0].r + nroots_c[1].r * nroots_x.r - nroots_c[1].i * nroots_x.i;\n    nroots_fa.i = nroots_c[0].i + nroots_c[1].r * nroots_x.i + nroots_c[1].i * nroots_x.r;\n    results = [];\n\n    for (k = i1 = 2, ref1 = n; 2 <= ref1 ? i1 < ref1 : i1 > ref1; k = 2 <= ref1 ? ++i1 : --i1) {\n      t = nroots_a.r * nroots_x.r - nroots_a.i * nroots_x.i;\n      nroots_x.i = nroots_a.r * nroots_x.i + nroots_a.i * nroots_x.r;\n      nroots_x.r = t;\n      nroots_fa.r += nroots_c[k].r * nroots_x.r - nroots_c[k].i * nroots_x.i;\n      results.push(nroots_fa.i += nroots_c[k].r * nroots_x.i + nroots_c[k].i * nroots_x.r);\n    }\n\n    return results;\n  };\n\n  NROOTS_divpoly = function (n) {\n    var i1, j1, k, ref1, ref2, results;\n    k = 0;\n\n    for (k = i1 = ref1 = n - 1; ref1 <= 0 ? i1 < 0 : i1 > 0; k = ref1 <= 0 ? ++i1 : --i1) {\n      nroots_c[k - 1].r += nroots_c[k].r * nroots_a.r - nroots_c[k].i * nroots_a.i;\n      nroots_c[k - 1].i += nroots_c[k].i * nroots_a.r + nroots_c[k].r * nroots_a.i;\n    }\n\n    if (NROOTS_ABS(nroots_c[0]) > NROOTS_DELTA) {\n      stop(\"nroots: residual error\");\n    }\n\n    results = [];\n\n    for (k = j1 = 0, ref2 = n - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      nroots_c[k].r = nroots_c[k + 1].r;\n      results.push(nroots_c[k].i = nroots_c[k + 1].i);\n    }\n\n    return results;\n  };\n\n  Eval_numerator = function () {\n    push(cadr(p1));\n    Eval();\n    return numerator();\n  };\n\n  numerator = function () {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        numerator();\n        theArgument = cdr(theArgument);\n      }\n\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_numerator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      return push(one);\n    } else {\n      return push(theArgument);\n    }\n  };\n\n  Eval_outer = function () {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      outer();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  outer = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (istensor(p1) && istensor(p2)) {\n      yyouter();\n    } else {\n      push(p1);\n      push(p2);\n\n      if (istensor(p1)) {\n        tensor_times_scalar();\n      } else if (istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        multiply();\n      }\n    }\n\n    return restore();\n  };\n\n  yyouter = function () {\n    var i, i1, j, j1, k, l1, m1, ndim, nelem, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    k = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n\n    if (ndim > MAXDIM) {\n      stop(\"outer: rank of result exceeds maximum\");\n    }\n\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = i1 = 0, ref1 = p1.tensor.ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    j = i;\n\n    for (i = j1 = 0, ref2 = p2.tensor.ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      p3.tensor.dim[j + i] = p2.tensor.dim[i];\n    }\n\n    k = 0;\n\n    for (i = l1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      for (j = m1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2.tensor.elem[j]);\n        multiply();\n        p3.tensor.elem[k++] = pop();\n      }\n    }\n\n    return push(p3);\n  };\n  /*\n   Partition a term\n  \n    Input stack:\n  \n      term (factor or product of factors)\n  \n      free variable\n  \n    Output stack:\n  \n      constant expression\n  \n      variable expression\n   */\n\n\n  partition = function () {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push_integer(1);\n    p3 = pop();\n    p4 = p3;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      if (Find(car(p1), p2)) {\n        push(p4);\n        push(car(p1));\n        multiply();\n        p4 = pop();\n      } else {\n        push(p3);\n        push(car(p1));\n        multiply();\n        p3 = pop();\n      }\n\n      p1 = cdr(p1);\n    }\n\n    push(p3);\n    push(p4);\n    return restore();\n  };\n  /*\n    Add a pattern i.e. a substitution rule.\n    Substitution rule needs a template as first argument\n    and what to transform it to as second argument.\n    Optional third argument is a boolean test which\n    adds conditions to when the rule is applied.\n   */\n\n\n  Eval_silentpattern = function () {\n    Eval_pattern();\n    pop();\n    return push_symbol(NIL);\n  };\n\n  Eval_pattern = function () {\n    var firstArgument, patternPosition, secondArgument, stringKey, thirdArgument;\n\n    if (!iscons(cdr(p1))) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    firstArgument = car(cdr(p1));\n    secondArgument = car(cdr(cdr(p1)));\n\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    if (!iscons(cdr(cdr(p1)))) {\n      thirdArgument = symbol(NIL);\n    } else {\n      thirdArgument = car(cdr(cdr(cdr(p1))));\n    }\n\n    if (equal(firstArgument, secondArgument)) {\n      stop(\"recursive pattern\");\n    }\n\n    stringKey = \"template: \" + print_list(firstArgument);\n    stringKey += \" tests: \" + print_list(thirdArgument);\n\n    if (DEBUG) {\n      console.log(\"pattern stringkey: \" + stringKey);\n    }\n\n    patternPosition = userSimplificationsInStringForm.indexOf(stringKey);\n\n    if (patternPosition === -1) {\n      userSimplificationsInStringForm.push(stringKey);\n      userSimplificationsInListForm.push(cdr(p1));\n    } else {\n      if (DEBUG) {\n        console.log(\"pattern already exists, replacing. \" + cdr(p1));\n      }\n\n      userSimplificationsInStringForm[patternPosition] = stringKey;\n      userSimplificationsInListForm[patternPosition] = cdr(p1);\n    }\n\n    push_symbol(PATTERN);\n    push(cdr(p1));\n    return list(2);\n  };\n  /*\n    Clear all patterns\n   */\n\n\n  do_clearPatterns = function () {\n    userSimplificationsInListForm = [];\n    return userSimplificationsInStringForm = [];\n  };\n\n  Eval_clearpatterns = function () {\n    do_clearPatterns();\n    return push_symbol(NIL);\n  };\n\n  Eval_patternsinfo = function () {\n    var patternsinfoToBePrinted;\n    patternsinfoToBePrinted = patternsinfo();\n\n    if (patternsinfoToBePrinted !== \"\") {\n      return new_string(patternsinfoToBePrinted);\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  patternsinfo = function () {\n    var i, i1, len, patternsinfoToBePrinted;\n    patternsinfoToBePrinted = \"\";\n\n    for (i1 = 0, len = userSimplificationsInListForm.length; i1 < len; i1++) {\n      i = userSimplificationsInListForm[i1];\n      patternsinfoToBePrinted += userSimplificationsInListForm + \"\\n\";\n    }\n\n    return patternsinfoToBePrinted;\n  };\n  /*\n  Convert complex z to polar form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n  \n    polar(z) = abs(z) * exp(i * arg(z))\n   */\n\n\n  Eval_polar = function () {\n    push(cadr(p1));\n    Eval();\n    return polar();\n  };\n\n  polar = function () {\n    evaluatingPolar++;\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n    push(imaginaryunit);\n    push(p1);\n    arg();\n    multiply();\n    exponential();\n    multiply();\n    evaluatingPolar--;\n    return restore();\n  };\n\n  n_factor_number = 0;\n\n  factor_number = function () {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (equaln(p1, 0) || equaln(p1, 1) || equaln(p1, -1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    n_factor_number = p1.q.a;\n    h = tos;\n    factor_a();\n\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      cons();\n    }\n\n    return restore();\n  };\n\n  factor_a = function () {\n    var i1, k;\n    k = 0;\n\n    if (n_factor_number.isNegative()) {\n      n_factor_number = setSignTo(n_factor_number, 1);\n      push_integer(-1);\n    }\n\n    for (k = i1 = 0; i1 < 10000; k = ++i1) {\n      try_kth_prime(k);\n\n      if (n_factor_number.compare(1) === 0) {\n        return;\n      }\n    }\n\n    return factor_b();\n  };\n\n  try_kth_prime = function (k) {\n    var count, d, q, r, ref1;\n    count = 0;\n    d = mint(primetab[k]);\n    count = 0;\n\n    while (1) {\n      if (n_factor_number.compare(1) === 0) {\n        if (count) {\n          push_factor(d, count);\n        }\n\n        return;\n      }\n\n      ref1 = mdivrem(n_factor_number, d), q = ref1[0], r = ref1[1];\n\n      if (r.isZero()) {\n        count++;\n        n_factor_number = q;\n      } else {\n        break;\n      }\n    }\n\n    if (count) {\n      push_factor(d, count);\n    }\n\n    if (mcmp(q, d) === -1) {\n      push_factor(n_factor_number, 1);\n      return n_factor_number = mint(1);\n    }\n  };\n\n  factor_b = function () {\n    var bigint_one, g, k, l, t, x, xprime;\n    k = 0;\n    l = 0;\n    bigint_one = mint(1);\n    x = mint(5);\n    xprime = mint(2);\n    k = 1;\n    l = 1;\n\n    while (1) {\n      if (mprime(n_factor_number)) {\n        push_factor(n_factor_number, 1);\n        return 0;\n      }\n\n      while (1) {\n        if (esc_flag) {\n          stop(\"esc\");\n        }\n\n        t = msub(xprime, x);\n        t = setSignTo(t, 1);\n        g = mgcd(t, n_factor_number);\n\n        if (MEQUAL(g, 1)) {\n          if (--k === 0) {\n            xprime = x;\n            l *= 2;\n            k = l;\n          }\n\n          t = mmul(x, x);\n          x = madd(t, bigint_one);\n          t = mmod(x, n_factor_number);\n          x = t;\n          continue;\n        }\n\n        push_factor(g, 1);\n\n        if (mcmp(g, n_factor_number) === 0) {\n          return -1;\n        }\n\n        t = mdiv(n_factor_number, g);\n        n_factor_number = t;\n        t = mmod(x, n_factor_number);\n        x = t;\n        t = mmod(xprime, n_factor_number);\n        xprime = t;\n        break;\n      }\n    }\n  };\n\n  push_factor = function (d, count) {\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = d;\n    p1.q.b = mint(1);\n    push(p1);\n\n    if (count > 1) {\n      push_symbol(POWER);\n      swap();\n      p1 = new U();\n      p1.k = NUM;\n      p1.q.a = mint(count);\n      p1.q.b = mint(1);\n      push(p1);\n      return list(3);\n    }\n  };\n  /* Power function\n  \n    Input:    push  Base\n  \n        push  Exponent\n  \n    Output:    Result on stack\n   */\n\n\n  DEBUG_POWER = false;\n\n  Eval_power = function () {\n    if (DEBUG_POWER) {\n      debugger;\n    }\n\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return power();\n  };\n\n  power = function () {\n    save();\n    yypower();\n    return restore();\n  };\n\n  yypower = function () {\n    var b_isEven_and_c_isItsInverse, hopefullySimplified, inputBase, inputExp, isThisOne, is_a_moreThanZero, n;\n\n    if (DEBUG_POWER) {\n      debugger;\n    }\n\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    inputExp = p2;\n    inputBase = p1;\n\n    if (DEBUG_POWER) {\n      console.log(\"POWER: \" + p1 + \" ^ \" + p2);\n    }\n\n    if (equal(p1, one) || isZeroAtomOrTensor(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (equal(p2, one)) {\n      push(p1);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isminusone(p1) && isminusone(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n\n      negate();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isminusone(p1) && isoneovertwo(p2)) {\n      push(imaginaryunit);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isminusone(p1) && isminusoneovertwo(p2)) {\n      push(imaginaryunit);\n      negate();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isminusone(p1) && !isdouble(p1) && isrational(p2) && !isinteger(p2) && ispositivenumber(p2) && !evaluatingAsFloats) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: -1 ^ rational\");\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\" trick: p2.q.a , p2.q.b \" + p2.q.a + \" , \" + p2.q.b);\n      }\n\n      if (p2.q.a < p2.q.b) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n      } else {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push_symbol(POWER);\n        push(p1);\n        push_rational(p2.q.a.mod(p2.q.b), p2.q.b);\n        list(3);\n        list(3);\n\n        if (DEBUG_POWER) {\n          console.log(\" trick applied : \" + stack[tos - 1]);\n        }\n      }\n\n      rect();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isrational(p1) && isrational(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: isrational(p1) && isrational(p2)\");\n      }\n\n      push(p1);\n      push(p2);\n      qpow();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: both base and exponent are either rational or double \");\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"POWER - isNumericAtom(p1) && isNumericAtom(p2)\");\n      }\n\n      push(p1);\n      push(p2);\n      dpow();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (istensor(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: istensor(p1) \");\n      }\n\n      power_tensor();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (car(p1) === symbol(ABS) && iseveninteger(p2) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: even power of absolute of real value \");\n      }\n\n      push(cadr(p1));\n      push(p2);\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (p1 === symbol(E) && car(p2) === symbol(LOG)) {\n      push(cadr(p2));\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (p1 === symbol(E) && isdouble(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: p1 == symbol(E) && isdouble(p2) \");\n      }\n\n      push_double(Math.exp(p2.d));\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (p1 === symbol(E) && Find(p2, imaginaryunit) !== 0 && Find(p2, symbol(PI)) !== 0 && !evaluatingPolar) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power: turning complex exponential to rect: \" + stack[tos - 1]);\n      }\n\n      rect();\n      hopefullySimplified = pop();\n\n      if (Find(hopefullySimplified, symbol(PI)) === 0) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: turned complex exponential to rect: \" + hopefullySimplified);\n        }\n\n        push(hopefullySimplified);\n        return;\n      }\n    }\n\n    if (car(p1) === symbol(MULTIPLY) && isinteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) \");\n      }\n\n      p1 = cdr(p1);\n      push(car(p1));\n      push(p2);\n      power();\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        power();\n        multiply();\n        p1 = cdr(p1);\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    is_a_moreThanZero = false;\n\n    if (isNumericAtom(cadr(p1))) {\n      is_a_moreThanZero = sign(compare_numbers(cadr(p1), zero));\n    }\n\n    if (car(p1) === symbol(POWER) && (isinteger(p2) || is_a_moreThanZero)) {\n      push(cadr(p1));\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    b_isEven_and_c_isItsInverse = false;\n\n    if (iseveninteger(caddr(p1))) {\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      isThisOne = pop();\n\n      if (isone(isThisOne)) {\n        b_isEven_and_c_isItsInverse = true;\n      }\n    }\n\n    if (car(p1) === symbol(POWER) && b_isEven_and_c_isItsInverse) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse \");\n      }\n\n      push(cadr(p1));\n      abs();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (expanding && isadd(p1) && isNumericAtom(p2)) {\n      push(p2);\n      n = pop_integer();\n\n      if (n > 1 && !isNaN(n)) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: expanding && isadd(p1) && isNumericAtom(p2) \");\n        }\n\n        power_sum(n);\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      }\n    }\n\n    if (trigmode === 1 && car(p1) === symbol(SIN) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) \");\n      }\n\n      push_integer(1);\n      push(cadr(p1));\n      cosine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (trigmode === 2 && car(p1) === symbol(COS) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) \");\n      }\n\n      push_integer(1);\n      push(cadr(p1));\n      sine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (iscomplexnumber(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\" power - handling the case (a + ib) ^ n\");\n      }\n\n      if (isinteger(p2)) {\n        push(p1);\n        conjugate();\n        p3 = pop();\n        push(p3);\n        push(p3);\n        push(p1);\n        multiply();\n        divide();\n\n        if (!isone(p2)) {\n          push(p2);\n          negate();\n          power();\n        }\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      }\n\n      if (isNumericAtom(p2)) {\n        push(p1);\n        abs();\n        push(p2);\n        power();\n        push_integer(-1);\n        push(p1);\n        arg();\n        push(p2);\n        multiply();\n\n        if (evaluatingAsFloats || iscomplexnumberdouble(p1) && isdouble(p2)) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n\n        divide();\n        power();\n        multiply();\n\n        if (avoidCalculatingPowersIntoArctans) {\n          if (Find(stack[tos - 1], symbol(ARCTAN))) {\n            pop();\n            push_symbol(POWER);\n            push(p1);\n            push(p2);\n            list(3);\n          }\n        }\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      }\n    }\n\n    if (simplify_polar()) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: using simplify_polar\");\n      }\n\n      return;\n    }\n\n    if (DEBUG_POWER) {\n      console.log(\"   power: nothing can be done \");\n    }\n\n    push_symbol(POWER);\n    push(p1);\n    push(p2);\n    list(3);\n\n    if (DEBUG_POWER) {\n      return console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n    }\n  };\n\n  power_sum = function (n) {\n    var a, i, i1, j, j1, k, l1, ref1, ref2, ref3;\n    a = [];\n    i = 0;\n    j = 0;\n    k = 0;\n    k = length(p1) - 1;\n    push_frame(k * (n + 1));\n    p1 = cdr(p1);\n\n    for (i = i1 = 0, ref1 = k; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      for (j = j1 = 0, ref2 = n; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n        push(car(p1));\n        push_integer(j);\n        power();\n        stack[frame + i * (n + 1) + j] = pop();\n      }\n\n      p1 = cdr(p1);\n    }\n\n    push_integer(n);\n    factorial();\n    p1 = pop();\n\n    for (i = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      a[i] = 0;\n    }\n\n    push(zero);\n    multinomial_sum(k, n, a, 0, n);\n    return pop_frame(k * (n + 1));\n  };\n\n  multinomial_sum = function (k, n, a, i, m) {\n    var i1, j, j1, l1, ref1, ref2, ref3;\n    j = 0;\n\n    if (i < k - 1) {\n      for (j = i1 = 0, ref1 = m; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        a[i] = j;\n        multinomial_sum(k, n, a, i + 1, m - j);\n      }\n\n      return;\n    }\n\n    a[i] = m;\n    push(p1);\n\n    for (j = j1 = 0, ref2 = k; 0 <= ref2 ? j1 < ref2 : j1 > ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n      push_integer(a[j]);\n      factorial();\n      divide();\n    }\n\n    for (j = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[frame + j * (n + 1) + a[j]]);\n      multiply();\n    }\n\n    return add();\n  };\n\n  simplify_polar = function () {\n    var doNothing, n;\n    n = 0;\n    n = isquarterturn(p2);\n\n    switch (n) {\n      case 0:\n        doNothing = 1;\n        break;\n\n      case 1:\n        push_integer(1);\n        return 1;\n\n      case 2:\n        push_integer(-1);\n        return 1;\n\n      case 3:\n        push(imaginaryunit);\n        return 1;\n\n      case 4:\n        push(imaginaryunit);\n        negate();\n        return 1;\n    }\n\n    if (car(p2) === symbol(ADD)) {\n      p3 = cdr(p2);\n\n      while (iscons(p3)) {\n        n = isquarterturn(car(p3));\n\n        if (n) {\n          break;\n        }\n\n        p3 = cdr(p3);\n      }\n\n      switch (n) {\n        case 0:\n          return 0;\n\n        case 1:\n          push_integer(1);\n          break;\n\n        case 2:\n          push_integer(-1);\n          break;\n\n        case 3:\n          push(imaginaryunit);\n          break;\n\n        case 4:\n          push(imaginaryunit);\n          negate();\n      }\n\n      push(p2);\n      push(car(p3));\n      subtract();\n      exponential();\n      multiply();\n      return 1;\n    }\n\n    return 0;\n  };\n\n  Eval_prime = function () {\n    push(cadr(p1));\n    Eval();\n    return prime();\n  };\n\n  prime = function () {\n    var n;\n    n = 0;\n    n = pop_integer();\n\n    if (n < 1 || n > MAXPRIMETAB) {\n      stop(\"prime: Argument out of range.\");\n    }\n\n    n = primetab[n - 1];\n    return push_integer(n);\n  };\n\n  power_str = \"^\";\n  codeGen = false;\n\n  Eval_print = function () {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), printMode);\n    return push(symbol(NIL));\n  };\n\n  Eval_print2dascii = function () {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_2DASCII);\n    return push(symbol(NIL));\n  };\n\n  Eval_printcomputer = function () {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_COMPUTER);\n    return push(symbol(NIL));\n  };\n\n  Eval_printlatex = function () {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_LATEX);\n    return push(symbol(NIL));\n  };\n\n  Eval_printhuman = function () {\n    var original_test_flag;\n    original_test_flag = test_flag;\n    test_flag = 0;\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_HUMAN);\n    test_flag = original_test_flag;\n    return push(symbol(NIL));\n  };\n\n  Eval_printlist = function () {\n    var beenPrinted;\n    beenPrinted = _print(cdr(p1), PRINTMODE_LIST);\n    stringsEmittedByUserPrintouts += beenPrinted;\n    return push(symbol(NIL));\n  };\n\n  _print = function (p, passedPrintMode) {\n    var accumulator, origPrintMode;\n    accumulator = \"\";\n\n    while (iscons(p)) {\n      push(car(p));\n      Eval();\n      p2 = pop();\n      /*\n      if (issymbol(car(p)) && car(p) != p2)\n        push_symbol(SETQ);\n        push(car(p));\n        push(p2);\n        list(3);\n        p2 = pop();\n       */\n\n      origPrintMode = printMode;\n\n      if (passedPrintMode === PRINTMODE_COMPUTER) {\n        printMode = PRINTMODE_COMPUTER;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_FULL_PRINT);\n      } else if (passedPrintMode === PRINTMODE_HUMAN) {\n        printMode = PRINTMODE_HUMAN;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_PLAIN_PRINT);\n      } else if (passedPrintMode === PRINTMODE_2DASCII) {\n        printMode = PRINTMODE_2DASCII;\n        accumulator = print2dascii(p2);\n        rememberPrint(accumulator, LAST_2DASCII_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LATEX) {\n        printMode = PRINTMODE_LATEX;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_LATEX_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LIST) {\n        printMode = PRINTMODE_LIST;\n        accumulator = print_list(p2);\n        rememberPrint(accumulator, LAST_LIST_PRINT);\n      }\n\n      printMode = origPrintMode;\n      p = cdr(p);\n    }\n\n    if (DEBUG) {\n      console.log(\"emttedString from display: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return accumulator;\n  };\n\n  rememberPrint = function (theString, theTypeOfPrint) {\n    var parsedString;\n    scan('\"' + theString + '\"');\n    parsedString = pop();\n    return set_binding(symbol(theTypeOfPrint), parsedString);\n  };\n\n  print_str = function (s) {\n    if (DEBUG) {\n      console.log(\"emttedString from print_str: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return s;\n  };\n\n  print_char = function (c) {\n    return c;\n  };\n\n  collectLatexStringFromReturnValue = function (p) {\n    var origPrintMode, originalCodeGen, returnedString;\n    origPrintMode = printMode;\n    printMode = PRINTMODE_LATEX;\n    originalCodeGen = codeGen;\n    codeGen = false;\n    returnedString = print_expr(p);\n    returnedString = returnedString.replace(/_/g, \"\\\\_\");\n    printMode = origPrintMode;\n    codeGen = originalCodeGen;\n\n    if (DEBUG) {\n      console.log(\"emttedString from collectLatexStringFromReturnValue: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return returnedString;\n  };\n\n  printline = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(p);\n    return accumulator;\n  };\n\n  print_base_of_denom = function (p1) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isfraction(p1) || car(p1) === symbol(ADD) || car(p1) === symbol(MULTIPLY) || car(p1) === symbol(POWER) || lessp(p1, zero)) {\n      accumulator += print_char('(');\n      accumulator += print_expr(p1);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p1);\n    }\n\n    return accumulator;\n  };\n\n  print_expo_of_denom = function (p2) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isfraction(p2) || car(p2) === symbol(ADD) || car(p2) === symbol(MULTIPLY) || car(p2) === symbol(POWER)) {\n      accumulator += print_char('(');\n      accumulator += print_expr(p2);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p2);\n    }\n\n    return accumulator;\n  };\n\n  print_denom = function (p, d) {\n    var accumulator;\n    accumulator = \"\";\n    save();\n    p1 = cadr(p);\n    p2 = caddr(p);\n\n    if (isminusone(p2)) {\n      accumulator += print_base_of_denom(p1);\n      restore();\n      return accumulator;\n    }\n\n    if (d === 1) {\n      accumulator += print_char('(');\n    }\n\n    push(p2);\n    negate();\n    p2 = pop();\n    accumulator += print_power(p1, p2);\n\n    if (d === 1) {\n      accumulator += print_char(')');\n    }\n\n    restore();\n    return accumulator;\n  };\n\n  print_a_over_b = function (p) {\n    var accumulator, d, doNothing, n;\n    accumulator = \"\";\n    flag = 0;\n    n = 0;\n    d = 0;\n    save();\n    n = 0;\n    d = 0;\n    p1 = cdr(p);\n    p2 = car(p1);\n\n    if (isrational(p2)) {\n      push(p2);\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(p2);\n      mp_denominator();\n      p4 = pop();\n\n      if (!isplusone(p3)) {\n        n++;\n      }\n\n      if (!isplusone(p4)) {\n        d++;\n      }\n\n      p1 = cdr(p1);\n    } else {\n      p3 = one;\n      p4 = one;\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (is_denominator(p2)) {\n        d++;\n      } else {\n        n++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('\\\\frac{');\n    }\n\n    if (n === 0) {\n      accumulator += print_char('1');\n    } else {\n      flag = 0;\n      p1 = cdr(p);\n\n      if (isrational(car(p1))) {\n        p1 = cdr(p1);\n      }\n\n      if (!isplusone(p3)) {\n        accumulator += print_factor(p3);\n        flag = 1;\n      }\n\n      while (iscons(p1)) {\n        p2 = car(p1);\n\n        if (is_denominator(p2)) {\n          doNothing = 1;\n        } else {\n          if (flag) {\n            accumulator += print_multiply_sign();\n          }\n\n          accumulator += print_factor(p2);\n          flag = 1;\n        }\n\n        p1 = cdr(p1);\n      }\n    }\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}{');\n    } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n      accumulator += print_str(\" / \");\n    } else {\n      accumulator += print_str(\"/\");\n    }\n\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char('(');\n    }\n\n    flag = 0;\n    p1 = cdr(p);\n\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    if (!isplusone(p4)) {\n      accumulator += print_factor(p4);\n      flag = 1;\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (is_denominator(p2)) {\n        if (flag) {\n          accumulator += print_multiply_sign();\n        }\n\n        accumulator += print_denom(p2, d);\n        flag = 1;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char(')');\n    }\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}');\n    }\n\n    restore();\n    return accumulator;\n  };\n\n  print_expr = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isadd(p)) {\n      p = cdr(p);\n\n      if (sign_of_term(car(p)) === '-') {\n        accumulator += print_str(\"-\");\n      }\n\n      accumulator += print_term(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (sign_of_term(car(p)) === '+') {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" + \");\n          } else {\n            accumulator += print_str(\"+\");\n          }\n        } else {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" - \");\n          } else {\n            accumulator += print_str(\"-\");\n          }\n        }\n\n        accumulator += print_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (sign_of_term(p) === '-') {\n        accumulator += print_str(\"-\");\n      }\n\n      accumulator += print_term(p);\n    }\n\n    return accumulator;\n  };\n\n  sign_of_term = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && lessp(cadr(p), zero)) {\n      accumulator += '-';\n    } else if (isNumericAtom(p) && lessp(p, zero)) {\n      accumulator += '-';\n    } else {\n      accumulator += '+';\n    }\n\n    return accumulator;\n  };\n\n  print_term = function (p) {\n    var accumulator, denom, numberOneOverSomething, origAccumulator, previousFactorWasANumber;\n    accumulator = \"\";\n\n    if (car(p) === symbol(MULTIPLY) && any_denominators(p)) {\n      accumulator += print_a_over_b(p);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n\n      if (isminusone(car(p))) {\n        p = cdr(p);\n      }\n\n      previousFactorWasANumber = false;\n\n      if (isNumericAtom(car(p))) {\n        previousFactorWasANumber = true;\n      }\n\n      numberOneOverSomething = false;\n\n      if (printMode === PRINTMODE_LATEX && iscons(cdr(p)) && isNumberOneOverSomething(car(p))) {\n        numberOneOverSomething = true;\n        denom = car(p).q.b.toString();\n      }\n\n      if (numberOneOverSomething) {\n        origAccumulator = accumulator;\n        accumulator = \"\";\n      } else {\n        accumulator += print_factor(car(p));\n      }\n\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (printMode === PRINTMODE_LATEX) {\n          if (previousFactorWasANumber) {\n            if (caar(p) === symbol(POWER)) {\n              if (isNumericAtom(car(cdr(car(p))))) {\n                if (!isfraction(car(cdr(cdr(car(p)))))) {\n                  accumulator += \" \\\\cdot \";\n                }\n              }\n            }\n          }\n        }\n\n        accumulator += print_multiply_sign();\n        accumulator += print_factor(car(p));\n        previousFactorWasANumber = false;\n\n        if (isNumericAtom(car(p))) {\n          previousFactorWasANumber = true;\n        }\n\n        p = cdr(p);\n      }\n\n      if (numberOneOverSomething) {\n        accumulator = origAccumulator + \"\\\\frac{\" + accumulator + \"}{\" + denom + \"}\";\n      }\n    } else {\n      accumulator += print_factor(p);\n    }\n\n    return accumulator;\n  };\n\n  print_subexpr = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_char('(');\n    accumulator += print_expr(p);\n    accumulator += print_char(')');\n    return accumulator;\n  };\n\n  print_factorial_function = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cadr(p);\n\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(p);\n    } else {\n      accumulator += print_expr(p);\n    }\n\n    accumulator += print_char('!');\n    return accumulator;\n  };\n\n  print_ABS_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\left |\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\right |\");\n    return accumulator;\n  };\n\n  print_BINOMIAL_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\binom{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"}{\");\n    accumulator += print_expr(caddr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_DOT_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\cdot \");\n    accumulator += print_expr(caddr(p));\n    return accumulator;\n  };\n\n  print_DOT_codegen = function (p) {\n    var accumulator;\n    accumulator = \"dot(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \", \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SIN_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.sin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_COS_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.cos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_TAN_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.tan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCSIN_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.asin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCCOS_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.acos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCTAN_codegen = function (p) {\n    var accumulator;\n    accumulator = \"Math.atan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SQRT_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\sqrt{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n\n    accumulator += print_expr(cadr(p));\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^T\");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_codegen = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"transpose(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_UNIT_codegen = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"identity(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_INV_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n\n    accumulator += print_expr(cadr(p));\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^{-1}\");\n    return accumulator;\n  };\n\n  print_INV_codegen = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"inv(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_DEFINT_latex = function (p) {\n    var accumulator, functionBody, i, i1, numberOfIntegrals, originalIntegral, ref1, theIntegral, theVariable;\n    accumulator = \"\";\n    functionBody = car(cdr(p));\n    p = cdr(p);\n    originalIntegral = p;\n    numberOfIntegrals = 0;\n\n    while (iscons(cdr(cdr(p)))) {\n      numberOfIntegrals++;\n      theIntegral = cdr(cdr(p));\n      accumulator += print_str(\"\\\\int^{\");\n      accumulator += print_expr(car(cdr(theIntegral)));\n      accumulator += print_str(\"}_{\");\n      accumulator += print_expr(car(theIntegral));\n      accumulator += print_str(\"} \\\\! \");\n      p = cdr(theIntegral);\n    }\n\n    accumulator += print_expr(functionBody);\n    accumulator += print_str(\" \\\\,\");\n    p = originalIntegral;\n\n    for (i = i1 = 1, ref1 = numberOfIntegrals; 1 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      theVariable = cdr(p);\n      accumulator += print_str(\" \\\\mathrm{d} \");\n      accumulator += print_expr(car(theVariable));\n\n      if (i < numberOfIntegrals) {\n        accumulator += print_str(\" \\\\, \");\n      }\n\n      p = cdr(cdr(theVariable));\n    }\n\n    return accumulator;\n  };\n\n  print_tensor = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_tensor_inner(p, 0, 0)[1];\n    return accumulator;\n  };\n\n  print_tensor_inner = function (p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, ref3, retString;\n    accumulator = \"\";\n    accumulator += print_str(\"[\");\n\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        ref2 = print_tensor_inner(p, j + 1, k), k = ref2[0], retString = ref2[1];\n        accumulator += retString;\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n      }\n    } else {\n      for (i = j1 = 0, ref3 = p.tensor.dim[j]; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n\n        k++;\n      }\n    }\n\n    accumulator += print_str(\"]\");\n    return [k, accumulator];\n  };\n\n  print_tensor_latex = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (p.tensor.ndim <= 2) {\n      accumulator += print_tensor_inner_latex(true, p, 0, 0)[1];\n    }\n\n    return accumulator;\n  };\n\n  print_tensor_inner_latex = function (firstLevel, p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, ref3, retString;\n    accumulator = \"\";\n\n    if (firstLevel) {\n      accumulator += \"\\\\begin{bmatrix} \";\n    }\n\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        ref2 = print_tensor_inner_latex(0, p, j + 1, k), k = ref2[0], retString = ref2[1];\n        accumulator += retString;\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" \\\\\\\\ \");\n        }\n      }\n    } else {\n      for (i = j1 = 0, ref3 = p.tensor.dim[j]; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" & \");\n        }\n\n        k++;\n      }\n    }\n\n    if (firstLevel) {\n      accumulator += \" \\\\end{bmatrix}\";\n    }\n\n    return [k, accumulator];\n  };\n\n  print_SUM_latex = function (p) {\n    var accumulator;\n    accumulator = \"\\\\sum_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_SUM_codegen = function (p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderSum = 0; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderSum += \" + print_expr(body) + \";\" + \" } \" + \" return holderSum;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_TEST_latex = function (p) {\n    var accumulator;\n    accumulator = \"\\\\left\\\\{ \\\\begin{array}{ll}\";\n    p = cdr(p);\n\n    while (iscons(p)) {\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"{\";\n        accumulator += print_expr(car(p));\n        accumulator += \"} & otherwise \";\n        accumulator += \" \\\\\\\\\\\\\\\\\";\n        break;\n      }\n\n      accumulator += \"{\";\n      accumulator += print_expr(cadr(p));\n      accumulator += \"} & if & \";\n      accumulator += print_expr(car(p));\n      accumulator += \" \\\\\\\\\\\\\\\\\";\n      p = cddr(p);\n    }\n\n    accumulator = accumulator.substring(0, accumulator.length - 4);\n    return accumulator += \"\\\\end{array} \\\\right.\";\n  };\n\n  print_TEST_codegen = function (p) {\n    var accumulator, howManyIfs;\n    accumulator = \"(function(){\";\n    p = cdr(p);\n    howManyIfs = 0;\n\n    while (iscons(p)) {\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"else {\";\n        accumulator += \"return (\" + print_expr(car(p)) + \");\";\n        accumulator += \"}\";\n        break;\n      }\n\n      if (howManyIfs) {\n        accumulator += \" else \";\n      }\n\n      accumulator += \"if (\" + print_expr(car(p)) + \"){\";\n      accumulator += \"return (\" + print_expr(cadr(p)) + \");\";\n      accumulator += \"}\";\n      howManyIfs++;\n      p = cddr(p);\n    }\n\n    accumulator += \"})()\";\n    return accumulator;\n  };\n\n  print_TESTLT_latex = function (p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" < \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTLE_latex = function (p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\leq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGT_latex = function (p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" > \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGE_latex = function (p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\geq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTEQ_latex = function (p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" = \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_FOR_codegen = function (p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   \" + print_expr(body) + \" } \" + \"})()\";\n    return accumulator;\n  };\n\n  print_DO_codegen = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n\n    while (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n    }\n\n    return accumulator;\n  };\n\n  print_SETQ_codegen = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \" = \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"; \";\n    return accumulator;\n  };\n\n  print_PRODUCT_latex = function (p) {\n    var accumulator;\n    accumulator = \"\\\\prod_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_PRODUCT_codegen = function (p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderProduct = 1; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderProduct *= \" + print_expr(body) + \";\" + \" } \" + \" return holderProduct;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_base = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isadd(cadr(p)) || caadr(p) === symbol(MULTIPLY) || caadr(p) === symbol(POWER) || isnegativenumber(cadr(p))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(cadr(p));\n      accumulator += print_str(')');\n    } else if (isNumericAtom(cadr(p)) && (lessp(cadr(p), zero) || isfraction(cadr(p)))) {\n      accumulator += print_str('(');\n      accumulator += print_factor(cadr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(cadr(p));\n    }\n\n    return accumulator;\n  };\n\n  print_exponent = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (iscons(caddr(p)) || isfraction(caddr(p)) || isNumericAtom(caddr(p)) && lessp(caddr(p), zero)) {\n      accumulator += print_str('(');\n      accumulator += print_expr(caddr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(caddr(p));\n    }\n\n    return accumulator;\n  };\n\n  print_power = function (base, exponent) {\n    var accumulator, denomExponent, newExponent, numExponent;\n    accumulator = \"\";\n\n    if (DEBUG) {\n      console.log(\"power base: \" + base + \" \" + \" exponent: \" + exponent);\n    }\n\n    if (isoneovertwo(exponent)) {\n      if (equaln(base, 2)) {\n        if (codeGen) {\n          accumulator += print_str(\"Math.SQRT2\");\n          return accumulator;\n        }\n      } else {\n        if (printMode === PRINTMODE_LATEX) {\n          accumulator += print_str(\"\\\\sqrt{\");\n          accumulator += print_expr(base);\n          accumulator += print_str(\"}\");\n          return accumulator;\n        } else if (codeGen) {\n          accumulator += print_str(\"Math.sqrt(\");\n          accumulator += print_expr(base);\n          accumulator += print_str(')');\n          return accumulator;\n        }\n      }\n    }\n\n    if (equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)), 1) && base === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.exp(\");\n        accumulator += print_expo_of_denom(exponent);\n        accumulator += print_str(')');\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"e^{\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(\"}\");\n      } else {\n        accumulator += print_str(\"exp(\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (codeGen) {\n      accumulator += print_str(\"Math.pow(\");\n      accumulator += print_base_of_denom(base);\n      accumulator += print_str(\", \");\n      accumulator += print_expo_of_denom(exponent);\n      accumulator += print_str(')');\n      return accumulator;\n    }\n\n    if (equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)), 0) || base.printname !== \"x\") {\n      if (base !== symbol(E)) {\n        if (isminusone(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_expr(base);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_expr(base);\n          }\n\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n\n          return accumulator;\n        }\n\n        if (isnegativeterm(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n\n          push(exponent);\n          push_integer(-1);\n          multiply();\n          newExponent = pop();\n\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_power(base, newExponent);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_power(base, newExponent);\n          }\n\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n\n          return accumulator;\n        }\n      }\n\n      if (isfraction(exponent) && printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\sqrt\");\n        push(exponent);\n        denominator();\n        denomExponent = pop();\n\n        if (!isplustwo(denomExponent)) {\n          accumulator += print_str(\"[\");\n          accumulator += print_expr(denomExponent);\n          accumulator += print_str(\"]\");\n        }\n\n        accumulator += print_str(\"{\");\n        push(exponent);\n        numerator();\n        numExponent = pop();\n        exponent = numExponent;\n        accumulator += print_power(base, exponent);\n        accumulator += print_str(\"}\");\n        return accumulator;\n      }\n    }\n\n    if (printMode === PRINTMODE_LATEX && isplusone(exponent)) {\n      accumulator += print_expr(base);\n    } else {\n      if (isadd(base) || isnegativenumber(base)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(base);\n        accumulator += print_str(')');\n      } else if (car(base) === symbol(MULTIPLY) || car(base) === symbol(POWER)) {\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str('(');\n        }\n\n        accumulator += print_factor(base, true);\n\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str(')');\n        }\n      } else if (isNumericAtom(base) && (lessp(base, zero) || isfraction(base))) {\n        accumulator += print_str('(');\n        accumulator += print_factor(base);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(base);\n      }\n\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(power_str);\n      } else {\n        accumulator += print_str(\"^\");\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        if (print_expr(exponent).length > 1) {\n          accumulator += print_str(\"{\");\n          accumulator += print_expr(exponent);\n          accumulator += print_str(\"}\");\n        } else {\n          accumulator += print_expr(exponent);\n        }\n      } else if (iscons(exponent) || isfraction(exponent) || isNumericAtom(exponent) && lessp(exponent, zero)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(exponent);\n      }\n    }\n\n    return accumulator;\n  };\n\n  print_index_function = function (p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(car(p));\n    } else {\n      accumulator += print_expr(car(p));\n    }\n\n    accumulator += print_str('[');\n    p = cdr(p);\n\n    if (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        accumulator += print_str(',');\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    accumulator += print_str(']');\n    return accumulator;\n  };\n\n  print_factor = function (p, omitParens) {\n    var accumulator, base, exponent, fbody, parameters, returned;\n    accumulator = \"\";\n\n    if (isNumericAtom(p)) {\n      accumulator += print_number(p, false);\n      return accumulator;\n    }\n\n    if (isstr(p)) {\n      accumulator += print_str(\"\\\"\");\n      accumulator += print_str(p.str);\n      accumulator += print_str(\"\\\"\");\n      return accumulator;\n    }\n\n    if (istensor(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_tensor_latex(p);\n      } else {\n        accumulator += print_tensor(p);\n      }\n\n      return accumulator;\n    }\n\n    if (car(p) === symbol(MULTIPLY)) {\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\left (\");\n          } else {\n            accumulator += print_str('(');\n          }\n        }\n      }\n\n      accumulator += print_expr(p);\n\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\right ) \");\n          } else {\n            accumulator += print_str(')');\n          }\n        }\n      }\n\n      return accumulator;\n    } else if (isadd(p)) {\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n\n      accumulator += print_expr(p);\n\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (car(p) === symbol(POWER)) {\n      base = cadr(p);\n      exponent = caddr(p);\n      accumulator += print_power(base, exponent);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(FUNCTION)) {\n      fbody = cadr(p);\n\n      if (!codeGen) {\n        parameters = caddr(p);\n        accumulator += print_str(\"function \");\n\n        if (DEBUG) {\n          console.log(\"emittedString from print_factor \" + stringsEmittedByUserPrintouts);\n        }\n\n        returned = print_list(parameters);\n        accumulator += returned;\n        accumulator += print_str(\" -> \");\n      }\n\n      accumulator += print_expr(fbody);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(PATTERN)) {\n      accumulator += print_expr(caadr(p));\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\" \\\\rightarrow \");\n      } else {\n        if (printMode === PRINTMODE_HUMAN && !test_flag) {\n          accumulator += print_str(\" -> \");\n        } else {\n          accumulator += print_str(\"->\");\n        }\n      }\n\n      accumulator += print_expr(car(cdr(cadr(p))));\n      return accumulator;\n    }\n\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      accumulator += print_index_function(p);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(FACTORIAL)) {\n      accumulator += print_factorial_function(p);\n      return accumulator;\n    } else if (car(p) === symbol(ABS) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_ABS_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(SQRT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_SQRT_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(TRANSPOSE)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TRANSPOSE_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_TRANSPOSE_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(UNIT)) {\n      if (codeGen) {\n        accumulator += print_UNIT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(INV)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_INV_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_INV_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(BINOMIAL) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_BINOMIAL_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(DEFINT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_DEFINT_latex(p);\n      return accumulator;\n    } else if (isinnerordot(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_DOT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_DOT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SIN)) {\n      if (codeGen) {\n        accumulator += print_SIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(COS)) {\n      if (codeGen) {\n        accumulator += print_COS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TAN)) {\n      if (codeGen) {\n        accumulator += print_TAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCSIN)) {\n      if (codeGen) {\n        accumulator += print_ARCSIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCCOS)) {\n      if (codeGen) {\n        accumulator += print_ARCCOS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCTAN)) {\n      if (codeGen) {\n        accumulator += print_ARCTAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SUM)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_SUM_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_SUM_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(PRODUCT)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_PRODUCT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_PRODUCT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FOR)) {\n      if (codeGen) {\n        accumulator += print_FOR_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(DO)) {\n      if (codeGen) {\n        accumulator += print_DO_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TEST)) {\n      if (codeGen) {\n        accumulator += print_TEST_codegen(p);\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TEST_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") < (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") <= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") > (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") >= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTEQ)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") === (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTEQ_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FLOOR)) {\n      if (codeGen) {\n        accumulator += \"Math.floor(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lfloor {\" + print_expr(cadr(p)) + \"} \\\\rfloor \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(CEILING)) {\n      if (codeGen) {\n        accumulator += \"Math.ceiling(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lceil {\" + print_expr(cadr(p)) + \"} \\\\rceil \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ROUND)) {\n      if (codeGen) {\n        accumulator += \"Math.round(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SETQ)) {\n      if (codeGen) {\n        accumulator += print_SETQ_codegen(p);\n        return accumulator;\n      } else {\n        accumulator += print_expr(cadr(p));\n        accumulator += print_str(\"=\");\n        accumulator += print_expr(caddr(p));\n        return accumulator;\n      }\n    }\n\n    if (iscons(p)) {\n      accumulator += print_factor(car(p));\n      p = cdr(p);\n\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n\n      if (iscons(p)) {\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n\n        while (iscons(p)) {\n          accumulator += print_str(\",\");\n          accumulator += print_expr(car(p));\n          p = cdr(p);\n        }\n      }\n\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (p === symbol(DERIVATIVE)) {\n      accumulator += print_char('d');\n    } else if (p === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.E\");\n      } else {\n        accumulator += print_str(\"e\");\n      }\n    } else if (p === symbol(PI)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\pi\");\n      } else {\n        accumulator += print_str(\"pi\");\n      }\n    } else {\n      accumulator += print_str(get_printname(p));\n    }\n\n    return accumulator;\n  };\n\n  print_list = function (p) {\n    var accumulator;\n    accumulator = \"\";\n\n    switch (p.k) {\n      case CONS:\n        accumulator += '(';\n        accumulator += print_list(car(p));\n\n        if (p === cdr(p) && p !== symbol(NIL)) {\n          console.log(\"oh no recursive!\");\n          debugger;\n        }\n\n        p = cdr(p);\n\n        while (iscons(p)) {\n          accumulator += \" \";\n          accumulator += print_list(car(p));\n          p = cdr(p);\n\n          if (p === cdr(p) && p !== symbol(NIL)) {\n            console.log(\"oh no recursive!\");\n            debugger;\n          }\n        }\n\n        if (p !== symbol(NIL)) {\n          accumulator += \" . \";\n          accumulator += print_list(p);\n        }\n\n        accumulator += ')';\n        break;\n\n      case STR:\n        accumulator += p.str;\n        break;\n\n      case NUM:\n      case DOUBLE:\n        accumulator += print_number(p, true);\n        break;\n\n      case SYM:\n        accumulator += get_printname(p);\n        break;\n\n      default:\n        accumulator += \"<tensor>\";\n    }\n\n    return accumulator;\n  };\n\n  print_multiply_sign = function () {\n    var accumulator;\n    accumulator = \"\";\n\n    if (printMode === PRINTMODE_LATEX) {\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(\" \");\n      } else {\n        return accumulator;\n      }\n    }\n\n    if (printMode === PRINTMODE_HUMAN && !test_flag && !codeGen) {\n      accumulator += print_str(\" \");\n    } else {\n      accumulator += print_str(\"*\");\n    }\n\n    return accumulator;\n  };\n\n  is_denominator = function (p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && isnegativeterm(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  any_denominators = function (p) {\n    var q;\n    p = cdr(p);\n\n    while (iscons(p)) {\n      q = car(p);\n\n      if (is_denominator(q)) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n  /*\n  \n  Prints in \"2d\", e.g. instead of 1/(x+1)^2 :\n  \n        1\n   ----------\n           2\n    (1 + x)\n  \n   Note that although this looks more natural, a) it's not parsable and\n   b) it can be occasionally be ambiguous, such as:\n  \n     1\n   ----\n     2\n   x\n  \n  is 1/x^2 but it also looks a little like x^(1/2)\n   */\n\n\n  YMAX = 10000;\n\n  glyph = function () {\n    function glyph() {}\n\n    glyph.prototype.c = 0;\n    glyph.prototype.x = 0;\n    glyph.prototype.y = 0;\n    return glyph;\n  }();\n\n  chartab = [];\n\n  for (charTabIndex = i1 = 0, ref1 = YMAX; 0 <= ref1 ? i1 < ref1 : i1 > ref1; charTabIndex = 0 <= ref1 ? ++i1 : --i1) {\n    chartab[charTabIndex] = new glyph();\n  }\n\n  yindex = 0;\n  level = 0;\n  emit_x = 0;\n  expr_level = 0;\n  display_flag = 0;\n\n  printchar_nowrap = function (character) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += character;\n    return accumulator;\n  };\n\n  printchar = function (character) {\n    return printchar_nowrap(character);\n  };\n\n  print2dascii = function (p) {\n    var beenPrinted, h, ref2, w, y;\n    h = 0;\n    w = 0;\n    y = 0;\n    save();\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_top_expr(p);\n    ref2 = get_size(0, yindex), h = ref2[0], w = ref2[1], y = ref2[2];\n\n    if (w > 100) {\n      printline(p);\n      restore();\n      return;\n    }\n\n    beenPrinted = print_glyphs();\n    restore();\n    return beenPrinted;\n  };\n\n  emit_top_expr = function (p) {\n    if (car(p) === symbol(SETQ)) {\n      emit_expr(cadr(p));\n\n      __emit_str(\" = \");\n\n      emit_expr(caddr(p));\n      return;\n    }\n\n    if (istensor(p)) {\n      return emit_tensor(p);\n    } else {\n      return emit_expr(p);\n    }\n  };\n\n  will_be_displayed_as_fraction = function (p) {\n    if (level > 0) {\n      return 0;\n    }\n\n    if (isfraction(p)) {\n      return 1;\n    }\n\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n\n    if (isfraction(cadr(p))) {\n      return 1;\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  emit_expr = function (p) {\n    expr_level++;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      if (__is_negative(car(p))) {\n        __emit_char('-');\n\n        if (will_be_displayed_as_fraction(car(p))) {\n          __emit_char(' ');\n        }\n      }\n\n      emit_term(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n\n          __emit_char('-');\n\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n\n          __emit_char('+');\n\n          __emit_char(' ');\n        }\n\n        emit_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (__is_negative(p)) {\n        __emit_char('-');\n\n        if (will_be_displayed_as_fraction(p)) {\n          __emit_char(' ');\n        }\n      }\n\n      emit_term(p);\n    }\n\n    return expr_level--;\n  };\n\n  emit_unsigned_expr = function (p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      emit_term(car(p));\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n\n          __emit_char('-');\n\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n\n          __emit_char('+');\n\n          __emit_char(' ');\n        }\n\n        emit_term(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return emit_term(p);\n    }\n  };\n\n  __is_negative = function (p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    }\n\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  emit_term = function (p) {\n    var n;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      n = count_denominators(p);\n\n      if (n && level === 0) {\n        return emit_fraction(p, n);\n      } else {\n        return emit_multiply(p, n);\n      }\n    } else {\n      return emit_factor(p);\n    }\n  };\n\n  isdenominator = function (p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && __is_negative(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  count_denominators = function (p) {\n    var count, q;\n    count = 0;\n    p = cdr(p);\n\n    while (iscons(p)) {\n      q = car(p);\n\n      if (isdenominator(q)) {\n        count++;\n      }\n\n      p = cdr(p);\n    }\n\n    return count;\n  };\n\n  emit_multiply = function (p, n) {\n    var results;\n\n    if (n === 0) {\n      p = cdr(p);\n\n      if (isplusone(car(p)) || isminusone(car(p))) {\n        p = cdr(p);\n      }\n\n      emit_factor(car(p));\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        __emit_char(' ');\n\n        emit_factor(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      emit_numerators(p);\n\n      __emit_char('/');\n\n      if (n > 1 || isfraction(cadr(p))) {\n        __emit_char('(');\n\n        emit_denominators(p);\n        return __emit_char(')');\n      } else {\n        return emit_denominators(p);\n      }\n    }\n  };\n\n  emit_fraction = function (p, d) {\n    var count, doNothing, k1, k2, n, x;\n    count = 0;\n    k1 = 0;\n    k2 = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = one;\n    p4 = one;\n\n    if (isrational(cadr(p))) {\n      push(cadr(p));\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(cadr(p));\n      mp_denominator();\n      p4 = pop();\n    }\n\n    if (isdouble(cadr(p))) {\n      push(cadr(p));\n      absval();\n      p3 = pop();\n    }\n\n    if (isplusone(p3)) {\n      n = 0;\n    } else {\n      n = 1;\n    }\n\n    p1 = cdr(p);\n\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        n++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    x = emit_x;\n    k1 = yindex;\n    count = 0;\n\n    if (!isplusone(p3)) {\n      emit_number(p3, 0);\n      count++;\n    }\n\n    p1 = cdr(p);\n\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n\n        if (n === 1) {\n          emit_expr(p2);\n        } else {\n          emit_factor(p2);\n        }\n\n        count++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    if (count === 0) {\n      __emit_char('1');\n    }\n\n    k2 = yindex;\n    count = 0;\n\n    if (!isplusone(p4)) {\n      emit_number(p4, 0);\n      count++;\n      d++;\n    }\n\n    p1 = cdr(p);\n\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n\n        emit_denominator(p2, d);\n        count++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  emit_numerators = function (p) {\n    var doNothing, n;\n    save();\n    n = 0;\n    p1 = one;\n    p = cdr(p);\n\n    if (isrational(car(p))) {\n      push(car(p));\n      mp_numerator();\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    } else if (isdouble(car(p))) {\n      push(car(p));\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    }\n\n    n = 0;\n\n    if (!isplusone(p1)) {\n      emit_number(p1, 0);\n      n++;\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        doNothing = 1;\n      } else {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n\n        emit_factor(car(p));\n        n++;\n      }\n\n      p = cdr(p);\n    }\n\n    if (n === 0) {\n      __emit_char('1');\n    }\n\n    return restore();\n  };\n\n  emit_denominators = function (p) {\n    var n;\n    save();\n    n = 0;\n    p = cdr(p);\n\n    if (isfraction(car(p))) {\n      push(car(p));\n      mp_denominator();\n      p1 = pop();\n      emit_number(p1, 0);\n      n++;\n      p = cdr(p);\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n\n        emit_denominator(car(p), 0);\n        n++;\n      }\n\n      p = cdr(p);\n    }\n\n    return restore();\n  };\n\n  emit_factor = function (p) {\n    if (istensor(p)) {\n      if (level === 0) {\n        emit_flat_tensor(p);\n      } else {\n        emit_flat_tensor(p);\n      }\n\n      return;\n    }\n\n    if (isdouble(p)) {\n      emit_number(p, 0);\n      return;\n    }\n\n    if (car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY)) {\n      emit_subexpr(p);\n      return;\n    }\n\n    if (car(p) === symbol(POWER)) {\n      emit_power(p);\n      return;\n    }\n\n    if (iscons(p)) {\n      emit_function(p);\n      return;\n    }\n\n    if (isNumericAtom(p)) {\n      if (level === 0) {\n        emit_numerical_fraction(p);\n      } else {\n        emit_number(p, 0);\n      }\n\n      return;\n    }\n\n    if (issymbol(p)) {\n      emit_symbol(p);\n      return;\n    }\n\n    if (isstr(p)) {\n      emit_string(p);\n    }\n  };\n\n  emit_numerical_fraction = function (p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    save();\n    push(p);\n    mp_numerator();\n    absval();\n    p3 = pop();\n    push(p);\n    mp_denominator();\n    p4 = pop();\n\n    if (isplusone(p4)) {\n      emit_number(p3, 0);\n      restore();\n      return;\n    }\n\n    x = emit_x;\n    k1 = yindex;\n    emit_number(p3, 0);\n    k2 = yindex;\n    emit_number(p4, 0);\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  isfactor = function (p) {\n    if (iscons(p) && car(p) !== symbol(ADD) && car(p) !== symbol(MULTIPLY) && car(p) !== symbol(POWER)) {\n      return 1;\n    }\n\n    if (issymbol(p)) {\n      return 1;\n    }\n\n    if (isfraction(p)) {\n      return 0;\n    }\n\n    if (isnegativenumber(p)) {\n      return 0;\n    }\n\n    if (isNumericAtom(p)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  emit_power = function (p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n\n    if (cadr(p) === symbol(E)) {\n      __emit_str(\"exp(\");\n\n      emit_expr(caddr(p));\n\n      __emit_char(')');\n\n      return;\n    }\n\n    if (level > 0) {\n      if (isminusone(caddr(p))) {\n        __emit_char('1');\n\n        __emit_char('/');\n\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n      } else {\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n\n        __emit_char('^');\n\n        if (isfactor(caddr(p))) {\n          emit_factor(caddr(p));\n        } else {\n          emit_subexpr(caddr(p));\n        }\n      }\n\n      return;\n    }\n\n    if (__is_negative(caddr(p))) {\n      x = emit_x;\n      k1 = yindex;\n\n      __emit_char('1');\n\n      k2 = yindex;\n      emit_denominator(p, 1);\n      fixup_fraction(x, k1, k2);\n      return;\n    }\n\n    k1 = yindex;\n\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n\n    k2 = yindex;\n    level++;\n    emit_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_denominator = function (p, n) {\n    var k1, k2;\n    k1 = 0;\n    k2 = 0;\n\n    if (isminusone(caddr(p))) {\n      if (n === 1) {\n        emit_expr(cadr(p));\n      } else {\n        emit_factor(cadr(p));\n      }\n\n      return;\n    }\n\n    k1 = yindex;\n\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n\n    k2 = yindex;\n    level++;\n    emit_unsigned_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_function = function (p) {\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      emit_index_function(p);\n      return;\n    }\n\n    if (car(p) === symbol(FACTORIAL)) {\n      emit_factorial_function(p);\n      return;\n    }\n\n    if (car(p) === symbol(DERIVATIVE)) {\n      __emit_char('d');\n    } else {\n      emit_symbol(car(p));\n    }\n\n    __emit_char('(');\n\n    p = cdr(p);\n\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        __emit_char(',');\n\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    return __emit_char(')');\n  };\n\n  emit_index_function = function (p) {\n    p = cdr(p);\n\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      emit_subexpr(car(p));\n    } else {\n      emit_expr(car(p));\n    }\n\n    __emit_char('[');\n\n    p = cdr(p);\n\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        __emit_char(',');\n\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    return __emit_char(']');\n  };\n\n  emit_factorial_function = function (p) {\n    p = cadr(p);\n\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      emit_subexpr(p);\n    } else {\n      emit_expr(p);\n    }\n\n    return __emit_char('!');\n  };\n\n  emit_subexpr = function (p) {\n    __emit_char('(');\n\n    emit_expr(p);\n    return __emit_char(')');\n  };\n\n  emit_symbol = function (p) {\n    var i, j1, pPrintName, ref2, results;\n    i = 0;\n\n    if (p === symbol(E)) {\n      __emit_str(\"exp(1)\");\n\n      return;\n    }\n\n    pPrintName = get_printname(p);\n    results = [];\n\n    for (i = j1 = 0, ref2 = pPrintName.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(pPrintName[i]));\n    }\n\n    return results;\n  };\n\n  emit_string = function (p) {\n    var i, j1, pString, ref2;\n    i = 0;\n    pString = p.str;\n\n    __emit_char('\"');\n\n    for (i = j1 = 0, ref2 = pString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      __emit_char(pString[i]);\n    }\n\n    return __emit_char('\"');\n  };\n\n  fixup_fraction = function (x, k1, k2) {\n    var dx, dy, h1, h2, i, j1, ref2, ref3, ref4, results, w, w1, w2, y, y1, y2;\n    dx = 0;\n    dy = 0;\n    i = 0;\n    w = 0;\n    y = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    ref2 = get_size(k1, k2), h1 = ref2[0], w1 = ref2[1], y1 = ref2[2];\n    ref3 = get_size(k2, yindex), h2 = ref3[0], w2 = ref3[1], y2 = ref3[2];\n\n    if (w2 > w1) {\n      dx = (w2 - w1) / 2;\n    } else {\n      dx = 0;\n    }\n\n    dx++;\n    y = y1 + h1 - 1;\n    dy = -y - 1;\n    move(k1, k2, dx, dy);\n\n    if (w2 > w1) {\n      dx = -w1;\n    } else {\n      dx = -w1 + (w1 - w2) / 2;\n    }\n\n    dx++;\n    dy = -y2 + 1;\n    move(k2, yindex, dx, dy);\n\n    if (w2 > w1) {\n      w = w2;\n    } else {\n      w = w1;\n    }\n\n    w += 2;\n    emit_x = x;\n    results = [];\n\n    for (i = j1 = 0, ref4 = w; 0 <= ref4 ? j1 < ref4 : j1 > ref4; i = 0 <= ref4 ? ++j1 : --j1) {\n      results.push(__emit_char('-'));\n    }\n\n    return results;\n  };\n\n  fixup_power = function (k1, k2) {\n    var dy, h1, h2, ref2, ref3, w1, w2, y1, y2;\n    dy = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    ref2 = get_size(k1, k2), h1 = ref2[0], w1 = ref2[1], y1 = ref2[2];\n    ref3 = get_size(k2, yindex), h2 = ref3[0], w2 = ref3[1], y2 = ref3[2];\n    dy = -y2 - h2 + 1;\n    dy += y1 - 1;\n    return move(k2, yindex, 0, dy);\n  };\n\n  move = function (j, k, dx, dy) {\n    var i, j1, ref2, ref3, results;\n    i = 0;\n    results = [];\n\n    for (i = j1 = ref2 = j, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      chartab[i].x += dx;\n      results.push(chartab[i].y += dy);\n    }\n\n    return results;\n  };\n\n  get_size = function (j, k) {\n    var h, i, j1, max_x, max_y, min_x, min_y, ref2, ref3, w, y;\n    i = 0;\n    min_x = chartab[j].x;\n    max_x = chartab[j].x;\n    min_y = chartab[j].y;\n    max_y = chartab[j].y;\n\n    for (i = j1 = ref2 = j + 1, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      if (chartab[i].x < min_x) {\n        min_x = chartab[i].x;\n      }\n\n      if (chartab[i].x > max_x) {\n        max_x = chartab[i].x;\n      }\n\n      if (chartab[i].y < min_y) {\n        min_y = chartab[i].y;\n      }\n\n      if (chartab[i].y > max_y) {\n        max_y = chartab[i].y;\n      }\n    }\n\n    h = max_y - min_y + 1;\n    w = max_x - min_x + 1;\n    y = min_y;\n    return [h, w, y];\n  };\n\n  displaychar = function (c) {\n    return __emit_char(c);\n  };\n\n  __emit_char = function (c) {\n    if (yindex === YMAX) {\n      return;\n    }\n\n    if (chartab[yindex] == null) {\n      debugger;\n    }\n\n    chartab[yindex].c = c;\n    chartab[yindex].x = emit_x;\n    chartab[yindex].y = 0;\n    yindex++;\n    return emit_x++;\n  };\n\n  __emit_str = function (s) {\n    var i, j1, ref2, results;\n    i = 0;\n    results = [];\n\n    for (i = j1 = 0, ref2 = s.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(s[i]));\n    }\n\n    return results;\n  };\n\n  emit_number = function (p, emit_sign) {\n    var i, j1, l1, m1, ref2, ref3, ref4, results, results1, tmpString;\n    tmpString = \"\";\n    i = 0;\n\n    switch (p.k) {\n      case NUM:\n        tmpString = p.q.a.toString();\n\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n\n        for (i = j1 = 0, ref2 = tmpString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n          __emit_char(tmpString[i]);\n        }\n\n        tmpString = p.q.b.toString();\n\n        if (tmpString === \"1\") {\n          break;\n        }\n\n        __emit_char('/');\n\n        results = [];\n\n        for (i = l1 = 0, ref3 = tmpString.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n          results.push(__emit_char(tmpString[i]));\n        }\n\n        return results;\n        break;\n\n      case DOUBLE:\n        tmpString = doubleToReasonableString(p.d);\n\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n\n        results1 = [];\n\n        for (i = m1 = 0, ref4 = tmpString.length; 0 <= ref4 ? m1 < ref4 : m1 > ref4; i = 0 <= ref4 ? ++m1 : --m1) {\n          results1.push(__emit_char(tmpString[i]));\n        }\n\n        return results1;\n    }\n  };\n\n  cmpGlyphs = function (a, b) {\n    if (a.y < b.y) {\n      return -1;\n    }\n\n    if (a.y > b.y) {\n      return 1;\n    }\n\n    if (a.x < b.x) {\n      return -1;\n    }\n\n    if (a.x > b.x) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  print_glyphs = function () {\n    var accumulator, i, j1, ref2, subsetOfStack, x, y;\n    i = 0;\n    accumulator = \"\";\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        accumulator += printchar('\\n');\n        x = 0;\n        y++;\n      }\n\n      while (chartab[i].x > x) {\n        accumulator += printchar_nowrap(' ');\n        x++;\n      }\n\n      accumulator += printchar_nowrap(chartab[i].c);\n      x++;\n    }\n\n    return accumulator;\n  };\n\n  buffer = \"\";\n\n  getdisplaystr = function () {\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_expr(pop());\n    fill_buf();\n    return buffer;\n  };\n\n  fill_buf = function () {\n    var i, j1, ref2, sIndex, subsetOfStack, tmpBuffer, x, y;\n    tmpBuffer = buffer;\n    sIndex = 0;\n    i = 0;\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        tmpBuffer[sIndex++] = '\\n';\n        x = 0;\n        y++;\n      }\n\n      while (chartab[i].x > x) {\n        tmpBuffer[sIndex++] = ' ';\n        x++;\n      }\n\n      tmpBuffer[sIndex++] = chartab[i].c;\n      x++;\n    }\n\n    return tmpBuffer[sIndex++] = '\\n';\n  };\n\n  N = 100;\n\n  oneElement = function () {\n    function oneElement() {}\n\n    oneElement.prototype.x = 0;\n    oneElement.prototype.y = 0;\n    oneElement.prototype.h = 0;\n    oneElement.prototype.w = 0;\n    oneElement.prototype.index = 0;\n    oneElement.prototype.count = 0;\n    return oneElement;\n  }();\n\n  elem = [];\n\n  for (elelmIndex = j1 = 0; j1 < 10000; elelmIndex = ++j1) {\n    elem[elelmIndex] = new oneElement();\n  }\n\n  SPACE_BETWEEN_COLUMNS = 3;\n  SPACE_BETWEEN_ROWS = 1;\n\n  emit_tensor = function (p) {\n    var col, dx, dy, eh, ew, h, i, l1, m1, n, n1, ncol, nrow, o1, ref2, ref3, ref4, ref5, ref6, row, w, x, y;\n    i = 0;\n    n = 0;\n    nrow = 0;\n    ncol = 0;\n    x = 0;\n    y = 0;\n    h = 0;\n    w = 0;\n    dx = 0;\n    dy = 0;\n    eh = 0;\n    ew = 0;\n    row = 0;\n    col = 0;\n\n    if (p.tensor.ndim > 2) {\n      emit_flat_tensor(p);\n      return;\n    }\n\n    nrow = p.tensor.dim[0];\n\n    if (p.tensor.ndim === 2) {\n      ncol = p.tensor.dim[1];\n    } else {\n      ncol = 1;\n    }\n\n    n = nrow * ncol;\n\n    if (n > N) {\n      emit_flat_tensor(p);\n      return;\n    }\n\n    x = emit_x;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      elem[i].index = yindex;\n      elem[i].x = emit_x;\n      emit_expr(p.tensor.elem[i]);\n      elem[i].count = yindex - elem[i].index;\n      ref3 = get_size(elem[i].index, yindex), elem[i].h = ref3[0], elem[i].w = ref3[1], elem[i].y = ref3[2];\n    }\n\n    eh = 0;\n    ew = 0;\n\n    for (i = m1 = 0, ref4 = n; 0 <= ref4 ? m1 < ref4 : m1 > ref4; i = 0 <= ref4 ? ++m1 : --m1) {\n      if (elem[i].h > eh) {\n        eh = elem[i].h;\n      }\n\n      if (elem[i].w > ew) {\n        ew = elem[i].w;\n      }\n    }\n\n    h = nrow * eh + (nrow - 1) * SPACE_BETWEEN_ROWS;\n    w = ncol * ew + (ncol - 1) * SPACE_BETWEEN_COLUMNS;\n    y = -(h / 2);\n\n    for (row = n1 = 0, ref5 = nrow; 0 <= ref5 ? n1 < ref5 : n1 > ref5; row = 0 <= ref5 ? ++n1 : --n1) {\n      for (col = o1 = 0, ref6 = ncol; 0 <= ref6 ? o1 < ref6 : o1 > ref6; col = 0 <= ref6 ? ++o1 : --o1) {\n        i = row * ncol + col;\n        dx = x - elem[i].x;\n        dy = y - elem[i].y;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n        dx = 0;\n\n        if (col > 0) {\n          dx = col * (ew + SPACE_BETWEEN_COLUMNS);\n        }\n\n        dy = 0;\n\n        if (row > 0) {\n          dy = row * (eh + SPACE_BETWEEN_ROWS);\n        }\n\n        dx += (ew - elem[i].w) / 2;\n        dy += (eh - elem[i].h) / 2;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n      }\n    }\n\n    return emit_x = x + w;\n    /*\n    if 0\n    \n       * left brace\n    \n      for (i = 0; i < h; i++) {\n        if (yindex == YMAX)\n          break\n        chartab[yindex].c = '|'\n        chartab[yindex].x = x - 2\n        chartab[yindex].y = y + i\n        yindex++\n      }\n    \n       * right brace\n    \n      emit_x++\n    \n      for (i = 0; i < h; i++) {\n        if (yindex == YMAX)\n          break\n        chartab[yindex].c = '|'\n        chartab[yindex].x = emit_x\n        chartab[yindex].y = y + i\n        yindex++\n      }\n    \n      emit_x++\n    \n    endif\n     */\n  };\n\n  emit_flat_tensor = function (p) {\n    return emit_tensor_inner(p, 0, 0);\n  };\n\n  emit_tensor_inner = function (p, j, k) {\n    var i, l1, ref2;\n    i = 0;\n\n    __emit_char('(');\n\n    for (i = l1 = 0, ref2 = p.tensor.dim[j]; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (j + 1 === p.tensor.ndim) {\n        emit_expr(p.tensor.elem[k]);\n        k = k + 1;\n      } else {\n        k = emit_tensor_inner(p, j + 1, k);\n      }\n\n      if (i + 1 < p.tensor.dim[j]) {\n        __emit_char(',');\n      }\n    }\n\n    __emit_char(')');\n\n    return k;\n  };\n\n  Eval_product = function () {\n    var body, i, indexVariable, j, k, l1, oldIndexVariableValue, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    body = cadr(p1);\n    indexVariable = caddr(p1);\n\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n\n    oldIndexVariableValue = get_binding(indexVariable);\n    push_integer(1);\n\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n\n      if (DEBUG) {\n        console.log(\"product - factor 1: \" + stack[tos - 1].toString());\n        console.log(\"product - factor 2: \" + stack[tos - 2].toString());\n      }\n\n      multiply();\n\n      if (DEBUG) {\n        console.log(\"product - result: \" + stack[tos - 1].toString());\n      }\n    }\n\n    return set_binding(indexVariable, oldIndexVariableValue);\n  };\n\n  qadd = function () {\n    var gcdBetweenNumeratorAndDenominator, qadd_ab, qadd_ba, qadd_denominator, qadd_frac1, qadd_frac2, qadd_numerator, resultSum;\n    qadd_frac2 = pop();\n    qadd_frac1 = pop();\n    qadd_ab = mmul(qadd_frac1.q.a, qadd_frac2.q.b);\n    qadd_ba = mmul(qadd_frac1.q.b, qadd_frac2.q.a);\n    qadd_numerator = madd(qadd_ab, qadd_ba);\n\n    if (MZERO(qadd_numerator)) {\n      push(zero);\n      return;\n    }\n\n    qadd_denominator = mmul(qadd_frac1.q.b, qadd_frac2.q.b);\n    gcdBetweenNumeratorAndDenominator = mgcd(qadd_numerator, qadd_denominator);\n    gcdBetweenNumeratorAndDenominator = makeSignSameAs(gcdBetweenNumeratorAndDenominator, qadd_denominator);\n    resultSum = new U();\n    resultSum.k = NUM;\n    resultSum.q.a = mdiv(qadd_numerator, gcdBetweenNumeratorAndDenominator);\n    resultSum.q.b = mdiv(qadd_denominator, gcdBetweenNumeratorAndDenominator);\n    return push(resultSum);\n  };\n\n  qdiv = function () {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (MZERO(p2.q.a)) {\n      stop(\"divide by zero\");\n    }\n\n    if (MZERO(p1.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    aa = mmul(p1.q.a, p2.q.b);\n    bb = mmul(p1.q.b, p2.q.a);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  };\n\n  qmul = function () {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (MZERO(p1.q.a) || MZERO(p2.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    aa = mmul(p1.q.a, p2.q.a);\n    bb = mmul(p1.q.b, p2.q.b);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  };\n\n  qpow = function () {\n    save();\n    qpowf();\n    return restore();\n  };\n\n  qpowf = function () {\n    var a, b, expo, t, x, y;\n    expo = 0;\n    p2 = pop();\n    p1 = pop();\n\n    if (isplusone(p1) || isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    }\n\n    if (isminusone(p1) && isoneovertwo(p2)) {\n      push(imaginaryunit);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      if (isnegativenumber(p2)) {\n        stop(\"divide by zero\");\n      }\n\n      push(zero);\n      return;\n    }\n\n    if (isplusone(p2)) {\n      push(p1);\n      return;\n    }\n\n    if (isinteger(p2)) {\n      push(p2);\n      expo = pop_integer();\n\n      if (isNaN(expo)) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n        return;\n      }\n\n      x = mpow(p1.q.a, Math.abs(expo));\n      y = mpow(p1.q.b, Math.abs(expo));\n\n      if (expo < 0) {\n        t = x;\n        x = y;\n        y = t;\n        x = makeSignSameAs(x, y);\n        y = makePositive(y);\n      }\n\n      p3 = new U();\n      p3.k = NUM;\n      p3.q.a = x;\n      p3.q.b = y;\n      push(p3);\n      return;\n    }\n\n    if (isminusone(p1)) {\n      push(p2);\n      normalize_angle();\n      return;\n    }\n\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      qpow();\n      push_integer(-1);\n      push(p2);\n      qpow();\n      multiply();\n      return;\n    }\n\n    if (!isinteger(p1)) {\n      push(p1);\n      mp_numerator();\n      push(p2);\n      qpow();\n      push(p1);\n      mp_denominator();\n      push(p2);\n      negate();\n      qpow();\n      multiply();\n      return;\n    }\n\n    if (is_small_integer(p1)) {\n      push(p1);\n      push(p2);\n      quickfactor();\n      return;\n    }\n\n    if (!isSmall(p2.q.a) || !isSmall(p2.q.b)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    a = p2.q.a;\n    b = p2.q.b;\n    x = mroot(p1.q.a, b);\n\n    if (x === 0) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    y = mpow(x, a);\n    p3 = new U();\n    p3.k = NUM;\n\n    if (p2.q.a.isNegative()) {\n      p3.q.a = bigInt(1);\n      p3.q.b = y;\n    } else {\n      p3.q.a = y;\n      p3.q.b = bigInt(1);\n    }\n\n    return push(p3);\n  };\n\n  normalize_angle = function () {\n    save();\n    p1 = pop();\n\n    if (isinteger(p1)) {\n      if (p1.q.a.isOdd()) {\n        push_integer(-1);\n      } else {\n        push_integer(1);\n      }\n\n      restore();\n      return;\n    }\n\n    push(p1);\n    bignum_truncate();\n    p2 = pop();\n\n    if (isnegativenumber(p1)) {\n      push(p2);\n      push_integer(-1);\n      add();\n      p2 = pop();\n    }\n\n    push(p1);\n    push(p2);\n    subtract();\n    p3 = pop();\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p3);\n    list(3);\n\n    if (p2.q.a.isOdd()) {\n      negate();\n    }\n\n    return restore();\n  };\n\n  is_small_integer = function (p) {\n    return isSmall(p.q.a);\n  };\n\n  quickfactor = function () {\n    var h, i, l1, n, ref2, stackIndex;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push(p1);\n    factor_small_number();\n    n = tos - h;\n    stackIndex = h;\n\n    for (i = l1 = 0, ref2 = n; l1 < ref2; i = l1 += 2) {\n      push(stack[stackIndex + i]);\n      push(stack[stackIndex + i + 1]);\n      push(p2);\n      multiply();\n      quickpower();\n    }\n\n    multiply_all(tos - h - n);\n    p1 = pop();\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  quickpower = function () {\n    var expo;\n    expo = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    bignum_truncate();\n    p3 = pop();\n    push(p2);\n    push(p3);\n    subtract();\n    p4 = pop();\n\n    if (!isZeroAtomOrTensor(p4)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p4);\n      list(3);\n    }\n\n    push(p3);\n    expo = pop_integer();\n\n    if (isNaN(expo)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p3);\n      list(3);\n      restore();\n      return;\n    }\n\n    if (expo === 0) {\n      restore();\n      return;\n    }\n\n    push(p1);\n    bignum_power_number(expo);\n    return restore();\n  };\n\n  Eval_quotient = function () {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      p1 = symbol(SYMBOL_X);\n    }\n\n    push(p1);\n    return divpoly();\n  };\n\n  divpoly = function () {\n    var dividend, divisor, h, i, l1, m, n, ref2, x;\n    h = 0;\n    i = 0;\n    m = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    dividend = tos;\n    push(p1);\n    push(p3);\n    m = coeff() - 1;\n    divisor = tos;\n    push(p2);\n    push(p3);\n    n = coeff() - 1;\n    x = m - n;\n    push_integer(0);\n    p5 = pop();\n\n    while (x >= 0) {\n      push(stack[dividend + m]);\n      push(stack[divisor + n]);\n      divide();\n      p4 = pop();\n\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        push(stack[dividend + x + i]);\n        push(stack[divisor + i]);\n        push(p4);\n        multiply();\n        subtract();\n        stack[dividend + x + i] = pop();\n      }\n\n      push(p5);\n      push(p4);\n      push(p3);\n      push_integer(x);\n      power();\n      multiply();\n      add();\n      p5 = pop();\n      m--;\n      x--;\n    }\n\n    moveTos(h);\n    push(p5);\n    return restore();\n  };\n\n  Eval_rationalize = function () {\n    push(cadr(p1));\n    Eval();\n    return rationalize();\n  };\n\n  rationalize = function () {\n    var x;\n    x = expanding;\n    yyrationalize();\n    return expanding = x;\n  };\n\n  yyrationalize = function () {\n    var commonDenominator, eachTerm, theArgument;\n    theArgument = pop();\n\n    if (istensor(theArgument)) {\n      __rationalize_tensor(theArgument);\n\n      return;\n    }\n\n    expanding = 0;\n\n    if (car(theArgument) !== symbol(ADD)) {\n      push(theArgument);\n      return;\n    }\n\n    if (DEBUG) {\n      printf(\"rationalize: this is the input expr:\\n\");\n      printline(theArgument);\n    }\n\n    push(one);\n    multiply_denominators(theArgument);\n    commonDenominator = pop();\n\n    if (DEBUG) {\n      printf(\"rationalize: this is the common denominator:\\n\");\n      printline(commonDenominator);\n    }\n\n    push(zero);\n    eachTerm = cdr(theArgument);\n\n    while (iscons(eachTerm)) {\n      push(commonDenominator);\n      push(car(eachTerm));\n      multiply();\n      add();\n      eachTerm = cdr(eachTerm);\n    }\n\n    if (DEBUG) {\n      printf(\"rationalize: original expr times common denominator:\\n\");\n      printline(stack[tos - 1]);\n    }\n\n    Condense();\n\n    if (DEBUG) {\n      printf(\"rationalize: after factoring:\\n\");\n      printline(stack[tos - 1]);\n    }\n\n    push(commonDenominator);\n    divide();\n\n    if (DEBUG) {\n      printf(\"rationalize: after dividing by common denom. (and we're done):\\n\");\n      return printline(stack[tos - 1]);\n    }\n  };\n\n  multiply_denominators = function (p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        multiply_denominators_term(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return multiply_denominators_term(p);\n    }\n  };\n\n  multiply_denominators_term = function (p) {\n    var results;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        multiply_denominators_factor(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return multiply_denominators_factor(p);\n    }\n  };\n\n  multiply_denominators_factor = function (p) {\n    if (car(p) !== symbol(POWER)) {\n      return;\n    }\n\n    push(p);\n    p = caddr(p);\n\n    if (isnegativenumber(p)) {\n      inverse();\n\n      __lcm();\n\n      return;\n    }\n\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      inverse();\n\n      __lcm();\n\n      return;\n    }\n\n    return pop();\n  };\n\n  __rationalize_tensor = function (theTensor) {\n    var i, l1, n, ref2;\n    i = 0;\n    push(theTensor);\n    Eval();\n    theTensor = pop();\n\n    if (!istensor(theTensor)) {\n      push(theTensor);\n      return;\n    }\n\n    n = theTensor.tensor.nelem;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(theTensor.tensor.elem[i]);\n      rationalize();\n      theTensor.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(theTensor);\n    return push(theTensor);\n  };\n\n  __lcm = function () {\n    save();\n    p1 = pop();\n    p2 = pop();\n    push(p1);\n    push(p2);\n    multiply();\n    push(p1);\n    push(p2);\n    gcd();\n    divide();\n    return restore();\n  };\n  /*\n   Returns the real part of complex z\n  \n    z    real(z)\n    -    -------\n  \n    a + i b    a\n  \n    exp(i a)  cos(a)\n   */\n\n\n  Eval_real = function () {\n    push(cadr(p1));\n    Eval();\n    return real();\n  };\n\n  real = function () {\n    save();\n    rect();\n    p1 = pop();\n    push(p1);\n    push(p1);\n    conjugate();\n    add();\n    push_integer(2);\n    divide();\n    return restore();\n  };\n  /*\n  Convert complex z to rectangular form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n   */\n\n\n  DEBUG_RECT = false;\n\n  Eval_rect = function () {\n    push(cadr(p1));\n    Eval();\n    return rect();\n  };\n\n  rect = function () {\n    var input;\n    save();\n    p1 = pop();\n    input = p1;\n\n    if (DEBUG_RECT) {\n      console.log(\"RECT of \" + input);\n    }\n\n    if (DEBUG_RECT) {\n      console.log(\"any clock forms in : \" + input + \" ? \" + findPossibleClockForm(input));\n    }\n\n    if (issymbol(p1)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push(p1);\n      } else {\n        push_symbol(YYRECT);\n        push(p1);\n        list(2);\n      }\n    } else if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))) && !findPossibleExponentialForm(p1) && !findPossibleClockForm(p1) && !(Find(p1, symbol(SIN)) && Find(p1, symbol(COS)) && Find(p1, imaginaryunit))) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n\n      push(p1);\n    } else if (car(p1) === symbol(MULTIPLY) && isimaginaryunit(cadr(p1)) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      push(p1);\n    } else if (car(p1) === symbol(ADD)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is a sum \");\n      }\n\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        rect();\n        add();\n        p1 = cdr(p1);\n      }\n    } else {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is NOT a sum \");\n      }\n\n      push(p1);\n      abs();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" abs: \" + stack[tos - 1].toString());\n      }\n\n      push(p1);\n      arg();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" arg of \" + p1 + \" : \" + stack[tos - 1].toString());\n      }\n\n      p1 = pop();\n      push(p1);\n      cosine();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cosine: \" + stack[tos - 1].toString());\n      }\n\n      push(imaginaryunit);\n      push(p1);\n      sine();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" sine: \" + stack[tos - 1].toString());\n      }\n\n      multiply();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" i * sine: \" + stack[tos - 1].toString());\n      }\n\n      add();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cos + i * sine: \" + stack[tos - 1].toString());\n      }\n\n      multiply();\n    }\n\n    restore();\n\n    if (DEBUG_RECT) {\n      return console.log(\"rect of \" + input + \" : \" + stack[tos - 1]);\n    }\n  };\n\n  show_power_debug = false;\n  performing_roots = false;\n\n  Eval_roots = function () {\n    p2 = cadr(p1);\n\n    if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n      push(cadr(p2));\n      Eval();\n      push(caddr(p2));\n      Eval();\n      subtract();\n    } else {\n      push(p2);\n      Eval();\n      p2 = pop();\n\n      if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n        push(cadr(p2));\n        Eval();\n        push(caddr(p2));\n        Eval();\n        subtract();\n      } else {\n        push(p2);\n      }\n    }\n\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    p2 = pop();\n    p1 = pop();\n\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"roots: 1st argument is not a polynomial\");\n    }\n\n    push(p1);\n    push(p2);\n    return roots();\n  };\n\n  hasImaginaryCoeff = function (k) {\n    var h, i, imaginaryCoefficients, l1, ref2;\n    imaginaryCoefficients = false;\n    h = tos;\n\n    for (i = l1 = ref2 = k; l1 > 0; i = l1 += -1) {\n      if (iscomplexnumber(stack[tos - i])) {\n        imaginaryCoefficients = true;\n        break;\n      }\n    }\n\n    return imaginaryCoefficients;\n  };\n\n  isSimpleRoot = function (k) {\n    var h, i, isSimpleRootPolynomial, l1, ref2;\n\n    if (k > 2) {\n      isSimpleRootPolynomial = true;\n      h = tos;\n\n      if (isZeroAtomOrTensor(stack[tos - k])) {\n        isSimpleRootPolynomial = false;\n      }\n\n      for (i = l1 = ref2 = k - 1; l1 > 1; i = l1 += -1) {\n        if (!isZeroAtomOrTensor(stack[tos - i])) {\n          isSimpleRootPolynomial = false;\n          break;\n        }\n      }\n    } else {\n      isSimpleRootPolynomial = false;\n    }\n\n    return isSimpleRootPolynomial;\n  };\n\n  normalisedCoeff = function () {\n    var divideBy, i, k, l1, m1, miniStack, ref2, ref3;\n    k = coeff();\n    divideBy = stack[tos - 1];\n    miniStack = [];\n\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      miniStack.push(pop());\n    }\n\n    for (i = m1 = ref3 = k - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; i = ref3 <= 0 ? ++m1 : --m1) {\n      push(miniStack[i]);\n      push(divideBy);\n      divide();\n    }\n\n    return k;\n  };\n\n  roots = function () {\n    var h, i, k, l1, lastCoeff, leadingCoeff, n, ref2;\n    h = 0;\n    i = 0;\n    n = 0;\n    save();\n\n    if (recursionLevelNestedRadicalsRemoval > 1) {\n      pop();\n      pop();\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n\n    performing_roots = true;\n    h = tos - 2;\n\n    if (DEBUG) {\n      console.log(\"checking if \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n    }\n\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    push(p1);\n    push(p2);\n    k = normalisedCoeff();\n\n    if (isSimpleRoot(k)) {\n      if (DEBUG) {\n        console.log(\"yes, \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n      }\n\n      lastCoeff = stack[tos - k];\n      leadingCoeff = stack[tos - 1];\n      moveTos(tos - k);\n      pop();\n      pop();\n      getSimpleRoots(k, leadingCoeff, lastCoeff);\n    } else {\n      moveTos(tos - k);\n      roots2();\n    }\n\n    n = tos - h;\n\n    if (n === 0) {\n      stop(\"roots: the polynomial is not factorable, try nroots\");\n    }\n\n    if (n === 1) {\n      performing_roots = false;\n      restore();\n      return;\n    }\n\n    sort_stack(n);\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    push(p1);\n    restore();\n    return performing_roots = false;\n  };\n\n  getSimpleRoots = function (n, leadingCoeff, lastCoeff) {\n    var aSol, commonPart, l1, m1, ref2, ref3, rootsOfOne;\n\n    if (DEBUG) {\n      console.log(\"getSimpleRoots\");\n    }\n\n    save();\n    n = n - 1;\n    push(lastCoeff);\n    push_rational(1, n);\n    power();\n    push(leadingCoeff);\n    push_rational(1, n);\n    power();\n    divide();\n    commonPart = pop();\n\n    if (n % 2 === 0) {\n      for (rootsOfOne = l1 = 1, ref2 = n; l1 <= ref2; rootsOfOne = l1 += 2) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        aSol = pop();\n        push(aSol);\n        push(aSol);\n        negate();\n      }\n    } else {\n      for (rootsOfOne = m1 = 1, ref3 = n; 1 <= ref3 ? m1 <= ref3 : m1 >= ref3; rootsOfOne = 1 <= ref3 ? ++m1 : --m1) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n\n        if (rootsOfOne % 2 === 0) {\n          negate();\n        }\n      }\n    }\n\n    return restore();\n  };\n\n  roots2 = function () {\n    var k;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    push(p1);\n    push(p2);\n    k = normalisedCoeff();\n\n    if (!hasImaginaryCoeff(k)) {\n      moveTos(tos - k);\n      factorpoly();\n      p1 = pop();\n    } else {\n      moveTos(tos - k);\n      pop();\n      pop();\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        roots3();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      roots3();\n    }\n\n    return restore();\n  };\n\n  roots3 = function () {\n    var n;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (car(p1) === symbol(POWER) && ispolyexpandedform(cadr(p1), p2) && isposint(caddr(p1))) {\n      push(cadr(p1));\n      push(p2);\n      n = normalisedCoeff();\n      mini_solve(n);\n    } else if (ispolyexpandedform(p1, p2)) {\n      push(p1);\n      push(p2);\n      n = normalisedCoeff();\n      mini_solve(n);\n    }\n\n    return restore();\n  };\n\n  mini_solve = function (n) {\n    var C_CHECKED_AS_NOT_ZERO, Q_CHECKED_AS_NOT_ZERO, R_18_a_b_c_d, R_27_a2_d, R_2_b3, R_3_a, R_3_a_C, R_3_a_c, R_4_DELTA03, R_6_a, R_6_a_C, R_C, R_C_over_3a, R_C_simplified_toCheckIfZero, R_DELTA0, R_DELTA0_simplified_toCheckIfZero, R_DELTA0_toBeCheckedIfZero, R_DELTA1, R_Q, R_Q_simplified_toCheckIfZero, R_S, R_S_simplified_toCheckIfZero, R_a2, R_a2_d, R_a2_d2, R_a3, R_a_b_c, R_a_b_c_d, R_a_c, R_b2, R_b2_c2, R_b3, R_b3_d, R_c2, R_c3, R_d2, R_determinant, R_determinant_simplified_toCheckIfZero, R_e2, R_e3, R_m, R_m27_a2_d2, R_m4_a_c3, R_m4_b3_d, R_m9_a_b_c, R_m_b_over_3a, R_minus_4S2_minus_2p, R_minus_b_over_4a, R_p, R_principalCubicRoot, R_q, R_q_over_S, R_r, S_CHECKED_AS_NOT_ZERO, ThreePPlus2M, TwoQOversqrtPPlus2M, biquadraticSolutions, choiceOfRadicalInQSoSIsNotZero, coeff2, coeff3, coeff4, depressedSolutions, eachSolution, flipSignOFQSoCIsNotZero, flipSignOFRadicalSoQIsNotZero, i_sqrt3, l1, len, len1, len2, m1, n1, one_minus_i_sqrt3, one_plus_i_sqrt3, ref2, ref3, ref4, resolventCubicSolutions, root_solution, sqrtPPlus2M, toBeCheckedIFZero;\n    save();\n\n    if (n === 2) {\n      p3 = pop();\n      p4 = pop();\n      push(p4);\n      push(p3);\n      divide();\n      negate();\n      restore();\n      return;\n    }\n\n    if (n === 3) {\n      p3 = pop();\n      p4 = pop();\n      p5 = pop();\n      push(p4);\n      push_integer(2);\n      power();\n      push_integer(4);\n      push(p3);\n      multiply();\n      push(p5);\n      multiply();\n      subtract();\n      push_rational(1, 2);\n      power();\n      p6 = pop();\n      push(p6);\n      push(p4);\n      subtract();\n      push(p3);\n      push_integer(2);\n      multiply();\n      divide();\n      push(p6);\n      push(p4);\n      add();\n      negate();\n      push(p3);\n      divide();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (n === 4 || n === 5) {\n      p3 = pop();\n      p4 = pop();\n      p5 = pop();\n      p6 = pop();\n      push(p5);\n      push(p5);\n      multiply();\n      R_c2 = pop();\n      push(R_c2);\n      push(p5);\n      multiply();\n      R_c3 = pop();\n      push(p4);\n      push(p4);\n      multiply();\n      R_b2 = pop();\n      push(R_b2);\n      push(p4);\n      multiply();\n      R_b3 = pop();\n      push(R_b3);\n      push(p6);\n      multiply();\n      R_b3_d = pop();\n      push(R_b3_d);\n      push_integer(-4);\n      multiply();\n      R_m4_b3_d = pop();\n      push(R_b3);\n      push_integer(2);\n      multiply();\n      R_2_b3 = pop();\n      push(p3);\n      push(p3);\n      multiply();\n      R_a2 = pop();\n      push(R_a2);\n      push(p3);\n      multiply();\n      R_a3 = pop();\n      push_integer(3);\n      push(p3);\n      multiply();\n      R_3_a = pop();\n      push(R_a2);\n      push(p6);\n      multiply();\n      R_a2_d = pop();\n      push(R_a2_d);\n      push(p6);\n      multiply();\n      R_a2_d2 = pop();\n      push(R_a2_d);\n      push_integer(27);\n      multiply();\n      R_27_a2_d = pop();\n      push(R_a2_d2);\n      push_integer(-27);\n      multiply();\n      R_m27_a2_d2 = pop();\n      push(R_3_a);\n      push_integer(2);\n      multiply();\n      R_6_a = pop();\n      push(p3);\n      push(p5);\n      multiply();\n      R_a_c = pop();\n      push(R_a_c);\n      push(p4);\n      multiply();\n      R_a_b_c = pop();\n      push(R_a_b_c);\n      push(p6);\n      multiply();\n      R_a_b_c_d = pop();\n      push(R_a_c);\n      push_integer(3);\n      multiply();\n      R_3_a_c = pop();\n      push_integer(-4);\n      push(p3);\n      push(R_c3);\n      multiply();\n      multiply();\n      R_m4_a_c3 = pop();\n      push(R_a_b_c);\n      push_integer(9);\n      multiply();\n      negate();\n      R_m9_a_b_c = pop();\n      push(R_a_b_c_d);\n      push_integer(18);\n      multiply();\n      R_18_a_b_c_d = pop();\n      push(R_b2);\n      push(R_3_a_c);\n      subtract();\n      R_DELTA0 = pop();\n      push(R_b2);\n      push(R_c2);\n      multiply();\n      R_b2_c2 = pop();\n      push(p4);\n      negate();\n      push(R_3_a);\n      divide();\n      R_m_b_over_3a = pop();\n\n      if (n === 4) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< \");\n        }\n\n        if (DEBUG) {\n          console.log(\"cubic: D0: \" + R_DELTA0.toString());\n        }\n\n        push(R_DELTA0);\n        push_integer(3);\n        power();\n        push_integer(4);\n        multiply();\n        R_4_DELTA03 = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_toBeCheckedIfZero = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: D0 as float: \" + R_DELTA0_toBeCheckedIfZero.toString());\n        }\n\n        push(R_18_a_b_c_d);\n        push(R_m4_b3_d);\n        push(R_b2_c2);\n        push(R_m4_a_c3);\n        push(R_m27_a2_d2);\n        add();\n        add();\n        add();\n        add();\n        simplify();\n        absValFloat();\n        R_determinant = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: DETERMINANT: \" + R_determinant.toString());\n        }\n\n        push(R_2_b3);\n        push(R_m9_a_b_c);\n        push(R_27_a2_d);\n        add();\n        add();\n        R_DELTA1 = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: D1: \" + R_DELTA1.toString());\n        }\n\n        push(R_DELTA1);\n        push_integer(2);\n        power();\n        push(R_4_DELTA03);\n        subtract();\n        push_rational(1, 2);\n        power();\n        simplify();\n        R_Q = pop();\n\n        if (isZeroAtomOrTensor(R_determinant)) {\n          if (isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is zero\");\n            }\n\n            push(R_m_b_over_3a);\n            restore();\n            return;\n          } else {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is not zero\");\n            }\n\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            push(p4);\n            push(p5);\n            multiply();\n            subtract();\n            push(R_DELTA0);\n            push_integer(2);\n            multiply();\n            divide();\n            root_solution = pop();\n            push(root_solution);\n            push(root_solution);\n            push(R_a_b_c);\n            push_integer(4);\n            multiply();\n            push(p3);\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            multiply();\n            negate();\n            push(R_b3);\n            negate();\n            add();\n            add();\n            push(p3);\n            push(R_DELTA0);\n            multiply();\n            divide();\n            restore();\n            return;\n          }\n        }\n\n        C_CHECKED_AS_NOT_ZERO = false;\n        flipSignOFQSoCIsNotZero = false;\n\n        while (!C_CHECKED_AS_NOT_ZERO) {\n          push(R_Q);\n\n          if (flipSignOFQSoCIsNotZero) {\n            negate();\n          }\n\n          push(R_DELTA1);\n          add();\n          push_rational(1, 2);\n          multiply();\n          push_rational(1, 3);\n          power();\n          simplify();\n          R_C = pop();\n\n          if (DEBUG) {\n            console.log(\"cubic: C: \" + R_C.toString());\n          }\n\n          push(R_C);\n          simplify();\n          absValFloat();\n          R_C_simplified_toCheckIfZero = pop();\n\n          if (DEBUG) {\n            console.log(\"cubic: C as absval and float: \" + R_C_simplified_toCheckIfZero.toString());\n          }\n\n          if (isZeroAtomOrTensor(R_C_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: C IS ZERO flipping the sign\");\n            }\n\n            flipSignOFQSoCIsNotZero = true;\n          } else {\n            C_CHECKED_AS_NOT_ZERO = true;\n          }\n        }\n\n        push(R_C);\n        push(R_3_a);\n        multiply();\n        R_3_a_C = pop();\n        push(R_3_a_C);\n        push_integer(2);\n        multiply();\n        R_6_a_C = pop();\n        push(imaginaryunit);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        multiply();\n        i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        add();\n        one_plus_i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        subtract();\n        one_minus_i_sqrt3 = pop();\n        push(R_C);\n        push(R_3_a);\n        divide();\n        R_C_over_3a = pop();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        negate();\n        push(R_DELTA0);\n        push(R_3_a_C);\n        divide();\n        negate();\n        add();\n        add();\n        simplify();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        push(one_plus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide();\n        push(one_minus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide();\n        add();\n        add();\n        simplify();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        push(one_minus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide();\n        push(one_plus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide();\n        add();\n        add();\n        simplify();\n        restore();\n        return;\n      }\n\n      if (n === 5) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< \");\n        }\n\n        p7 = pop();\n\n        if (isZeroAtomOrTensor(p4) && isZeroAtomOrTensor(p6) && !isZeroAtomOrTensor(p5) && !isZeroAtomOrTensor(p7)) {\n          if (DEBUG) {\n            console.log(\"biquadratic case\");\n          }\n\n          push(p3);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(p5);\n          push(symbol(SECRETX));\n          multiply();\n          push(p7);\n          add();\n          add();\n          push(symbol(SECRETX));\n          roots();\n          biquadraticSolutions = pop();\n          ref2 = biquadraticSolutions.tensor.elem;\n\n          for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n            eachSolution = ref2[l1];\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            simplify();\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            negate();\n            simplify();\n          }\n\n          restore();\n          return;\n        }\n\n        push(p6);\n        push(p6);\n        multiply();\n        R_d2 = pop();\n        push(p7);\n        push(p7);\n        multiply();\n        R_e2 = pop();\n        push(R_e2);\n        push(p7);\n        multiply();\n        R_e3 = pop();\n        push_integer(256);\n        push(R_a3);\n        push(R_e3);\n        multiply();\n        multiply();\n        push_integer(-192);\n        push(R_a2_d);\n        push(R_e2);\n        push(p4);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-128);\n        push(R_a2);\n        push(R_c2);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(144);\n        push(R_a2_d2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_m27_a2_d2);\n        push(R_d2);\n        multiply();\n        push_integer(144);\n        push(R_a_b_c);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-6);\n        push(p3);\n        push(R_b2);\n        push(R_d2);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-80);\n        push(R_a_b_c_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(18);\n        push(R_a_b_c_d);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(16);\n        push(R_a_c);\n        push(R_c3);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-4);\n        push(R_a_c);\n        push(R_c2);\n        push(R_d2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-27);\n        push(R_b3);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(18);\n        push(R_b3_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_m4_b3_d);\n        push(R_d2);\n        multiply();\n        push_integer(-4);\n        push(R_b2_c2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_b2_c2);\n        push(R_d2);\n        multiply();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        R_determinant = pop();\n\n        if (DEBUG) {\n          console.log(\"R_determinant: \" + R_determinant.toString());\n        }\n\n        push(R_c2);\n        push_integer(-3);\n        push(p4);\n        push(p6);\n        multiply();\n        multiply();\n        push_integer(12);\n        push(p3);\n        push(p7);\n        multiply();\n        multiply();\n        add();\n        add();\n        R_DELTA0 = pop();\n\n        if (DEBUG) {\n          console.log(\"R_DELTA0: \" + R_DELTA0.toString());\n        }\n\n        push_integer(2);\n        push(R_c3);\n        multiply();\n        push_integer(-9);\n        push(p4);\n        push(p5);\n        push(p6);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(27);\n        push(R_b2);\n        push(p7);\n        multiply();\n        multiply();\n        push_integer(27);\n        push(p3);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(-72);\n        push(R_a_c);\n        push(p7);\n        multiply();\n        multiply();\n        add();\n        add();\n        add();\n        add();\n        R_DELTA1 = pop();\n\n        if (DEBUG) {\n          console.log(\"R_DELTA1: \" + R_DELTA1.toString());\n        }\n\n        push_integer(8);\n        push(R_a_c);\n        multiply();\n        push_integer(-3);\n        push(R_b2);\n        multiply();\n        add();\n        push_integer(8);\n        push(R_a2);\n        multiply();\n        divide();\n        R_p = pop();\n\n        if (DEBUG) {\n          console.log(\"p: \" + R_p.toString());\n        }\n\n        push(R_b3);\n        push_integer(-4);\n        push(R_a_b_c);\n        multiply();\n        push_integer(8);\n        push(R_a2_d);\n        multiply();\n        add();\n        add();\n        push_integer(8);\n        push(R_a3);\n        multiply();\n        divide();\n        R_q = pop();\n\n        if (DEBUG) {\n          console.log(\"q: \" + R_q.toString());\n        }\n\n        if (DEBUG) {\n          console.log(\"tos 1 \" + tos);\n        }\n\n        if (!isZeroAtomOrTensor(p4)) {\n          if (DEBUG) {\n            console.log(\"tos 2 \" + tos);\n          }\n\n          push_integer(8);\n          push(p5);\n          push(p3);\n          multiply();\n          multiply();\n          push_integer(-3);\n          push(p4);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          divide();\n          R_p = pop();\n\n          if (DEBUG) {\n            console.log(\"p for depressed quartic: \" + R_p.toString());\n          }\n\n          push(p4);\n          push_integer(3);\n          power();\n          push_integer(-4);\n          push(p3);\n          push(p4);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          push_integer(8);\n          push(p6);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          multiply();\n          add();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(3);\n          power();\n          multiply();\n          divide();\n          R_q = pop();\n\n          if (DEBUG) {\n            console.log(\"q for depressed quartic: \" + R_q.toString());\n          }\n\n          push(p4);\n          push_integer(4);\n          power();\n          push_integer(-3);\n          multiply();\n          push_integer(256);\n          push(R_a3);\n          push(p7);\n          multiply();\n          multiply();\n          push_integer(-64);\n          push(R_a2_d);\n          push(p4);\n          multiply();\n          multiply();\n          push_integer(16);\n          push(R_b2);\n          push(p3);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          add();\n          add();\n          add();\n          push_integer(256);\n          push(p3);\n          push_integer(4);\n          power();\n          multiply();\n          divide();\n          R_r = pop();\n\n          if (DEBUG) {\n            console.log(\"r for depressed quartic: \" + R_r.toString());\n          }\n\n          if (DEBUG) {\n            console.log(\"tos 4 \" + tos);\n          }\n\n          push(symbol(SECRETX));\n          push_integer(4);\n          power();\n\n          if (DEBUG) {\n            console.log(\"4 * x^4: \" + stack[tos - 1].toString());\n          }\n\n          push(R_p);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n\n          if (DEBUG) {\n            console.log(\"R_p * x^2: \" + stack[tos - 1].toString());\n          }\n\n          push(R_q);\n          push(symbol(SECRETX));\n          multiply();\n\n          if (DEBUG) {\n            console.log(\"R_q * x: \" + stack[tos - 1].toString());\n          }\n\n          push(R_r);\n\n          if (DEBUG) {\n            console.log(\"R_r: \" + stack[tos - 1].toString());\n          }\n\n          add();\n          add();\n          add();\n          simplify();\n\n          if (DEBUG) {\n            console.log(\"solving depressed quartic: \" + stack[tos - 1].toString());\n          }\n\n          push(symbol(SECRETX));\n          roots();\n          depressedSolutions = pop();\n\n          if (DEBUG) {\n            console.log(\"depressedSolutions: \" + depressedSolutions);\n          }\n\n          ref3 = depressedSolutions.tensor.elem;\n\n          for (m1 = 0, len1 = ref3.length; m1 < len1; m1++) {\n            eachSolution = ref3[m1];\n            push(eachSolution);\n            push(p4);\n            push_integer(4);\n            push(p3);\n            multiply();\n            divide();\n            subtract();\n            simplify();\n\n            if (DEBUG) {\n              console.log(\"solution from depressed: \" + stack[tos - 1].toString());\n            }\n          }\n\n          restore();\n          return;\n        } else {\n          R_p = p5;\n          R_q = p6;\n          R_r = p7;\n          /*\n           * Descartes' solution\n           * https://en.wikipedia.org/wiki/Quartic_function#Descartes.27_solution\n           * finding the \"u\" in the depressed equation\n          \n          push_integer(2)\n          push(R_p)\n          multiply()\n          coeff2 = pop()\n          \n          push_integer(-4)\n          push(R_p)\n          push_integer(2)\n          power()\n          multiply()\n          push(R_r)\n          multiply()\n          coeff3 = pop()\n          \n          push(R_q)\n          push_integer(2)\n          power()\n          negate()\n          coeff4 = pop()\n          \n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(3)\n          power()\n          \n          push(coeff2)\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          multiply()\n          \n          push(coeff3)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(coeff4)\n          \n          add()\n          add()\n          add()\n          \n          console.log(\"Descarte's resolventCubic: \" +  stack[tos-1].toString())\n          push(symbol(SECRETX))\n          \n          roots()\n          \n          resolventCubicSolutions = pop()\n          console.log(\"Descarte's resolventCubic solutions: \" +  resolventCubicSolutions)\n          console.log(\"tos: \" +  tos)\n          \n          R_u = null\n          #R_u = resolventCubicSolutions.tensor.elem[1]\n          for eachSolution in resolventCubicSolutions.tensor.elem\n            console.log(\"examining solution: \" +  eachSolution)\n            push(eachSolution)\n            push_integer(2)\n            multiply()\n            push(R_p)\n            add()\n          \n            absValFloat()\n            toBeCheckedIFZero = pop()\n            console.log(\"abs value is: \" +  eachSolution)\n            if !isZeroAtomOrTensor(toBeCheckedIFZero)\n              R_u = eachSolution\n              break\n          \n          console.log(\"chosen solution: \" +  R_u)\n          \n          push(R_u)\n          negate()\n          R_s = pop()\n          \n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          add()\n          add()\n          push_integer(2)\n          divide()\n          R_t = pop()\n          \n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          subtract()\n          add()\n          push_integer(2)\n          divide()\n          R_v = pop()\n          \n           * factoring the quartic into two quadratics:\n          \n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          \n          push(R_s)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(R_t)\n          \n          add()\n          add()\n          \n          console.log(\"factored quartic 1: \" + stack[tos-1].toString())\n          \n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          \n          push(R_u)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(R_v)\n          \n          add()\n          add()\n          \n          console.log(\"factored quartic 2: \" + stack[tos-1].toString())\n          pop()\n          \n          restore()\n          return\n           */\n\n          push_rational(5, 2);\n          push(R_p);\n          multiply();\n          coeff2 = pop();\n          push_integer(2);\n          push(R_p);\n          push_integer(2);\n          power();\n          multiply();\n          push(R_r);\n          subtract();\n          coeff3 = pop();\n          push(R_p);\n          push_integer(3);\n          power();\n          push_integer(2);\n          divide();\n          push_rational(-1, 2);\n          push(R_p);\n          push(R_r);\n          multiply();\n          multiply();\n          push_rational(-1, 8);\n          push(R_q);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n          coeff4 = pop();\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          push(coeff2);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(coeff3);\n          push(symbol(SECRETX));\n          multiply();\n          push(coeff4);\n          add();\n          add();\n          add();\n\n          if (DEBUG) {\n            console.log(\"resolventCubic: \" + stack[tos - 1].toString());\n          }\n\n          push(symbol(SECRETX));\n          roots();\n          resolventCubicSolutions = pop();\n\n          if (DEBUG) {\n            console.log(\"resolventCubicSolutions: \" + resolventCubicSolutions);\n          }\n\n          R_m = null;\n          ref4 = resolventCubicSolutions.tensor.elem;\n\n          for (n1 = 0, len2 = ref4.length; n1 < len2; n1++) {\n            eachSolution = ref4[n1];\n\n            if (DEBUG) {\n              console.log(\"examining solution: \" + eachSolution);\n            }\n\n            push(eachSolution);\n            push_integer(2);\n            multiply();\n            push(R_p);\n            add();\n            absValFloat();\n            toBeCheckedIFZero = pop();\n\n            if (DEBUG) {\n              console.log(\"abs value is: \" + eachSolution);\n            }\n\n            if (!isZeroAtomOrTensor(toBeCheckedIFZero)) {\n              R_m = eachSolution;\n              break;\n            }\n          }\n\n          if (DEBUG) {\n            console.log(\"chosen solution: \" + R_m);\n          }\n\n          push(R_m);\n          push_integer(2);\n          multiply();\n          push(R_p);\n          add();\n          push_rational(1, 2);\n          power();\n          simplify();\n          sqrtPPlus2M = pop();\n          push(R_q);\n          push_integer(2);\n          multiply();\n          push(sqrtPPlus2M);\n          divide();\n          simplify();\n          TwoQOversqrtPPlus2M = pop();\n          push(R_p);\n          push_integer(3);\n          multiply();\n          push(R_m);\n          push_integer(2);\n          multiply();\n          add();\n          ThreePPlus2M = pop();\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          restore();\n          return;\n        }\n\n        push(R_determinant);\n        simplify();\n        absValFloat();\n        R_determinant_simplified_toCheckIfZero = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_simplified_toCheckIfZero = pop();\n        S_CHECKED_AS_NOT_ZERO = false;\n        choiceOfRadicalInQSoSIsNotZero = 0;\n\n        while (!S_CHECKED_AS_NOT_ZERO) {\n          Q_CHECKED_AS_NOT_ZERO = false;\n          flipSignOFRadicalSoQIsNotZero = false;\n\n          while (!Q_CHECKED_AS_NOT_ZERO) {\n            push(R_DELTA1);\n            push(R_DELTA1);\n            push_integer(2);\n            power();\n            push_integer(-4);\n            push(R_DELTA0);\n            push_integer(3);\n            power();\n            multiply();\n            add();\n            push_rational(1, 2);\n            power();\n\n            if (flipSignOFRadicalSoQIsNotZero) {\n              negate();\n            }\n\n            add();\n            push_integer(2);\n            divide();\n\n            if (DEBUG) {\n              console.log(\"content of cubic root: \" + stack[tos - 1].toString());\n            }\n\n            push_rational(1, 3);\n            power();\n            simplify();\n            R_principalCubicRoot = pop();\n\n            if (DEBUG) {\n              console.log(\"principal cubic root: \" + R_principalCubicRoot.toString());\n            }\n\n            if (DEBUG) {\n              console.log(\"tos : \" + tos);\n            }\n\n            if (choiceOfRadicalInQSoSIsNotZero === 0) {\n              if (DEBUG) {\n                console.log(\"chosing principal cubic root\");\n              }\n\n              push(R_principalCubicRoot);\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond principal\");\n              }\n\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(-1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond beyond principal\");\n              }\n\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            }\n\n            simplify();\n            R_Q = pop();\n\n            if (DEBUG) {\n              console.log(\"Q \" + R_Q.toString());\n            }\n\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n\n            push(R_Q);\n            simplify();\n            absValFloat();\n            R_Q_simplified_toCheckIfZero = pop();\n\n            if (DEBUG) {\n              console.log(\"Q simplified and abs\" + R_Q_simplified_toCheckIfZero.toString());\n            }\n\n            if (isZeroAtomOrTensor(R_Q_simplified_toCheckIfZero) && !isZeroAtomOrTensor(R_determinant_simplified_toCheckIfZero) && isZeroAtomOrTensor(R_DELTA0_simplified_toCheckIfZero)) {\n              if (DEBUG) {\n                console.log(\" *********************************** Q IS ZERO and it matters, flipping the sign\");\n              }\n\n              flipSignOFRadicalSoQIsNotZero = true;\n            } else {\n              Q_CHECKED_AS_NOT_ZERO = true;\n            }\n\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n          }\n\n          push_rational(-2, 3);\n          push(R_p);\n          multiply();\n          push(R_Q);\n          push(R_DELTA0);\n          push(R_Q);\n          divide();\n          add();\n          push(R_3_a);\n          divide();\n          add();\n          push_rational(1, 2);\n          power();\n          push_integer(2);\n          divide();\n          show_power_debug = true;\n          simplify();\n          R_S = pop();\n\n          if (DEBUG) {\n            console.log(\"S \" + R_S.toString());\n          }\n\n          push(R_S);\n          simplify();\n          absValFloat();\n          R_S_simplified_toCheckIfZero = pop();\n\n          if (DEBUG) {\n            console.log(\"S \" + R_S_simplified_toCheckIfZero.toString());\n          }\n\n          if (isZeroAtomOrTensor(R_S_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" *********************************** S IS ZERO chosing another cubic root\");\n            }\n\n            choiceOfRadicalInQSoSIsNotZero++;\n          } else {\n            S_CHECKED_AS_NOT_ZERO = true;\n          }\n\n          if (DEBUG) {\n            console.log(\"tos: \" + tos);\n          }\n        }\n\n        if (DEBUG) {\n          console.log(\"tos: \" + tos);\n        }\n\n        push(p4);\n        negate();\n        push(p3);\n        push_integer(4);\n        multiply();\n        divide();\n        R_minus_b_over_4a = pop();\n        push_integer(-4);\n        push(R_S);\n        push_integer(2);\n        power();\n        multiply();\n        push_integer(2);\n        push(R_p);\n        multiply();\n        subtract();\n        R_minus_4S2_minus_2p = pop();\n        push(R_q);\n        push(R_S);\n        divide();\n        R_q_over_S = pop();\n\n        if (DEBUG) {\n          console.log(\"tos before putting together the 4 solutions: \" + tos);\n        }\n\n        push(R_minus_b_over_4a);\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        restore();\n        return;\n      }\n    }\n\n    moveTos(tos - n);\n    return restore();\n  };\n\n  Eval_round = function () {\n    push(cadr(p1));\n    Eval();\n    return yround();\n  };\n\n  yround = function () {\n    save();\n    yyround();\n    return restore();\n  };\n\n  yyround = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(ROUND);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.round(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    push(p1);\n    yyfloat();\n    p1 = pop();\n    return push_integer(Math.round(p1.d));\n  };\n\n  T_INTEGER = 1001;\n  T_DOUBLE = 1002;\n  T_SYMBOL = 1003;\n  T_FUNCTION = 1004;\n  T_NEWLINE = 1006;\n  T_STRING = 1007;\n  T_GTEQ = 1008;\n  T_LTEQ = 1009;\n  T_EQ = 1010;\n  T_NEQ = 1011;\n  T_QUOTASSIGN = 1012;\n  token = \"\";\n  newline_flag = 0;\n  meta_mode = 0;\n  input_str = 0;\n  scan_str = 0;\n  token_str = 0;\n  token_buf = 0;\n  lastFoundSymbol = null;\n  symbolsRightOfAssignment = null;\n  symbolsLeftOfAssignment = null;\n  isSymbolLeftOfAssignment = null;\n  scanningParameters = null;\n  functionInvokationsScanningStack = null;\n  skipRootVariableToBeSolved = false;\n  assignmentFound = null;\n  scanned = \"\";\n\n  scan = function (s) {\n    if (DEBUG) {\n      console.log(\"#### scanning \" + s);\n    }\n\n    lastFoundSymbol = null;\n    symbolsRightOfAssignment = [];\n    symbolsLeftOfAssignment = [];\n    isSymbolLeftOfAssignment = true;\n    scanningParameters = [];\n    functionInvokationsScanningStack = [\"\"];\n    assignmentFound = false;\n    scanned = s;\n    meta_mode = 0;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n\n    scan_stmt();\n    expanding--;\n\n    if (!assignmentFound) {\n      symbolsInExpressionsWithoutAssignments = symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment);\n    }\n\n    return token_str - input_str;\n  };\n\n  scan_meta = function (s) {\n    scanned = s;\n    meta_mode = 1;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n\n    scan_stmt();\n    expanding--;\n    return token_str - input_str;\n  };\n\n  scan_stmt = function () {\n    var assignmentIsOfQuotedType, existingDependencies, i, indexOfSymbolLeftOfAssignment, l1, len, len1, m1, symbolLeftOfAssignment;\n    scan_relation();\n    assignmentIsOfQuotedType = false;\n\n    if (token === T_QUOTASSIGN) {\n      assignmentIsOfQuotedType = true;\n    }\n\n    if (token === T_QUOTASSIGN || token === '=') {\n      symbolLeftOfAssignment = lastFoundSymbol;\n\n      if (DEBUG) {\n        console.log(\"assignment!\");\n      }\n\n      assignmentFound = true;\n      isSymbolLeftOfAssignment = false;\n      get_next_token();\n      push_symbol(SETQ);\n      swap();\n\n      if (assignmentIsOfQuotedType) {\n        push_symbol(QUOTE);\n      }\n\n      scan_relation();\n\n      if (assignmentIsOfQuotedType) {\n        list(2);\n      }\n\n      list(3);\n      isSymbolLeftOfAssignment = true;\n\n      if (codeGen) {\n        indexOfSymbolLeftOfAssignment = symbolsRightOfAssignment.indexOf(symbolLeftOfAssignment);\n\n        if (indexOfSymbolLeftOfAssignment !== -1) {\n          symbolsRightOfAssignment.splice(indexOfSymbolLeftOfAssignment, 1);\n          symbolsHavingReassignments.push(symbolLeftOfAssignment);\n        }\n\n        if (DEBUG) {\n          console.log(\"locally, \" + symbolLeftOfAssignment + \" depends on: \");\n\n          for (l1 = 0, len = symbolsRightOfAssignment.length; l1 < len; l1++) {\n            i = symbolsRightOfAssignment[l1];\n            console.log(\"  \" + i);\n          }\n        }\n\n        if (symbolsDependencies[symbolLeftOfAssignment] == null) {\n          symbolsDependencies[symbolLeftOfAssignment] = [];\n        }\n\n        existingDependencies = symbolsDependencies[symbolLeftOfAssignment];\n\n        for (m1 = 0, len1 = symbolsRightOfAssignment.length; m1 < len1; m1++) {\n          i = symbolsRightOfAssignment[m1];\n\n          if (existingDependencies.indexOf(i) === -1) {\n            existingDependencies.push(i);\n          }\n        }\n\n        return symbolsRightOfAssignment = [];\n      }\n    }\n  };\n\n  scan_relation = function () {\n    scan_expression();\n\n    switch (token) {\n      case T_EQ:\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case T_NEQ:\n        push_symbol(NOT);\n        swap();\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        list(3);\n        return list(2);\n\n      case T_LTEQ:\n        push_symbol(TESTLE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case T_GTEQ:\n        push_symbol(TESTGE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case '<':\n        push_symbol(TESTLT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case '>':\n        push_symbol(TESTGT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n    }\n  };\n\n  scan_expression = function () {\n    var h;\n    h = tos;\n\n    switch (token) {\n      case '+':\n        get_next_token();\n        scan_term();\n        break;\n\n      case '-':\n        get_next_token();\n        scan_term();\n        negate();\n        break;\n\n      default:\n        scan_term();\n    }\n\n    while (newline_flag === 0 && (token === '+' || token === '-')) {\n      if (token === '+') {\n        get_next_token();\n        scan_term();\n      } else {\n        get_next_token();\n        scan_term();\n        negate();\n      }\n    }\n\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(ADD);\n      swap();\n      return cons();\n    }\n  };\n\n  is_factor = function () {\n    if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n      return 1;\n    }\n\n    switch (token) {\n      case '*':\n      case '/':\n        return 1;\n\n      case '(':\n      case T_SYMBOL:\n      case T_FUNCTION:\n      case T_INTEGER:\n      case T_DOUBLE:\n      case T_STRING:\n        if (newline_flag) {\n          scan_str = token_str;\n          return 0;\n        } else {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  simplify_1_in_products = function (tos, h) {\n    if (tos > h && isrational(stack[tos - 1]) && equaln(stack[tos - 1], 1)) {\n      return pop();\n    }\n  };\n\n  multiply_consecutive_constants = function (tos, h) {\n    if (tos > h + 1 && isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply();\n    }\n  };\n\n  scan_term = function () {\n    var h;\n    h = tos;\n    scan_factor();\n\n    if (parse_time_simplifications) {\n      simplify_1_in_products(tos, h);\n    }\n\n    while (is_factor()) {\n      if (token === '*') {\n        get_next_token();\n        scan_factor();\n      } else if (token === '/') {\n        simplify_1_in_products(tos, h);\n        get_next_token();\n        scan_factor();\n        inverse();\n      } else if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n        get_next_token();\n        push_symbol(INNER);\n        swap();\n        scan_factor();\n        list(3);\n      } else {\n        scan_factor();\n      }\n\n      if (parse_time_simplifications) {\n        multiply_consecutive_constants(tos, h);\n        simplify_1_in_products(tos, h);\n      }\n    }\n\n    if (h === tos) {\n      return push_integer(1);\n    } else if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      return cons();\n    }\n  };\n\n  scan_power = function () {\n    if (token === '^') {\n      get_next_token();\n      push_symbol(POWER);\n      swap();\n      scan_factor();\n      return list(3);\n    }\n  };\n\n  scan_index = function (h) {\n    get_next_token();\n    push_symbol(INDEX);\n    swap();\n    scan_expression();\n\n    while (token === ',') {\n      get_next_token();\n      scan_expression();\n    }\n\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n\n    get_next_token();\n    return list(tos - h);\n  };\n\n  scan_factor = function () {\n    var firstFactorIsNumber, h;\n    h = tos;\n    firstFactorIsNumber = false;\n\n    if (token === '(') {\n      scan_subexpr();\n    } else if (token === T_SYMBOL) {\n      scan_symbol();\n    } else if (token === T_FUNCTION) {\n      scan_function_call_with_function_name();\n    } else if (token === '[') {\n      scan_tensor();\n    } else if (token === T_INTEGER) {\n      firstFactorIsNumber = true;\n      bignum_scan_integer(token_buf);\n      get_next_token();\n    } else if (token === T_DOUBLE) {\n      firstFactorIsNumber = true;\n      bignum_scan_float(token_buf);\n      get_next_token();\n    } else if (token === T_STRING) {\n      scan_string();\n    } else {\n      scan_error(\"syntax error\");\n    }\n\n    while (token === '[' || token === '(' && newline_flag === 0 && !firstFactorIsNumber) {\n      if (token === '[') {\n        scan_index(h);\n      } else if (token === '(') {\n        scan_function_call_without_function_name();\n      }\n    }\n\n    while (token === '!') {\n      get_next_token();\n      push_symbol(FACTORIAL);\n      swap();\n      list(2);\n    }\n\n    while ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === transpose_unicode) {\n      get_next_token();\n      push_symbol(TRANSPOSE);\n      swap();\n      list(2);\n    }\n\n    return scan_power();\n  };\n\n  addSymbolRightOfAssignment = function (theSymbol) {\n    var i, l1, prefixVar, ref2;\n\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols right of assignment\");\n      }\n\n      prefixVar = \"\";\n\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n\n      theSymbol = prefixVar + theSymbol;\n      return symbolsRightOfAssignment.push(theSymbol);\n    }\n  };\n\n  addSymbolLeftOfAssignment = function (theSymbol) {\n    var i, l1, prefixVar, ref2;\n\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols left of assignment\");\n      }\n\n      prefixVar = \"\";\n\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n\n      theSymbol = prefixVar + theSymbol;\n      return symbolsLeftOfAssignment.push(theSymbol);\n    }\n  };\n\n  scan_symbol = function () {\n    if (token !== T_SYMBOL) {\n      scan_error(\"symbol expected\");\n    }\n\n    if (meta_mode && token_buf.length === 1) {\n      switch (token_buf[0]) {\n        case 'a':\n          push(symbol(METAA));\n          break;\n\n        case 'b':\n          push(symbol(METAB));\n          break;\n\n        case 'x':\n          push(symbol(METAX));\n          break;\n\n        default:\n          push(usr_symbol(token_buf));\n      }\n    } else {\n      push(usr_symbol(token_buf));\n    }\n\n    if (scanningParameters.length === 0) {\n      if (DEBUG) {\n        console.log(\"out of scanning parameters, processing \" + token_buf);\n      }\n\n      lastFoundSymbol = token_buf;\n\n      if (isSymbolLeftOfAssignment) {\n        addSymbolLeftOfAssignment(token_buf);\n      }\n    } else {\n      if (DEBUG) {\n        console.log(\"still scanning parameters, skipping \" + token_buf);\n      }\n\n      if (isSymbolLeftOfAssignment) {\n        addSymbolRightOfAssignment(\"'\" + token_buf);\n      }\n    }\n\n    if (DEBUG) {\n      console.log(\"found symbol: \" + token_buf + \" left of assignment: \" + isSymbolLeftOfAssignment);\n    }\n\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n\n    return get_next_token();\n  };\n\n  scan_string = function () {\n    new_string(token_buf);\n    return get_next_token();\n  };\n\n  scan_function_call_with_function_name = function () {\n    var functionName, i, l1, n, p, ref2;\n\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_with_function_name start\");\n    }\n\n    n = 1;\n    p = new U();\n    p = usr_symbol(token_buf);\n    push(p);\n    functionName = token_buf;\n\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.push(token_buf);\n    }\n\n    lastFoundSymbol = token_buf;\n\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n\n    get_next_token();\n    get_next_token();\n    scanningParameters.push(true);\n\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n\n      while (token === ',') {\n        get_next_token();\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"sum\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"product\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"for\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        if (functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"defint\") !== -1 && (n === 2 || n > 2 && (n - 2) % 3 === 0)) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        scan_stmt();\n        skipRootVariableToBeSolved = false;\n        n++;\n      }\n\n      if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n        symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n          return !new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + \"x\").test(x);\n        });\n      }\n    }\n\n    scanningParameters.pop();\n\n    for (i = l1 = 0, ref2 = symbolsRightOfAssignment.length; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (symbolsRightOfAssignment[i] != null) {\n        if (functionName === \"roots\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"defint\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"sum\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"product\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"for\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n      }\n    }\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    get_next_token();\n    list(n);\n\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.pop();\n    }\n\n    if (functionName === symbol(PATTERN).printname) {\n      patternHasBeenFound = true;\n    }\n\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_with_function_name end\");\n    }\n  };\n\n  scan_function_call_without_function_name = function () {\n    var n;\n\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_without_function_name start\");\n    }\n\n    push_symbol(EVAL);\n    swap();\n    list(2);\n    n = 1;\n    get_next_token();\n    scanningParameters.push(true);\n\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n\n      while (token === ',') {\n        get_next_token();\n        scan_stmt();\n        n++;\n      }\n    }\n\n    scanningParameters.pop();\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    get_next_token();\n    list(n);\n\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_without_function_name end: \" + stack[tos - 1]);\n    }\n  };\n\n  scan_subexpr = function () {\n    var n;\n    n = 0;\n\n    if (token !== '(') {\n      scan_error(\"( expected\");\n    }\n\n    get_next_token();\n    scan_stmt();\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    return get_next_token();\n  };\n\n  scan_tensor = function () {\n    var n;\n    n = 0;\n\n    if (token !== '[') {\n      scan_error(\"[ expected\");\n    }\n\n    get_next_token();\n    scan_stmt();\n    n = 1;\n\n    while (token === ',') {\n      get_next_token();\n      scan_stmt();\n      n++;\n    }\n\n    build_tensor(n);\n\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n\n    return get_next_token();\n  };\n\n  scan_error = function (errmsg) {\n    errorMessage = \"\";\n\n    while (input_str !== scan_str) {\n      if ((scanned[input_str] === '\\n' || scanned[input_str] === '\\r') && input_str + 1 === scan_str) {\n        break;\n      }\n\n      errorMessage += scanned[input_str++];\n    }\n\n    errorMessage += \" ? \";\n\n    while (scanned[input_str] && scanned[input_str] !== '\\n' && scanned[input_str] !== '\\r') {\n      errorMessage += scanned[input_str++];\n    }\n\n    errorMessage += '\\n';\n    return stop(errmsg);\n  };\n\n  build_tensor = function (n) {\n    var i, l1, ref2;\n    i = 0;\n    save();\n    p2 = alloc_tensor(n);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = n;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.elem[i] = stack[tos - n + i];\n    }\n\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  get_next_token = function () {\n    newline_flag = 0;\n\n    while (1) {\n      get_token();\n\n      if (token !== T_NEWLINE) {\n        break;\n      }\n\n      newline_flag = 1;\n    }\n\n    if (DEBUG) {\n      return console.log(\"get_next_token token: \" + token);\n    }\n  };\n\n  get_token = function () {\n    while (isspace(scanned[scan_str])) {\n      if (scanned[scan_str] === '\\n' || scanned[scan_str] === '\\r') {\n        token = T_NEWLINE;\n        scan_str++;\n        return;\n      }\n\n      scan_str++;\n    }\n\n    token_str = scan_str;\n\n    if (scan_str === scanned.length) {\n      token = \"\";\n      return;\n    }\n\n    if (isdigit(scanned[scan_str]) || scanned[scan_str] === '.') {\n      while (isdigit(scanned[scan_str])) {\n        scan_str++;\n      }\n\n      if (scanned[scan_str] === '.') {\n        scan_str++;\n\n        while (isdigit(scanned[scan_str])) {\n          scan_str++;\n        }\n\n        if (scanned[scan_str] === 'e' && (scanned[scan_str + 1] === '+' || scanned[scan_str + 1] === '-' || isdigit(scanned[scan_str + 1]))) {\n          scan_str += 2;\n\n          while (isdigit(scanned[scan_str])) {\n            scan_str++;\n          }\n        }\n\n        token = T_DOUBLE;\n      } else {\n        token = T_INTEGER;\n      }\n\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n\n    if (isalpha(scanned[scan_str])) {\n      while (isalnumorunderscore(scanned[scan_str])) {\n        scan_str++;\n      }\n\n      if (scanned[scan_str] === '(') {\n        token = T_FUNCTION;\n      } else {\n        token = T_SYMBOL;\n      }\n\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n\n    if (scanned[scan_str] === '\"') {\n      scan_str++;\n\n      while (scanned[scan_str] !== '\"') {\n        if (scan_str === scanned.length - 1) {\n          scan_str++;\n          scan_error(\"runaway string\");\n          scan_str--;\n        }\n\n        scan_str++;\n      }\n\n      scan_str++;\n      token = T_STRING;\n      update_token_buf(token_str + 1, scan_str - 1);\n      return;\n    }\n\n    if (scanned[scan_str] === '#' || scanned[scan_str] === '-' && scanned[scan_str + 1] === '-') {\n      while (scanned[scan_str] && scanned[scan_str] !== '\\n' && scanned[scan_str] !== '\\r') {\n        scan_str++;\n      }\n\n      if (scanned[scan_str]) {\n        scan_str++;\n      }\n\n      token = T_NEWLINE;\n      return;\n    }\n\n    if (scanned[scan_str] === ':' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_QUOTASSIGN;\n      return;\n    }\n\n    if (scanned[scan_str] === '=' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_EQ;\n      return;\n    }\n\n    if (scanned[scan_str] === '!' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_NEQ;\n      return;\n    }\n\n    if (scanned[scan_str] === '<' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_LTEQ;\n      return;\n    }\n\n    if (scanned[scan_str] === '>' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_GTEQ;\n      return;\n    }\n\n    return token = scanned[scan_str++];\n  };\n\n  update_token_buf = function (a, b) {\n    return token_buf = scanned.substring(a, b);\n  };\n\n  $.scan = scan;\n\n  Eval_sgn = function () {\n    push(cadr(p1));\n    Eval();\n    return sgn();\n  };\n\n  sgn = function () {\n    save();\n    yysgn();\n    return restore();\n  };\n\n  yysgn = function () {\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      if (p1.d > 0) {\n        push_integer(1);\n        return;\n      } else {\n        if (p1.d === 0) {\n          push_integer(1);\n          return;\n        } else {\n          push_integer(-1);\n          return;\n        }\n      }\n    }\n\n    if (isrational(p1)) {\n      if (MSIGN(mmul(p1.q.a, p1.q.b)) === -1) {\n        push_integer(-1);\n        return;\n      } else {\n        if (MZERO(mmul(p1.q.a, p1.q.b))) {\n          push_integer(0);\n          return;\n        } else {\n          push_integer(1);\n          return;\n        }\n      }\n    }\n\n    if (iscomplexnumber(p1)) {\n      push_integer(-1);\n      push(p1);\n      absval();\n      power();\n      push(p1);\n      multiply();\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(SGN);\n      push(p1);\n      negate();\n      list(2);\n      push_integer(-1);\n      multiply();\n      return;\n    }\n    /*\n    push_integer(2)\n    push(p1)\n    heaviside()\n    multiply()\n    push_integer(-1)\n    add()\n     */\n\n\n    push_symbol(SGN);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_shape = function () {\n    push(cadr(p1));\n    Eval();\n    return shape();\n  };\n\n  shape = function () {\n    var ai, an, i, l1, m1, ndim, ref2, ref3, t;\n    i = 0;\n    ndim = 0;\n    t = 0;\n    ai = [];\n    an = [];\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n\n    save();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"transpose: tensor expected, 1st arg is not a tensor\");\n      }\n\n      push(zero);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(ndim);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = ndim;\n\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push_integer(p1.tensor.dim[i]);\n      p2.tensor.elem[i] = pop();\n    }\n\n    push(p2);\n    return restore();\n  };\n  /*\n   Simplify factorials\n  \n  The following script\n  \n    F(n,k) = k binomial(n,k)\n    (F(n,k) + F(n,k-1)) / F(n+1,k)\n  \n  generates\n  \n         k! n!             n! (1 - k + n)!              k! n!\n   -------------------- + -------------------- - ----------------------\n   (-1 + k)! (1 + n)!     (1 + n)! (-k + n)!     k (-1 + k)! (1 + n)!\n  \n  Simplify each term to get\n  \n      k       1 - k + n       1\n   ------- + ----------- - -------\n    1 + n       1 + n       1 + n\n  \n  Then simplify the sum to get\n  \n      n\n   -------\n    1 + n\n   */\n\n\n  Eval_simfac = function () {\n    push(cadr(p1));\n    Eval();\n    return simfac();\n  };\n\n  simfac = function () {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      h = tos;\n      p1 = cdr(p1);\n\n      while (p1 !== symbol(NIL)) {\n        push(car(p1));\n        simfac_term();\n        p1 = cdr(p1);\n      }\n\n      add_all(tos - h);\n    } else {\n      push(p1);\n      simfac_term();\n    }\n\n    return restore();\n  };\n  /*\n  void\n  simfac(void)\n  {\n    int h\n    save()\n    p1 = pop()\n    if (car(p1) == symbol(ADD)) {\n      h = tos\n      p1 = cdr(p1)\n      while (p1 != symbol(NIL)) {\n        push(car(p1))\n        simfac_term()\n        p1 = cdr(p1)\n      }\n      addk(tos - h)\n      p1 = pop()\n      if (find(p1, symbol(FACTORIAL))) {\n        push(p1)\n        if (car(p1) == symbol(ADD)) {\n          Condense()\n          simfac_term()\n        }\n      }\n    } else {\n      push(p1)\n      simfac_term()\n    }\n    restore()\n  }\n  \n  #endif\n   */\n\n\n  simfac_term = function () {\n    var doNothing, h;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) !== symbol(MULTIPLY)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    h = tos;\n    p1 = cdr(p1);\n\n    while (p1 !== symbol(NIL)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n\n    while (yysimfac(h)) {\n      doNothing = 1;\n    }\n\n    multiply_all_noexpand(tos - h);\n    return restore();\n  };\n\n  yysimfac = function (h) {\n    var i, j, l1, m1, ref2, ref3, ref4, ref5;\n    i = 0;\n    j = 0;\n\n    for (i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      p1 = stack[i];\n\n      for (j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; j = ref4 <= ref5 ? ++m1 : --m1) {\n        if (i === j) {\n          continue;\n        }\n\n        p2 = stack[j];\n\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && equal(cadr(p1), cadr(p2))) {\n          push(cadr(p1));\n          push(one);\n          subtract();\n          factorial();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n\n        if (car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL) && equal(p1, cadadr(p2))) {\n          push(p1);\n          push_integer(-1);\n          add();\n          factorial();\n          reciprocate();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n\n        if (car(p2) === symbol(FACTORIAL)) {\n          push(p1);\n          push(cadr(p2));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            push(p1);\n            factorial();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n\n        if (car(p1) === symbol(POWER) && isminusone(caddr(p1)) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            push(cadr(p1));\n            factorial();\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            stack[i] = cadr(p1);\n            stack[j] = one;\n            return 1;\n          }\n\n          if (isminusone(p3)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n\n          if (equaln(p3, 2)) {\n            stack[i] = cadr(p1);\n            push(cadr(p1));\n            push_integer(-1);\n            add();\n            stack[j] = pop();\n            return 1;\n          }\n\n          if (equaln(p3, -2)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            push(cadr(cadr(p2)));\n            push_integer(-1);\n            add();\n            reciprocate();\n            stack[j] = pop();\n            return 1;\n          }\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  Eval_simplify = function () {\n    push(cadr(p1));\n    runUserDefinedSimplifications();\n    Eval();\n    return simplify();\n  };\n\n  runUserDefinedSimplifications = function () {\n    var atLeastOneSuccessInRouldOfRulesApplications, eachConsecutiveRuleApplication, eachSimplification, l1, len, len1, m1, numberOfRulesApplications, originalexpanding, success;\n\n    if (userSimplificationsInListForm.length !== 0 && !Find(cadr(p1), symbol(INTEGRAL))) {\n      originalexpanding = expanding;\n      expanding = false;\n\n      if (DEBUG) {\n        console.log(\"runUserDefinedSimplifications passed: \" + stack[tos - 1].toString());\n      }\n\n      Eval();\n\n      if (DEBUG) {\n        console.log(\"runUserDefinedSimplifications after eval no expanding: \" + stack[tos - 1].toString());\n      }\n\n      expanding = originalexpanding;\n      p1 = stack[tos - 1];\n\n      if (DEBUG) {\n        console.log(\"patterns to be checked: \");\n      }\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        eachSimplification = userSimplificationsInListForm[l1];\n\n        if (DEBUG) {\n          console.log(\"...\" + eachSimplification);\n        }\n      }\n\n      atLeastOneSuccessInRouldOfRulesApplications = true;\n      numberOfRulesApplications = 0;\n\n      while (atLeastOneSuccessInRouldOfRulesApplications && numberOfRulesApplications < MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        atLeastOneSuccessInRouldOfRulesApplications = false;\n        numberOfRulesApplications++;\n\n        for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n          eachSimplification = userSimplificationsInListForm[m1];\n          success = true;\n          eachConsecutiveRuleApplication = 0;\n\n          while (success && eachConsecutiveRuleApplication < MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            eachConsecutiveRuleApplication++;\n\n            if (DEBUG) {\n              console.log(\"simplify - tos: \" + tos + \" checking pattern: \" + eachSimplification + \" on: \" + p1);\n            }\n\n            push_symbol(NIL);\n            success = transform(eachSimplification, true);\n\n            if (success) {\n              atLeastOneSuccessInRouldOfRulesApplications = true;\n            }\n\n            p1 = stack[tos - 1];\n\n            if (DEBUG) {\n              console.log(\"p1 at this stage of simplification: \" + p1);\n            }\n          }\n\n          if (eachConsecutiveRuleApplication === MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            stop(\"maximum application of single transformation rule exceeded: \" + eachSimplification);\n          }\n        }\n      }\n\n      if (numberOfRulesApplications === MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        stop(\"maximum application of all transformation rules exceeded \");\n      }\n\n      if (DEBUG) {\n        console.log(\"METAX = \" + get_binding(symbol(METAX)));\n        console.log(\"METAA = \" + get_binding(symbol(METAA)));\n        return console.log(\"METAB = \" + get_binding(symbol(METAB)));\n      }\n    }\n  };\n\n  simplifyForCodeGeneration = function () {\n    save();\n    runUserDefinedSimplifications();\n    codeGen = true;\n    simplify_main();\n    codeGen = false;\n    return restore();\n  };\n\n  simplify = function () {\n    save();\n    simplify_main();\n    return restore();\n  };\n\n  simplify_main = function () {\n    var args, fbody;\n    p1 = pop();\n\n    if (codeGen && car(p1) === symbol(FUNCTION)) {\n      fbody = cadr(p1);\n      push(fbody);\n      eval();\n      simplify();\n      p3 = pop();\n      args = caddr(p1);\n      push_symbol(FUNCTION);\n      push(p3);\n      push(args);\n      list(3);\n      p1 = pop();\n    }\n\n    if (istensor(p1)) {\n      simplify_tensor();\n      return;\n    }\n\n    if (Find(p1, symbol(FACTORIAL))) {\n      push(p1);\n      simfac();\n      p2 = pop();\n      push(p1);\n      rationalize();\n      simfac();\n      p3 = pop();\n\n      if (count(p2) < count(p3)) {\n        p1 = p2;\n      } else {\n        p1 = p3;\n      }\n    }\n\n    f10();\n    f1();\n    f2();\n    f3();\n    f4();\n    f5();\n    f9();\n    simplify_polarRect();\n\n    if (do_simplify_nested_radicals) {\n      if (simplify_nested_radicals()) {\n        if (DEBUG) {\n          console.log(\"de-nesting successful into: \" + p1.toString());\n        }\n\n        push(p1);\n        simplify();\n        return;\n      }\n    }\n\n    simplify_rectToClock();\n    simplify_rational_expressions();\n    return push(p1);\n  };\n\n  simplify_tensor = function () {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1.tensor.elem[i]);\n      simplify();\n      p2.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(p2);\n\n    if (isZeroAtomOrTensor(p2)) {\n      p2 = zero;\n    }\n\n    return push(p2);\n  };\n\n  f1 = function () {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push(p1);\n    rationalize();\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f2 = function () {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push(p1);\n    Condense();\n    p2 = pop();\n\n    if (count(p2) <= count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f3 = function () {\n    push(p1);\n    rationalize();\n    negate();\n    rationalize();\n    negate();\n    rationalize();\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f10 = function () {\n    var a, b, carp1, miao, originalexpanding;\n    carp1 = car(p1);\n    miao = cdr(p1);\n\n    if (carp1 === symbol(MULTIPLY) || isinnerordot(p1)) {\n      if (car(car(cdr(p1))) === symbol(TRANSPOSE) && car(car(cdr(cdr(p1)))) === symbol(TRANSPOSE)) {\n        if (DEBUG) {\n          console.log(\"maybe collecting a transpose \" + p1);\n        }\n\n        a = cadr(car(cdr(p1)));\n        b = cadr(car(cdr(cdr(p1))));\n\n        if (carp1 === symbol(MULTIPLY)) {\n          push(a);\n          push(b);\n          multiply();\n        } else if (isinnerordot(p1)) {\n          push(b);\n          push(a);\n          inner();\n        }\n\n        push_integer(1);\n        push_integer(2);\n        originalexpanding = expanding;\n        expanding = false;\n        transpose();\n        expanding = originalexpanding;\n        p2 = pop();\n\n        if (count(p2) < count(p1)) {\n          p1 = p2;\n        }\n\n        if (DEBUG) {\n          return console.log(\"collecting a transpose \" + p2);\n        }\n      }\n    }\n  };\n\n  f4 = function () {\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n\n    push(p1);\n    rationalize();\n    inverse();\n    rationalize();\n    inverse();\n    rationalize();\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_trig = function () {\n    save();\n    p1 = pop();\n    f5();\n    push(p1);\n    return restore();\n  };\n\n  f5 = function () {\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n\n    p2 = p1;\n    trigmode = 1;\n    push(p2);\n    Eval();\n    p3 = pop();\n    trigmode = 2;\n    push(p2);\n    Eval();\n    p4 = pop();\n    trigmode = 0;\n\n    if (count(p4) < count(p3) || nterms(p4) < nterms(p3)) {\n      p3 = p4;\n    }\n\n    if (count(p3) < count(p1) || nterms(p3) < nterms(p1)) {\n      return p1 = p3;\n    }\n  };\n\n  f9 = function () {\n    var oldp1, oldp2;\n\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push_integer(0);\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      simplify();\n      add();\n      oldp1 = p1;\n      oldp2 = p2;\n      p1 = pop();\n      simplify_rational_expressions();\n      push(p1);\n      p1 = oldp1;\n      p2 = oldp2;\n      p2 = cdr(p2);\n    }\n\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rational_expressions = function () {\n    var denom, num, polyVar, sasa, theGCD;\n    push(p1);\n    denominator();\n    denom = pop();\n\n    if (isone(denom)) {\n      return;\n    }\n\n    push(p1);\n    numerator();\n    num = pop();\n\n    if (isone(num)) {\n      return;\n    }\n\n    if (!(polyVar = areunivarpolysfactoredorexpandedform(num, denom))) {\n      return;\n    }\n\n    push(num);\n    push(denom);\n    gcd();\n    push(polyVar);\n    factor();\n    theGCD = pop();\n\n    if (isone(theGCD)) {\n      return;\n    }\n\n    push(num);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    push(denom);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    divide();\n    Condense();\n    sasa = stack[tos - 1].toString();\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rectToClock = function () {\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n\n    push(p1);\n    Eval();\n    clockform();\n    p2 = pop();\n\n    if (DEBUG) {\n      console.log(\"before simplification clockform: \" + p1 + \" after: \" + p2);\n    }\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_polarRect = function () {\n    push(p1);\n    polarRectAMinusOneBase();\n    Eval();\n    p2 = pop();\n\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  polarRectAMinusOneBase = function () {\n    var h;\n    save();\n    p1 = pop();\n\n    if (isimaginaryunit(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (equal(car(p1), symbol(POWER)) && isminusone(cadr(p1))) {\n      push(one);\n      negate();\n      push(caddr(p1));\n      polarRectAMinusOneBase();\n      power();\n      polar();\n      rect();\n    } else if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        polarRectAMinusOneBase();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    restore();\n  };\n\n  nterms = function (p) {\n    if (car(p) !== symbol(ADD)) {\n      return 1;\n    } else {\n      return length(p) - 1;\n    }\n  };\n\n  simplify_nested_radicals = function () {\n    var prev_expanding, simplificationWithCondense, simplificationWithoutCondense, somethingSimplified;\n\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n\n      return false;\n    }\n\n    push(p1);\n    somethingSimplified = take_care_of_nested_radicals();\n    simplificationWithoutCondense = stack[tos - 1];\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    simplificationWithCondense = pop();\n\n    if (countOccurrencesOfSymbol(symbol(POWER), simplificationWithoutCondense) < countOccurrencesOfSymbol(symbol(POWER), simplificationWithCondense)) {\n      push(simplificationWithoutCondense);\n    } else {\n      push(simplificationWithCondense);\n    }\n\n    p1 = pop();\n    return somethingSimplified;\n  };\n\n  take_care_of_nested_radicals = function () {\n    var A, B, C, SOLUTION, anyRadicalSimplificationWorked, base, checkSize, commonBases, commonInnerExponent, countingTerms, eachSolution, exponent, firstTerm, h, i, innerbase, innerexponent, l1, len, len1, len2, len3, lowercase_a, lowercase_b, m1, n1, numberOfTerms, o1, possibleNewExpression, possibleNewExpressionValue, possibleRationalSolutions, possibleSolutions, potentialPower, realOfpossibleRationalSolutions, ref2, secondTerm, secondTermFactor, termsThatAreNotPowers, whichRationalSolution;\n\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n\n      return false;\n    }\n\n    save();\n    p1 = pop();\n\n    if (equal(car(p1), symbol(POWER))) {\n      base = cadr(p1);\n      exponent = caddr(p1);\n\n      if (!isminusone(exponent) && equal(car(base), symbol(ADD)) && isfraction(exponent) && (equalq(exponent, 1, 3) || equalq(exponent, 1, 2))) {\n        firstTerm = cadr(base);\n        push(firstTerm);\n        take_care_of_nested_radicals();\n        pop();\n        secondTerm = caddr(base);\n        push(secondTerm);\n        take_care_of_nested_radicals();\n        pop();\n        numberOfTerms = 0;\n        countingTerms = base;\n\n        while (cdr(countingTerms) !== symbol(NIL)) {\n          numberOfTerms++;\n          countingTerms = cdr(countingTerms);\n        }\n\n        if (numberOfTerms > 2) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        commonInnerExponent = null;\n        commonBases = [];\n        termsThatAreNotPowers = [];\n\n        if (car(secondTerm) === symbol(MULTIPLY)) {\n          secondTermFactor = cdr(secondTerm);\n\n          if (iscons(secondTermFactor)) {\n            while (iscons(secondTermFactor)) {\n              potentialPower = car(secondTermFactor);\n\n              if (car(potentialPower) === symbol(POWER)) {\n                innerbase = cadr(potentialPower);\n                innerexponent = caddr(potentialPower);\n\n                if (equalq(innerexponent, 1, 2)) {\n                  if (commonInnerExponent == null) {\n                    commonInnerExponent = innerexponent;\n                    commonBases.push(innerbase);\n                  } else {\n                    if (equal(innerexponent, commonInnerExponent)) {\n                      commonBases.push(innerbase);\n                    } else {}\n                  }\n                }\n              } else {\n                termsThatAreNotPowers.push(potentialPower);\n              }\n\n              secondTermFactor = cdr(secondTermFactor);\n            }\n          }\n        } else if (car(secondTerm) === symbol(POWER)) {\n          innerbase = cadr(secondTerm);\n          innerexponent = caddr(secondTerm);\n\n          if (commonInnerExponent == null && equalq(innerexponent, 1, 2)) {\n            commonInnerExponent = innerexponent;\n            commonBases.push(innerbase);\n          }\n        }\n\n        if (commonBases.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        A = firstTerm;\n        push_integer(1);\n\n        for (l1 = 0, len = commonBases.length; l1 < len; l1++) {\n          i = commonBases[l1];\n          push(i);\n          multiply();\n        }\n\n        C = pop();\n        push_integer(1);\n\n        for (m1 = 0, len1 = termsThatAreNotPowers.length; m1 < len1; m1++) {\n          i = termsThatAreNotPowers[m1];\n          push(i);\n          multiply();\n        }\n\n        B = pop();\n\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          negate();\n          push(C);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push_integer(3);\n          push(C);\n          multiply();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(-3);\n          push(A);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push_integer(1);\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          multiply();\n          add();\n          add();\n          add();\n        } else if (equalq(exponent, 1, 2)) {\n          push(C);\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push_integer(-2);\n          push(A);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(1);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n        }\n\n        push(symbol(SECRETX));\n        recursionLevelNestedRadicalsRemoval++;\n        roots();\n        recursionLevelNestedRadicalsRemoval--;\n\n        if (equal(stack[tos - 1], symbol(NIL))) {\n          if (DEBUG) {\n            console.log(\"roots bailed out because of too much recursion\");\n          }\n\n          pop();\n          push(p1);\n          restore();\n          return false;\n        }\n\n        possibleSolutions = [];\n        ref2 = stack[tos - 1].tensor.elem;\n\n        for (n1 = 0, len2 = ref2.length; n1 < len2; n1++) {\n          eachSolution = ref2[n1];\n\n          if (!Find(eachSolution, symbol(POWER))) {\n            possibleSolutions.push(eachSolution);\n          }\n        }\n\n        pop();\n\n        if (possibleSolutions.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        possibleRationalSolutions = [];\n        realOfpossibleRationalSolutions = [];\n\n        for (o1 = 0, len3 = possibleSolutions.length; o1 < len3; o1++) {\n          i = possibleSolutions[o1];\n          push(i);\n          real();\n          yyfloat();\n          possibleRationalSolutions.push(i);\n          realOfpossibleRationalSolutions.push(pop().d);\n        }\n\n        whichRationalSolution = realOfpossibleRationalSolutions.indexOf(Math.max.apply(Math, realOfpossibleRationalSolutions));\n        SOLUTION = possibleRationalSolutions[whichRationalSolution];\n        /*\n        #possibleNewExpressions = []\n        #realOfPossibleNewExpressions = []\n         * pick the solution which cubic root has no radicals\n        lowercase_b = null\n        for SOLUTION in possibleSolutions\n          console.log(\"testing solution: \" + SOLUTION.toString())\n        \n          debugger\n          if equalq(exponent,1,3)\n            push(A)\n            push(SOLUTION)\n            push_integer(3)\n            power()\n            push_integer(3)\n            push(C)\n            multiply()\n            push(SOLUTION)\n            multiply()\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,3)\n            power()\n          else if equalq(exponent,1,2)\n            push(A)\n            push(SOLUTION)\n            push_integer(2)\n            power()\n            push(C)\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,2)\n            power()\n          console.log(\"b is: \" + stack[tos-1].toString())\n        \n          lowercase_b = pop()\n        \n          if !Find(lowercase_b, symbol(POWER))\n            break\n         */\n\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(3);\n          power();\n          push_integer(3);\n          push(C);\n          multiply();\n          push(SOLUTION);\n          multiply();\n          add();\n          divide();\n          push_rational(1, 3);\n          power();\n        } else if (equalq(exponent, 1, 2)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(2);\n          power();\n          push(C);\n          add();\n          divide();\n          push_rational(1, 2);\n          power();\n        }\n\n        lowercase_b = pop();\n\n        if (lowercase_b == null) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        push(lowercase_b);\n        push(SOLUTION);\n        multiply();\n\n        if (equalq(exponent, 1, 3)) {\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n        } else if (equalq(exponent, 1, 2)) {\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n          possibleNewExpression = pop();\n          push(possibleNewExpression);\n          real();\n          yyfloat();\n          possibleNewExpressionValue = pop();\n\n          if (!isnegativenumber(possibleNewExpressionValue)) {\n            push(possibleNewExpression);\n          } else {\n            push(lowercase_b);\n            negate();\n            lowercase_b = pop();\n            push(lowercase_a);\n            negate();\n            lowercase_a = pop();\n            push(lowercase_b);\n            push(C);\n            push_rational(1, 2);\n            power();\n            multiply();\n            push(lowercase_a);\n            add();\n            simplify();\n          }\n        }\n\n        p1 = pop();\n        push(p1);\n        restore();\n        return true;\n      } else {\n        push(p1);\n        restore();\n        return false;\n      }\n    } else if (iscons(p1)) {\n      h = tos;\n      anyRadicalSimplificationWorked = false;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        anyRadicalSimplificationWorked = anyRadicalSimplificationWorked || take_care_of_nested_radicals();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return anyRadicalSimplificationWorked;\n    } else {\n      push(p1);\n      restore();\n      return false;\n    }\n\n    throw new Error(\"control flow should never reach here\");\n  };\n\n  Eval_sin = function () {\n    push(cadr(p1));\n    Eval();\n    return sine();\n  };\n\n  sine = function () {\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      sine_of_angle_sum();\n    } else {\n      sine_of_angle();\n    }\n\n    return restore();\n  };\n\n  sine_of_angle_sum = function () {\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      p4 = car(p2);\n\n      if (isnpi(p4)) {\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        sine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        cosine();\n        push(p4);\n        sine();\n        multiply();\n        add();\n        return;\n      }\n\n      p2 = cdr(p2);\n    }\n\n    return sine_of_angle();\n  };\n\n  sine_of_angle = function () {\n    var d, n;\n\n    if (car(p1) === symbol(ARCSIN)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.sin(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      sine();\n      negate();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      multiply();\n      return;\n    }\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(SIN));\n      push(p1);\n      list(2);\n      return;\n    }\n\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n\n      case 30:\n      case 150:\n        return push_rational(1, 2);\n\n      case 210:\n      case 330:\n        return push_rational(-1, 2);\n\n      case 45:\n      case 135:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 225:\n      case 315:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 60:\n      case 120:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 240:\n      case 300:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 90:\n        return push_integer(1);\n\n      case 270:\n        return push_integer(-1);\n\n      default:\n        push(symbol(SIN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_sinh = function () {\n    push(cadr(p1));\n    Eval();\n    return ysinh();\n  };\n\n  ysinh = function () {\n    save();\n    yysinh();\n    return restore();\n  };\n\n  yysinh = function () {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCSINH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.sinh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    push_symbol(SINH);\n    push(p1);\n    return list(2);\n  };\n  /*\n    Substitute new expr for old expr in expr.\n  \n    Input:  push  expr\n  \n      push  old expr\n  \n      push  new expr\n  \n    Output:  Result on stack\n   */\n\n\n  subst = function () {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n\n    if (p2 === symbol(NIL) || p3 === symbol(NIL)) {\n      restore();\n      return;\n    }\n\n    p1 = pop();\n\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n\n      for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n\n      for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2);\n        push(p3);\n        subst();\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n\n      push(p4);\n    } else if (equal(p1, p2)) {\n      push(p3);\n    } else if (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      push(p3);\n      subst();\n      push(cdr(p1));\n      push(p2);\n      push(p3);\n      subst();\n      cons();\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  Eval_sum = function () {\n    var body, i, indexVariable, j, k, l1, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    body = cadr(p1);\n    indexVariable = caddr(p1);\n\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n\n    p4 = get_binding(indexVariable);\n    push_integer(0);\n\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      add();\n    }\n\n    return set_binding(indexVariable, p4);\n  };\n\n  Eval_tan = function () {\n    push(cadr(p1));\n    Eval();\n    return tangent();\n  };\n\n  tangent = function () {\n    save();\n    yytangent();\n    return restore();\n  };\n\n  yytangent = function () {\n    var d, n;\n    n = 0;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.tan(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      tangent();\n      negate();\n      return;\n    }\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(TAN));\n      push(p1);\n      list(2);\n      return;\n    }\n\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n\n      case 30:\n      case 210:\n        push_rational(1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 150:\n      case 330:\n        push_rational(-1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 45:\n      case 225:\n        return push_integer(1);\n\n      case 135:\n      case 315:\n        return push_integer(-1);\n\n      case 60:\n      case 240:\n        push_integer(3);\n        push_rational(1, 2);\n        return power();\n\n      case 120:\n      case 300:\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return negate();\n\n      default:\n        push(symbol(TAN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_tanh = function () {\n    var d;\n    d = 0.0;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCTANH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.tanh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    push_symbol(TANH);\n    push(p1);\n    return list(2);\n  };\n  /*\n  Taylor expansion of a function\n  \n    push(F)\n    push(X)\n    push(N)\n    push(A)\n    taylor()\n   */\n\n\n  Eval_taylor = function () {\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(24);\n    } else {\n      push(p2);\n    }\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n\n    return taylor();\n  };\n\n  taylor = function () {\n    var i, k, l1, ref2;\n    i = 0;\n    k = 0;\n    save();\n    p4 = pop();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p3);\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push_symbol(TAYLOR);\n      push(p1);\n      push(p2);\n      push(p3);\n      push(p4);\n      list(5);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push(p2);\n    push(p4);\n    subst();\n    Eval();\n    push_integer(1);\n    p5 = pop();\n\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(p2);\n      derivative();\n      p1 = pop();\n\n      if (isZeroAtomOrTensor(p1)) {\n        break;\n      }\n\n      push(p5);\n      push(p2);\n      push(p4);\n      subtract();\n      multiply();\n      p5 = pop();\n      push(p1);\n      push(p2);\n      push(p4);\n      subst();\n      Eval();\n      push(p5);\n      multiply();\n      push_integer(i);\n      factorial();\n      divide();\n      add();\n    }\n\n    return restore();\n  };\n  /* tensor =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  General description\n  -------------------\n  Tensors are a strange in-between of matrices and \"computer\"\n  rectangular data structures.\n  \n  Tensors, unlike matrices, and like rectangular data structures,\n  can have an arbitrary number of dimensions (rank), although a tensor with\n  rank zero is just a scalar.\n  \n  Tensors, like matrices and unlike many computer rectangular data structures,\n  must be \"contiguous\" i.e. have no empty spaces within its size, and \"uniform\",\n  i.e. each element must have the same shape and hence the same rank.\n  \n  Also tensors have necessarily to make a distinction between row vectors,\n  column vectors (which have a rank of 2) and uni-dimensional vectors (rank 1).\n  They look very similar but they are fundamentally different.\n  \n  Tensors are 1-indexed, as per general math notation, and like Fortran,\n  Lua, Mathematica, SASL, MATLAB, Julia, Erlang and APL.\n  \n  Tensors with elements that are also tensors get promoted to a higher rank\n  , this is so we can represent and get the rank of a matrix correctly.\n  Example:\n  Start with a tensor of rank 1 with 2 elements (i.e. shape: 2)\n  if you put in both its elements another 2 tensors\n  of rank 1 with 2 elements (i.e. shape: 2)\n  then the result is a tensor of rank 2 with shape 2,2\n  i.e. the dimension of a tensor at all times must be\n  the number of nested tensors in it.\n  Also, all tensors must be \"uniform\" i.e. they must be accessed\n  uniformly, which means that all existing elements of a tensor\n  must be contiguous and have the same shape.\n  Implication of it all is that you can't put arbitrary\n  tensors inside tensors (like you would do to represent block matrices)\n  Rather, all tensors inside tensors must have same shape (and hence, rank)\n  \n  Limitations\n  -----------\n  n.a.\n  \n  Implementation info\n  -------------------\n  Tensors are implemented...\n   */\n\n\n  Eval_tensor = function () {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    check_tensor_dimensions(p1);\n    nelem = p1.tensor.nelem;\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    check_tensor_dimensions(p2);\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      Eval();\n      b[i] = pop();\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return promote_tensor();\n  };\n\n  tensor_plus_tensor = function () {\n    var a, b, c, i, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n\n    if (ndim !== p2.tensor.ndim) {\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] !== p2.tensor.dim[i]) {\n        push(symbol(NIL));\n        restore();\n        return;\n      }\n    }\n\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n\n    for (i = n1 = 0, ref4 = nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      push(a[i]);\n      push(b[i]);\n      add();\n      c[i] = pop();\n    }\n\n    push(p3);\n    return restore();\n  };\n\n  tensor_times_scalar = function () {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      multiply();\n      b[i] = pop();\n    }\n\n    push(p3);\n    return restore();\n  };\n\n  scalar_times_tensor = function () {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p2.tensor.ndim;\n    nelem = p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p2.tensor.dim[i];\n    }\n\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      push(a[i]);\n      multiply();\n      b[i] = pop();\n    }\n\n    push(p3);\n    return restore();\n  };\n\n  check_tensor_dimensions = function (p) {\n    if (p.tensor.nelem !== p.tensor.elem.length) {\n      console.log(\"something wrong in tensor dimensions\");\n      debugger;\n    }\n  };\n\n  is_square_matrix = function (p) {\n    if (istensor(p) && p.tensor.ndim === 2 && p.tensor.dim[0] === p.tensor.dim[1]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  d_tensor_tensor = function () {\n    var a, b, c, i, j, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n\n    if (ndim + 1 >= MAXDIM) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    p3 = alloc_tensor(nelem * p2.tensor.nelem);\n    p3.tensor.ndim = ndim + 1;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    p3.tensor.dim[ndim] = p2.tensor.dim[0];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      for (j = n1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n        push(a[i]);\n        push(b[j]);\n        derivative();\n        c[i * p2.tensor.nelem + j] = pop();\n      }\n    }\n\n    return push(p3);\n  };\n\n  d_scalar_tensor = function () {\n    var a, b, i, l1, ref2;\n    p3 = alloc_tensor(p2.tensor.nelem);\n    p3.tensor.ndim = 1;\n    p3.tensor.dim[0] = p2.tensor.dim[0];\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = l1 = 0, ref2 = p2.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(a[i]);\n      derivative();\n      b[i] = pop();\n    }\n\n    return push(p3);\n  };\n\n  d_tensor_scalar = function () {\n    var a, b, i, l1, m1, ref2, ref3;\n    i = 0;\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      derivative();\n      b[i] = pop();\n    }\n\n    return push(p3);\n  };\n\n  compare_tensors = function (p1, p2) {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n\n    if (p1.tensor.ndim < p2.tensor.ndim) {\n      return -1;\n    }\n\n    if (p1.tensor.ndim > p2.tensor.ndim) {\n      return 1;\n    }\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n        return -1;\n      }\n\n      if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n        return 1;\n      }\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      if (equal(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        continue;\n      }\n\n      if (lessp(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n\n    return 0;\n  };\n\n  power_tensor = function () {\n    var i, k, l1, m1, n, ref2, ref3, results;\n    i = 0;\n    k = 0;\n    n = 0;\n    k = p1.tensor.ndim - 1;\n\n    if (p1.tensor.dim[0] !== p1.tensor.dim[k]) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    push(p2);\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    if (n === 0) {\n      if (p1.tensor.ndim !== 2) {\n        stop(\"power(tensor,0) with tensor rank not equal to 2\");\n      }\n\n      n = p1.tensor.dim[0];\n      p1 = alloc_tensor(n * n);\n      p1.tensor.ndim = 2;\n      p1.tensor.dim[0] = n;\n      p1.tensor.dim[1] = n;\n\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        p1.tensor.elem[n * i + i] = one;\n      }\n\n      check_tensor_dimensions(p1);\n      push(p1);\n      return;\n    }\n\n    if (n < 0) {\n      n = -n;\n      push(p1);\n      inv();\n      p1 = pop();\n    }\n\n    push(p1);\n    results = [];\n\n    for (i = m1 = 1, ref3 = n; 1 <= ref3 ? m1 < ref3 : m1 > ref3; i = 1 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      inner();\n\n      if (isZeroAtomOrTensor(stack[tos - 1])) {\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n\n    return results;\n  };\n\n  copy_tensor = function () {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p1 = pop();\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return restore();\n  };\n\n  promote_tensor = function () {\n    var i, j, k, l1, m1, n1, ndim, nelem, o1, q1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    j = 0;\n    k = 0;\n    nelem = 0;\n    ndim = 0;\n    save();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    p2 = p1.tensor.elem[0];\n\n    for (i = l1 = 1, ref2 = p1.tensor.nelem; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      if (!compatible(p2, p1.tensor.elem[i])) {\n        stop(\"Cannot promote tensor due to inconsistent tensor components.\");\n      }\n    }\n\n    if (!istensor(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n\n    if (ndim > MAXDIM) {\n      stop(\"tensor rank > \" + MAXDIM);\n    }\n\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = m1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (j = n1 = 0, ref4 = p2.tensor.ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n      p3.tensor.dim[i + j] = p2.tensor.dim[j];\n    }\n\n    k = 0;\n\n    for (i = o1 = 0, ref5 = p1.tensor.nelem; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      p2 = p1.tensor.elem[i];\n\n      for (j = q1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; j = 0 <= ref6 ? ++q1 : --q1) {\n        p3.tensor.elem[k++] = p2.tensor.elem[j];\n      }\n    }\n\n    check_tensor_dimensions(p2);\n    check_tensor_dimensions(p3);\n    push(p3);\n    return restore();\n  };\n\n  compatible = function (p, q) {\n    var i, l1, ref2;\n\n    if (!istensor(p) && !istensor(q)) {\n      return 1;\n    }\n\n    if (!istensor(p) || !istensor(q)) {\n      return 0;\n    }\n\n    if (p.tensor.ndim !== q.tensor.ndim) {\n      return 0;\n    }\n\n    for (i = l1 = 0, ref2 = p.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p.tensor.dim[i] !== q.tensor.dim[i]) {\n        return 0;\n      }\n    }\n\n    return 1;\n  };\n\n  Eval_test = function () {\n    var checkResult, orig;\n    orig = p1;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      if (cdr(p1) === symbol(NIL)) {\n        push(car(p1));\n        Eval();\n        return;\n      }\n\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(p1));\n\n      if (checkResult == null) {\n        push(orig);\n        return;\n      } else if (checkResult) {\n        push(cadr(p1));\n        Eval();\n        return;\n      } else {\n        p1 = cddr(p1);\n      }\n    }\n\n    return push_integer(0);\n  };\n\n  Eval_testeq = function () {\n    var checkResult, orig, subtractionResult;\n    orig = p1;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if (checkResult != null && !checkResult) {\n      push_integer(1);\n      return;\n    }\n\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if (checkResult != null && !checkResult) {\n      push_integer(1);\n      return;\n    }\n\n    return push(orig);\n  };\n\n  Eval_testge = function () {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison >= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testgt = function () {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison > 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testle = function () {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison <= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testlt = function () {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison < 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_not = function () {\n    var checkResult, wholeAndExpression;\n    wholeAndExpression = p1;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n\n    if (checkResult == null) {\n      return push(wholeAndExpression);\n    } else if (checkResult) {\n      return push_integer(0);\n    } else {\n      return push_integer(1);\n    }\n  };\n  /* and =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  Logical-and of predicate expressions.\n   */\n\n\n  Eval_and = function () {\n    var andPredicates, checkResult, somePredicateUnknown, wholeAndExpression;\n    wholeAndExpression = p1;\n    andPredicates = cdr(wholeAndExpression);\n    somePredicateUnknown = false;\n\n    while (iscons(andPredicates)) {\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(andPredicates));\n\n      if (checkResult == null) {\n        somePredicateUnknown = true;\n        andPredicates = cdr(andPredicates);\n      } else if (checkResult) {\n        andPredicates = cdr(andPredicates);\n      } else if (!checkResult) {\n        push_integer(0);\n        return;\n      }\n    }\n\n    if (somePredicateUnknown) {\n      return push(wholeAndExpression);\n    } else {\n      return push_integer(1);\n    }\n  };\n\n  Eval_or = function () {\n    var checkResult, orPredicates, somePredicateUnknown, wholeOrExpression;\n    wholeOrExpression = p1;\n    orPredicates = cdr(wholeOrExpression);\n    somePredicateUnknown = false;\n\n    while (iscons(orPredicates)) {\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(orPredicates));\n\n      if (checkResult == null) {\n        somePredicateUnknown = true;\n        orPredicates = cdr(orPredicates);\n      } else if (checkResult) {\n        push_integer(1);\n        return;\n      } else if (!checkResult) {\n        orPredicates = cdr(orPredicates);\n      }\n    }\n\n    if (somePredicateUnknown) {\n      return push(wholeOrExpression);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  cmp_args = function () {\n    var t;\n    t = 0;\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    p1 = pop();\n\n    if (p1.k !== NUM && p1.k !== DOUBLE) {\n      push(p1);\n      yyfloat();\n      Eval();\n      p1 = pop();\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      return 0;\n    }\n\n    switch (p1.k) {\n      case NUM:\n        if (MSIGN(p1.q.a) === -1) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p1.d < 0.0) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n\n        break;\n\n      default:\n        t = null;\n    }\n\n    return t;\n  };\n  /*\n  Transform an expression using a pattern. The\n  pattern can come from the integrals table or\n  the user-defined patterns.\n  \n  The expression and free variable are on the stack.\n  \n  The argument s is a null terminated list of transform rules.\n  \n  For example, see the itab (integrals table)\n  \n  Internally, the following symbols are used:\n  \n    F  input expression\n  \n    X  free variable, i.e. F of X\n  \n    A  template expression\n  \n    B  result expression\n  \n    C  list of conditional expressions\n  \n  Puts the final expression on top of stack\n  (whether it's transformed or not) and returns\n  true is successful, false if not.\n   */\n\n\n  transform = function (s, generalTransform) {\n    var bookmarkTosToPrintDecomps, eachTransformEntry, i, l1, len, len1, m1, n1, numberOfDecomps, ref2, restTerm, secondTerm, success, theTransform, transform_h, transformationSuccessful, transformedTerms;\n    transform_h = 0;\n    save();\n    p1 = null;\n    p4 = pop();\n    p3 = pop();\n\n    if (DEBUG) {\n      console.log(\"         !!!!!!!!!   transform on: \" + p3);\n    }\n\n    saveMetaBindings();\n    set_binding(symbol(METAX), p4);\n    transform_h = tos;\n    push_integer(1);\n    push(p3);\n    push(p4);\n    polyform();\n    push(p4);\n    bookmarkTosToPrintDecomps = tos - 2;\n    decomp(generalTransform);\n    numberOfDecomps = tos - bookmarkTosToPrintDecomps;\n\n    if (DEBUG) {\n      console.log(\"  \" + numberOfDecomps + \" decomposed elements ====== \");\n\n      for (i = l1 = 0, ref2 = numberOfDecomps; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        console.log(\"  decomposition element \" + i + \": \" + stack[tos - 1 - i]);\n      }\n    }\n\n    transformationSuccessful = false;\n\n    if (generalTransform) {\n      if (!isNumericAtom(p3)) {\n        theTransform = s;\n\n        if (DEBUG) {\n          console.log(\"applying transform: \" + theTransform);\n        }\n\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + theTransform);\n        }\n\n        push(theTransform);\n        push(symbol(SYMBOL_A_UNDERSCORE));\n        push(symbol(METAA));\n        subst();\n        push(symbol(SYMBOL_B_UNDERSCORE));\n        push(symbol(METAB));\n        subst();\n        push(symbol(SYMBOL_X_UNDERSCORE));\n        push(symbol(METAX));\n        subst();\n        p1 = pop();\n        p5 = car(p1);\n\n        if (DEBUG) {\n          console.log(\"template expression: \" + p5);\n        }\n\n        p6 = cadr(p1);\n        p7 = cddr(p1);\n        /*\n        p5 = p1.tensor.elem[0]\n        p6 = p1.tensor.elem[1]\n        for i in [2..(p1.tensor.elem.length-1)]\n          push p1.tensor.elem[i]\n        list(p1.tensor.elem.length - 2)\n        p7 = pop()\n         */\n\n        if (f_equals_a(transform_h, generalTransform)) {\n          transformationSuccessful = true;\n        } else {\n          if (DEBUG) {\n            console.log(\"p3 at this point: \" + p3);\n          }\n\n          transformedTerms = [];\n\n          if (DEBUG) {\n            console.log(\"car(p3): \" + car(p3));\n          }\n\n          restTerm = p3;\n\n          if (iscons(restTerm)) {\n            transformedTerms.push(car(p3));\n            restTerm = cdr(p3);\n          }\n\n          while (iscons(restTerm)) {\n            secondTerm = car(restTerm);\n            restTerm = cdr(restTerm);\n\n            if (DEBUG) {\n              console.log(\"tos before recursive transform: \" + tos);\n            }\n\n            push(secondTerm);\n            push_symbol(NIL);\n\n            if (DEBUG) {\n              console.log(\"testing: \" + secondTerm);\n            }\n\n            if (DEBUG) {\n              console.log(\"about to try to simplify other term: \" + secondTerm);\n            }\n\n            success = transform(s, generalTransform);\n            transformationSuccessful = transformationSuccessful || success;\n            transformedTerms.push(pop());\n\n            if (DEBUG) {\n              console.log(\"tried to simplify other term: \" + secondTerm + \" ...successful?: \" + success + \" ...transformed: \" + transformedTerms[transformedTerms.length - 1]);\n            }\n          }\n\n          if (transformedTerms.length !== 0) {\n            for (m1 = 0, len = transformedTerms.length; m1 < len; m1++) {\n              i = transformedTerms[m1];\n              push(i);\n            }\n\n            list(transformedTerms.length);\n            p6 = pop();\n          }\n        }\n      }\n    } else {\n      for (n1 = 0, len1 = s.length; n1 < len1; n1++) {\n        eachTransformEntry = s[n1];\n\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + eachTransformEntry);\n\n          if ((eachTransformEntry + \"\").indexOf(\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\") !== -1) {\n            debugger;\n          }\n        }\n\n        if (eachTransformEntry) {\n          scan_meta(eachTransformEntry);\n          p1 = pop();\n          p5 = cadr(p1);\n          p6 = caddr(p1);\n          p7 = cdddr(p1);\n          /*\n          p5 = p1.tensor.elem[0]\n          p6 = p1.tensor.elem[1]\n          for i in [2..(p1.tensor.elem.length-1)]\n            push p1.tensor.elem[i]\n          list(p1.tensor.elem.length - 2)\n          p7 = pop()\n           */\n\n          if (f_equals_a(transform_h, generalTransform)) {\n            transformationSuccessful = true;\n            break;\n          }\n        }\n      }\n    }\n\n    moveTos(transform_h);\n\n    if (transformationSuccessful) {\n      push(p6);\n      Eval();\n      p1 = pop();\n      transformationSuccessful = true;\n    } else {\n      if (generalTransform) {\n        p1 = p3;\n      } else {\n        p1 = symbol(NIL);\n      }\n    }\n\n    restoreMetaBindings();\n    push(p1);\n    restore();\n    return transformationSuccessful;\n  };\n\n  saveMetaBindings = function () {\n    push(get_binding(symbol(METAA)));\n    push(get_binding(symbol(METAB)));\n    return push(get_binding(symbol(METAX)));\n  };\n\n  restoreMetaBindings = function () {\n    set_binding(symbol(METAX), pop());\n    set_binding(symbol(METAB), pop());\n    return set_binding(symbol(METAA), pop());\n  };\n\n  f_equals_a = function (h, generalTransform) {\n    var fea_i, fea_j, l1, m1, originalexpanding, ref2, ref3, ref4, ref5;\n    fea_i = 0;\n    fea_j = 0;\n\n    for (fea_i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; fea_i = ref2 <= ref3 ? ++l1 : --l1) {\n      set_binding(symbol(METAA), stack[fea_i]);\n\n      if (DEBUG) {\n        console.log(\"  binding METAA to \" + get_binding(symbol(METAA)));\n      }\n\n      for (fea_j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; fea_j = ref4 <= ref5 ? ++m1 : --m1) {\n        set_binding(symbol(METAB), stack[fea_j]);\n\n        if (DEBUG) {\n          console.log(\"  binding METAB to \" + get_binding(symbol(METAB)));\n        }\n\n        p1 = p7;\n\n        while (iscons(p1)) {\n          push(car(p1));\n          Eval();\n          p2 = pop();\n\n          if (isZeroAtomOrTensor(p2)) {\n            break;\n          }\n\n          p1 = cdr(p1);\n        }\n\n        if (iscons(p1)) {\n          continue;\n        }\n\n        push(p3);\n\n        if (DEBUG) {\n          console.log(\"about to evaluate template expression: \" + p5 + \" binding METAA to \" + get_binding(symbol(METAA)) + \" and binding METAB to \" + get_binding(symbol(METAB)) + \" and binding METAX to \" + get_binding(symbol(METAX)));\n        }\n\n        push(p5);\n\n        if (generalTransform) {\n          originalexpanding = expanding;\n          expanding = false;\n        }\n\n        Eval();\n\n        if (generalTransform) {\n          expanding = originalexpanding;\n        }\n\n        if (DEBUG) {\n          console.log(\"  comparing \" + stack[tos - 1] + \" to: \" + stack[tos - 2]);\n        }\n\n        subtract();\n        p1 = pop();\n\n        if (isZeroAtomOrTensor(p1)) {\n          if (DEBUG) {\n            console.log(\"binding METAA to \" + get_binding(symbol(METAA)));\n            console.log(\"binding METAB to \" + get_binding(symbol(METAB)));\n            console.log(\"binding METAX to \" + get_binding(symbol(METAX)));\n            console.log(\"comparing \" + p3 + \" to: \" + p5);\n          }\n\n          return 1;\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  Eval_transpose = function () {\n    push(cadr(p1));\n    Eval();\n\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n\n    return transpose();\n  };\n\n  transpose = function () {\n    var a, accumulator, ai, an, b, eachEntry, i, innerTranspSwitch1, innerTranspSwitch2, j, k, l, l1, m, m1, n1, ndim, nelem, o1, q1, r1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s1, t;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    ai = [];\n    an = [];\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n\n    if (isNumericAtom(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (isplusone(p2) && isplustwo(p3) || isplusone(p3) && isplustwo(p2)) {\n      if (isidentitymatrix(p1)) {\n        push(p1);\n        restore();\n        return;\n      }\n    }\n\n    if (istranspose(p1)) {\n      innerTranspSwitch1 = car(cdr(cdr(p1)));\n      innerTranspSwitch2 = car(cdr(cdr(cdr(p1))));\n\n      if (equal(innerTranspSwitch1, p3) && equal(innerTranspSwitch2, p2) || equal(innerTranspSwitch2, p3) && equal(innerTranspSwitch1, p2) || equal(innerTranspSwitch1, symbol(NIL)) && equal(innerTranspSwitch2, symbol(NIL)) && (isplusone(p3) && isplustwo(p2) || isplusone(p2) && isplustwo(p3))) {\n        push(car(cdr(p1)));\n        restore();\n        return;\n      }\n    }\n\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      push(zero);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        push(p3);\n        transpose();\n        add();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    }\n\n    if (expanding && ismultiply(p1)) {\n      p1 = cdr(p1);\n      push(one);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        push(p3);\n        transpose();\n        multiply();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    }\n\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n\n      while (iscons(p1)) {\n        accumulator.push([car(p1), p2, p3]);\n        p1 = cdr(p1);\n      }\n\n      for (eachEntry = m1 = ref3 = accumulator.length - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; eachEntry = ref3 <= 0 ? ++m1 : --m1) {\n        push(accumulator[eachEntry][0]);\n        push(accumulator[eachEntry][1]);\n        push(accumulator[eachEntry][2]);\n        transpose();\n\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n\n      restore();\n      return;\n    }\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        push_symbol(TRANSPOSE);\n        push(p1);\n\n        if ((!isplusone(p2) || !isplustwo(p3)) && (!isplusone(p3) || !isplustwo(p2))) {\n          push(p2);\n          push(p3);\n          list(4);\n        } else {\n          list(2);\n        }\n\n        restore();\n        return;\n      }\n\n      push(zero);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n\n    if (ndim === 1) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n\n    if (l < 1 || l > ndim || m < 1 || m > ndim) {\n      stop(\"transpose: index out of range\");\n    }\n\n    l--;\n    m--;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n\n    for (i = n1 = 0, ref4 = ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    p2.tensor.dim[l] = p1.tensor.dim[m];\n    p2.tensor.dim[m] = p1.tensor.dim[l];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n\n    for (i = o1 = 0, ref5 = ndim; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n\n    for (i = q1 = 0, ref6 = nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; i = 0 <= ref6 ? ++q1 : --q1) {\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      k = 0;\n\n      for (j = r1 = 0, ref7 = ndim; 0 <= ref7 ? r1 < ref7 : r1 > ref7; j = 0 <= ref7 ? ++r1 : --r1) {\n        k = k * an[j] + ai[j];\n      }\n\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      b[k] = a[i];\n\n      for (j = s1 = ref8 = ndim - 1; ref8 <= 0 ? s1 <= 0 : s1 >= 0; j = ref8 <= 0 ? ++s1 : --s1) {\n        if (++ai[j] < an[j]) {\n          break;\n        }\n\n        ai[j] = 0;\n      }\n    }\n\n    push(p2);\n    return restore();\n  };\n  /* d =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  f,x\n  \n  General description\n  -------------------\n  Returns the partial derivative of f with respect to x. x can be a vector e.g. [x,y].\n   */\n\n\n  Eval_user_function = function () {\n    var bodyAndFormalArguments, h;\n\n    if (DEBUG) {\n      console.log(\"Eval_user_function evaluating: \" + car(p1));\n    }\n\n    if (car(p1) === symbol(SYMBOL_D) && get_binding(symbol(SYMBOL_D)) === symbol(SYMBOL_D)) {\n      Eval_derivative();\n      return;\n    }\n\n    push(car(p1));\n    Eval();\n    bodyAndFormalArguments = pop();\n\n    if (isNumericAtom(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication.\");\n    } else if (istensor(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found tensor product instead. Use 'dot/inner' explicitly.\");\n    } else if (isstr(bodyAndFormalArguments)) {\n      stop(\"expected function, found string instead.\");\n    }\n\n    p3 = car(cdr(bodyAndFormalArguments));\n    p4 = car(cdr(cdr(bodyAndFormalArguments)));\n    p5 = cdr(p1);\n\n    if (car(bodyAndFormalArguments) !== symbol(FUNCTION) || bodyAndFormalArguments === car(p1)) {\n      h = tos;\n      push(bodyAndFormalArguments);\n      p1 = p5;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        Eval();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      return;\n    }\n\n    p1 = p4;\n    p2 = p5;\n    h = tos;\n\n    while (iscons(p1) && iscons(p2)) {\n      push(car(p1));\n      push(car(p2));\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n\n    list(tos - h);\n    p6 = pop();\n    push(p3);\n\n    if (iscons(p6)) {\n      push(p6);\n      rewrite_args();\n    }\n\n    return Eval();\n  };\n\n  rewrite_args = function () {\n    var h, n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      n = rewrite_args_tensor();\n      restore();\n      return n;\n    }\n\n    if (iscons(p1)) {\n      h = tos;\n\n      if (car(p1) === car(p2)) {\n        push_symbol(EVAL);\n        push(car(cdr(p2)));\n        list(2);\n      } else {\n        push(car(p1));\n      }\n\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        n += rewrite_args();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return n;\n    }\n\n    if (!issymbol(p1)) {\n      push(p1);\n      restore();\n      return 0;\n    }\n\n    p3 = p2;\n\n    while (iscons(p3)) {\n      if (p1 === car(p3)) {\n        push(cadr(p3));\n        restore();\n        return 1;\n      }\n\n      p3 = cddr(p3);\n    }\n\n    p3 = get_binding(p1);\n    push(p3);\n\n    if (p1 !== p3) {\n      push(p2);\n      n = rewrite_args();\n\n      if (n === 0) {\n        pop();\n        push(p1);\n      }\n    }\n\n    restore();\n    return n;\n  };\n\n  rewrite_args_tensor = function () {\n    var i, l1, n, ref2;\n    n = 0;\n    i = 0;\n    push(p1);\n    copy_tensor();\n    p1 = pop();\n\n    for (i = l1 = 0, ref2 = p1.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      n += rewrite_args();\n      p1.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(p1);\n    push(p1);\n    return n;\n  };\n\n  Eval_zero = function () {\n    var i, k, l1, m, m1, n, ref2, ref3;\n    i = 0;\n    k = [];\n    m = 0;\n    n = 0;\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      k[i] = 0;\n    }\n\n    m = 1;\n    n = 0;\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      i = pop_integer();\n\n      if (i < 1 || isNaN(i)) {\n        push(zero);\n        return;\n      }\n\n      m *= i;\n      k[n++] = i;\n      p2 = cdr(p2);\n    }\n\n    if (n === 0) {\n      push(zero);\n      return;\n    }\n\n    p1 = alloc_tensor(m);\n    p1.tensor.ndim = n;\n\n    for (i = m1 = 0, ref3 = n; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p1.tensor.dim[i] = k[i];\n    }\n\n    return push(p1);\n  };\n  /*\n  // up to 100 blocks of 100,000 atoms\n  \n  #define M 100\n  #define N 100000\n  \n  U *mem[M]\n  int mcount\n  \n  U *free_list\n  int free_count\n  \n  U *\n  alloc(void)\n  {\n    U *p\n    if (free_count == 0) {\n      if (mcount == 0)\n        alloc_mem()\n      else {\n        gc()\n        if (free_count < N * mcount / 2)\n          alloc_mem()\n      }\n      if (free_count == 0)\n        stop(\"atom space exhausted\")\n    }\n    p = free_list\n    free_list = free_list->u.cons.cdr\n    free_count--\n    return p\n  }\n   */\n\n\n  allocatedId = 0;\n\n  alloc_tensor = function (nelem) {\n    var i, l1, p, ref2;\n    i = 0;\n    p = new U();\n    p.k = TENSOR;\n    p.tensor = new tensor();\n    p.tensor.nelem = nelem;\n\n    for (i = l1 = 0, ref2 = nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p.tensor.elem[i] = zero;\n    }\n\n    p.tensor.allocatedId = allocatedId;\n    allocatedId++;\n    check_tensor_dimensions(p);\n    return p;\n  };\n  /*\n  // garbage collector\n  \n  void\n  gc(void)\n  {\n    int i, j\n    U *p\n  \n    // tag everything\n  \n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++)\n        p[j].tag = 1\n    }\n  \n    // untag what's used\n  \n    untag(p0)\n    untag(p1)\n    untag(p2)\n    untag(p3)\n    untag(p4)\n    untag(p5)\n    untag(p6)\n    untag(p7)\n    untag(p8)\n    untag(p9)\n  \n    untag(one)\n    untag(zero)\n    untag(imaginaryunit)\n  \n    for (i = 0; i < NSYM; i++) {\n      untag(binding[i])\n      untag(arglist[i])\n    }\n  \n    for (i = 0; i < tos; i++)\n      untag(stack[i])\n  \n    for (i = (int) (frame - stack); i < TOS; i++)\n      untag(stack[i])\n  \n    // collect everything that's still tagged\n  \n    free_count = 0\n  \n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++) {\n        if (p[j].tag == 0)\n          continue\n        // still tagged so it's unused, put on free list\n        switch (p[j].k) {\n        case TENSOR:\n          free(p[j].u.tensor)\n          break\n        case STR:\n          free(p[j].u.str)\n          break\n        case NUM:\n          mfree(p[j].u.q.a)\n          mfree(p[j].u.q.b)\n          break\n        }\n        p[j].k = CONS; // so no double free occurs above\n        p[j].u.cons.cdr = free_list\n        free_list = p + j\n        free_count++\n      }\n    }\n  }\n  \n  void\n  untag(U *p)\n  {\n    int i\n  \n    if (iscons(p)) {\n      do {\n        if (p->tag == 0)\n          return\n        p->tag = 0\n        untag(p->u.cons.car)\n        p = p->u.cons.cdr\n      } while (iscons(p))\n      untag(p)\n      return\n    }\n  \n    if (p->tag) {\n      p->tag = 0\n       if (istensor(p)) {\n        for (i = 0; i < p->u.tensor->nelem; i++)\n          untag(p->u.tensor->elem[i])\n      }\n    }\n  }\n  \n  // get memory for 100,000 atoms\n  \n  void\n  alloc_mem(void)\n  {\n    int i\n    U *p\n    if (mcount == M)\n      return\n    p = (U *) malloc(N * sizeof (struct U))\n    if (p == NULL)\n      return\n    mem[mcount++] = p\n    for (i = 0; i < N; i++) {\n      p[i].k = CONS; // so no free in gc\n      p[i].u.cons.cdr = p + i + 1\n    }\n    p[N - 1].u.cons.cdr = free_list\n    free_list = p\n    free_count += N\n  }\n  \n  void\n  print_mem_info(void)\n  {\n    char buf[100]\n  \n    sprintf(buf, \"%d blocks (%d bytes/block)\\n\", N * mcount, (int) sizeof (U))\n    printstr(buf)\n  \n    sprintf(buf, \"%d free\\n\", free_count)\n    printstr(buf)\n  \n    sprintf(buf, \"%d used\\n\", N * mcount - free_count)\n    printstr(buf)\n  }\n   */\n\n\n  Find = function (p, q) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (equal(p, q)) {\n      return 1;\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (Find(p.tensor.elem[i], q)) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (Find(car(p), q)) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  findPossibleClockForm = function (p) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (isimaginaryunit(p)) {\n      return 0;\n    }\n\n    if (car(p) === symbol(POWER) && !isinteger(caddr(p1))) {\n      if (Find(cadr(p), imaginaryunit)) {\n        return 1;\n      }\n    }\n\n    if (car(p) === symbol(POWER) && equaln(cadr(p), -1) && !isinteger(caddr(p1))) {\n      return 1;\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleClockForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (findPossibleClockForm(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  findPossibleExponentialForm = function (p) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (car(p) === symbol(POWER) && cadr(p) === symbol(E)) {\n      return Find(caddr(p), imaginaryunit);\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleExponentialForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (findPossibleExponentialForm(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  $.Find = Find;\n\n  init = function () {\n    var i, l1, ref2;\n    i = 0;\n    flag = 0;\n    reset_after_error();\n    chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n\n    if (flag) {\n      return;\n    }\n\n    flag = 1;\n\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      isSymbolReclaimable[i] = false;\n    }\n\n    return defn();\n  };\n  /* cross =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n  \n  Parameters\n  ----------\n  u,v\n  \n  General description\n  -------------------\n  Returns the cross product of vectors u and v.\n   */\n\n  /* curl =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n  \n  Parameters\n  ----------\n  u\n  \n  General description\n  -------------------\n  Returns the curl of vector u.\n   */\n\n\n  defn_str = [\"version=\\\"\" + version + \"\\\"\", \"e=exp(1)\", \"i=sqrt(-1)\", \"autoexpand=1\", \"assumeRealVariables=1\", \"trange=[-pi,pi]\", \"xrange=[-10,10]\", \"yrange=[-10,10]\", \"last=0\", \"trace=0\", \"forceFixedPrintout=1\", \"maxFixedPrintoutDigits=6\", \"printLeaveEAlone=1\", \"printLeaveXAlone=0\", \"cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]\", \"curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]\", \"div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)\", \"ln(x)=log(x)\"];\n\n  defn = function () {\n    var definitionOfInterest, defn_i, l1, originalCodeGen, ref2;\n    p0 = symbol(NIL);\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    p3 = symbol(NIL);\n    p4 = symbol(NIL);\n    p5 = symbol(NIL);\n    p6 = symbol(NIL);\n    p7 = symbol(NIL);\n    p8 = symbol(NIL);\n    p9 = symbol(NIL);\n    std_symbol(\"abs\", ABS);\n    std_symbol(\"add\", ADD);\n    std_symbol(\"adj\", ADJ);\n    std_symbol(\"and\", AND);\n    std_symbol(\"approxratio\", APPROXRATIO);\n    std_symbol(\"arccos\", ARCCOS);\n    std_symbol(\"arccosh\", ARCCOSH);\n    std_symbol(\"arcsin\", ARCSIN);\n    std_symbol(\"arcsinh\", ARCSINH);\n    std_symbol(\"arctan\", ARCTAN);\n    std_symbol(\"arctanh\", ARCTANH);\n    std_symbol(\"arg\", ARG);\n    std_symbol(\"atomize\", ATOMIZE);\n    std_symbol(\"besselj\", BESSELJ);\n    std_symbol(\"bessely\", BESSELY);\n    std_symbol(\"binding\", BINDING);\n    std_symbol(\"binomial\", BINOMIAL);\n    std_symbol(\"ceiling\", CEILING);\n    std_symbol(\"check\", CHECK);\n    std_symbol(\"choose\", CHOOSE);\n    std_symbol(\"circexp\", CIRCEXP);\n    std_symbol(\"clear\", CLEAR);\n    std_symbol(\"clearall\", CLEARALL);\n    std_symbol(\"clearpatterns\", CLEARPATTERNS);\n    std_symbol(\"clock\", CLOCK);\n    std_symbol(\"coeff\", COEFF);\n    std_symbol(\"cofactor\", COFACTOR);\n    std_symbol(\"condense\", CONDENSE);\n    std_symbol(\"conj\", CONJ);\n    std_symbol(\"contract\", CONTRACT);\n    std_symbol(\"cos\", COS);\n    std_symbol(\"cosh\", COSH);\n    std_symbol(\"decomp\", DECOMP);\n    std_symbol(\"defint\", DEFINT);\n    std_symbol(\"deg\", DEGREE);\n    std_symbol(\"denominator\", DENOMINATOR);\n    std_symbol(\"det\", DET);\n    std_symbol(\"derivative\", DERIVATIVE);\n    std_symbol(\"dim\", DIM);\n    std_symbol(\"dirac\", DIRAC);\n    std_symbol(\"divisors\", DIVISORS);\n    std_symbol(\"do\", DO);\n    std_symbol(\"dot\", DOT);\n    std_symbol(\"draw\", DRAW);\n    std_symbol(\"dsolve\", DSOLVE);\n    std_symbol(\"erf\", ERF);\n    std_symbol(\"erfc\", ERFC);\n    std_symbol(\"eigen\", EIGEN);\n    std_symbol(\"eigenval\", EIGENVAL);\n    std_symbol(\"eigenvec\", EIGENVEC);\n    std_symbol(\"eval\", EVAL);\n    std_symbol(\"exp\", EXP);\n    std_symbol(\"expand\", EXPAND);\n    std_symbol(\"expcos\", EXPCOS);\n    std_symbol(\"expsin\", EXPSIN);\n    std_symbol(\"factor\", FACTOR);\n    std_symbol(\"factorial\", FACTORIAL);\n    std_symbol(\"factorpoly\", FACTORPOLY);\n    std_symbol(\"filter\", FILTER);\n    std_symbol(\"float\", FLOATF);\n    std_symbol(\"floor\", FLOOR);\n    std_symbol(\"for\", FOR);\n    std_symbol(\"function\", FUNCTION);\n    std_symbol(\"Gamma\", GAMMA);\n    std_symbol(\"gcd\", GCD);\n    std_symbol(\"hermite\", HERMITE);\n    std_symbol(\"hilbert\", HILBERT);\n    std_symbol(\"imag\", IMAG);\n    std_symbol(\"component\", INDEX);\n    std_symbol(\"inner\", INNER);\n    std_symbol(\"integral\", INTEGRAL);\n    std_symbol(\"inv\", INV);\n    std_symbol(\"invg\", INVG);\n    std_symbol(\"isinteger\", ISINTEGER);\n    std_symbol(\"isprime\", ISPRIME);\n    std_symbol(\"laguerre\", LAGUERRE);\n    std_symbol(\"lcm\", LCM);\n    std_symbol(\"leading\", LEADING);\n    std_symbol(\"legendre\", LEGENDRE);\n    std_symbol(\"log\", LOG);\n    std_symbol(\"lookup\", LOOKUP);\n    std_symbol(\"mod\", MOD);\n    std_symbol(\"multiply\", MULTIPLY);\n    std_symbol(\"not\", NOT);\n    std_symbol(\"nroots\", NROOTS);\n    std_symbol(\"number\", NUMBER);\n    std_symbol(\"numerator\", NUMERATOR);\n    std_symbol(\"operator\", OPERATOR);\n    std_symbol(\"or\", OR);\n    std_symbol(\"outer\", OUTER);\n    std_symbol(\"pattern\", PATTERN);\n    std_symbol(\"patternsinfo\", PATTERNSINFO);\n    std_symbol(\"polar\", POLAR);\n    std_symbol(\"power\", POWER);\n    std_symbol(\"prime\", PRIME);\n    std_symbol(\"print\", PRINT);\n    std_symbol(\"print2dascii\", PRINT2DASCII);\n    std_symbol(\"printcomputer\", PRINTFULL);\n    std_symbol(\"printlatex\", PRINTLATEX);\n    std_symbol(\"printlist\", PRINTLIST);\n    std_symbol(\"printhuman\", PRINTPLAIN);\n    std_symbol(\"printLeaveEAlone\", PRINT_LEAVE_E_ALONE);\n    std_symbol(\"printLeaveXAlone\", PRINT_LEAVE_X_ALONE);\n    std_symbol(\"product\", PRODUCT);\n    std_symbol(\"quote\", QUOTE);\n    std_symbol(\"quotient\", QUOTIENT);\n    std_symbol(\"rank\", RANK);\n    std_symbol(\"rationalize\", RATIONALIZE);\n    std_symbol(\"real\", REAL);\n    std_symbol(\"rect\", YYRECT);\n    std_symbol(\"roots\", ROOTS);\n    std_symbol(\"round\", ROUND);\n    std_symbol(\"equals\", SETQ);\n    std_symbol(\"sgn\", SGN);\n    std_symbol(\"silentpattern\", SILENTPATTERN);\n    std_symbol(\"simplify\", SIMPLIFY);\n    std_symbol(\"sin\", SIN);\n    std_symbol(\"sinh\", SINH);\n    std_symbol(\"shape\", SHAPE);\n    std_symbol(\"sqrt\", SQRT);\n    std_symbol(\"stop\", STOP);\n    std_symbol(\"subst\", SUBST);\n    std_symbol(\"sum\", SUM);\n    std_symbol(\"symbolsinfo\", SYMBOLSINFO);\n    std_symbol(\"tan\", TAN);\n    std_symbol(\"tanh\", TANH);\n    std_symbol(\"taylor\", TAYLOR);\n    std_symbol(\"test\", TEST);\n    std_symbol(\"testeq\", TESTEQ);\n    std_symbol(\"testge\", TESTGE);\n    std_symbol(\"testgt\", TESTGT);\n    std_symbol(\"testle\", TESTLE);\n    std_symbol(\"testlt\", TESTLT);\n    std_symbol(\"transpose\", TRANSPOSE);\n    std_symbol(\"unit\", UNIT);\n    std_symbol(\"zero\", ZERO);\n    std_symbol(\"nil\", NIL);\n    std_symbol(\"autoexpand\", AUTOEXPAND);\n    std_symbol(\"bake\", BAKE);\n    std_symbol(\"assumeRealVariables\", ASSUME_REAL_VARIABLES);\n    std_symbol(\"last\", LAST);\n    std_symbol(\"lastprint\", LAST_PRINT);\n    std_symbol(\"last2dasciiprint\", LAST_2DASCII_PRINT);\n    std_symbol(\"lastfullprint\", LAST_FULL_PRINT);\n    std_symbol(\"lastlatexprint\", LAST_LATEX_PRINT);\n    std_symbol(\"lastlistprint\", LAST_LIST_PRINT);\n    std_symbol(\"lastplainprint\", LAST_PLAIN_PRINT);\n    std_symbol(\"trace\", TRACE);\n    std_symbol(\"forceFixedPrintout\", FORCE_FIXED_PRINTOUT);\n    std_symbol(\"maxFixedPrintoutDigits\", MAX_FIXED_PRINTOUT_DIGITS);\n    std_symbol(\"~\", YYE);\n    std_symbol(\"$DRAWX\", DRAWX);\n    std_symbol(\"$METAA\", METAA);\n    std_symbol(\"$METAB\", METAB);\n    std_symbol(\"$METAX\", METAX);\n    std_symbol(\"$SECRETX\", SECRETX);\n    std_symbol(\"version\", VERSION);\n    std_symbol(\"pi\", PI);\n    std_symbol(\"a\", SYMBOL_A);\n    std_symbol(\"b\", SYMBOL_B);\n    std_symbol(\"c\", SYMBOL_C);\n    std_symbol(\"d\", SYMBOL_D);\n    std_symbol(\"i\", SYMBOL_I);\n    std_symbol(\"j\", SYMBOL_J);\n    std_symbol(\"n\", SYMBOL_N);\n    std_symbol(\"r\", SYMBOL_R);\n    std_symbol(\"s\", SYMBOL_S);\n    std_symbol(\"t\", SYMBOL_T);\n    std_symbol(\"x\", SYMBOL_X);\n    std_symbol(\"y\", SYMBOL_Y);\n    std_symbol(\"z\", SYMBOL_Z);\n    std_symbol(\"I\", SYMBOL_IDENTITY_MATRIX);\n    std_symbol(\"a_\", SYMBOL_A_UNDERSCORE);\n    std_symbol(\"b_\", SYMBOL_B_UNDERSCORE);\n    std_symbol(\"x_\", SYMBOL_X_UNDERSCORE);\n    std_symbol(\"$C1\", C1);\n    std_symbol(\"$C2\", C2);\n    std_symbol(\"$C3\", C3);\n    std_symbol(\"$C4\", C4);\n    std_symbol(\"$C5\", C5);\n    std_symbol(\"$C6\", C6);\n    defineSomeHandyConstants();\n    originalCodeGen = codeGen;\n    codeGen = false;\n\n    for (defn_i = l1 = 0, ref2 = defn_str.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; defn_i = 0 <= ref2 ? ++l1 : --l1) {\n      definitionOfInterest = defn_str[defn_i];\n      scan(definitionOfInterest);\n\n      if (DEBUG) {\n        console.log(\"... evaling \" + definitionOfInterest);\n        console.log(\"top of stack:\");\n        console.log(print_list(stack[tos - 1]));\n      }\n\n      Eval();\n      pop();\n    }\n\n    return codeGen = originalCodeGen;\n  };\n\n  defineSomeHandyConstants = function () {\n    push_integer(0);\n    zero = pop();\n    push_integer(1);\n    one = pop();\n    push_double(1.0);\n    one_as_double = pop();\n    push_symbol(POWER);\n\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n\n    push_integer(-1);\n\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n\n    push_rational(1, 2);\n\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n\n    list(3);\n\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n\n    return imaginaryunit = pop();\n  };\n\n  mcmp = function (a, b) {\n    return a.compare(b);\n  };\n\n  mcmpint = function (a, n) {\n    var b, t;\n    b = bigInt(n);\n    t = mcmp(a, b);\n    return t;\n  };\n\n  strcmp = function (str1, str2) {\n    if (str1 === str2) {\n      return 0;\n    } else if (str1 > str2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  doubleToReasonableString = function (d) {\n    var maxFixedPrintoutDigits, stringRepresentation;\n\n    if (codeGen) {\n      return \"\" + d;\n    }\n\n    if (isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))) {\n      stringRepresentation = \"\" + d;\n\n      if (printMode === PRINTMODE_LATEX) {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"\\\\mathrm{e}{$1}\");\n        } else {\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0\\\\mathrm{e}{$2}\");\n        }\n      } else {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"*10^($1)\");\n        } else {\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0*10^($2)\");\n        }\n      }\n    } else {\n      push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS)));\n      maxFixedPrintoutDigits = pop_integer();\n      stringRepresentation = \"\" + d.toFixed(maxFixedPrintoutDigits);\n      stringRepresentation = stringRepresentation.replace(/(\\.\\d*?[1-9])0+$/gm, \"$1\");\n      stringRepresentation = stringRepresentation.replace(/\\.0+$/gm, \"\");\n\n      if (stringRepresentation.indexOf(\".\") === -1) {\n        stringRepresentation += \".0\";\n      }\n\n      if (parseFloat(stringRepresentation) !== d) {\n        stringRepresentation = d.toFixed(maxFixedPrintoutDigits) + \"...\";\n      }\n    }\n\n    return stringRepresentation;\n  };\n\n  clear_term = function () {};\n\n  isspace = function (s) {\n    if (s == null) {\n      return false;\n    }\n\n    return s === ' ' || s === '\\t' || s === '\\n' || s === '\\v' || s === '\\f' || s === '\\r';\n  };\n\n  isdigit = function (str) {\n    if (str == null) {\n      return false;\n    }\n\n    return /^\\d+$/.test(str);\n  };\n\n  isalpha = function (str) {\n    if (str == null) {\n      return false;\n    }\n\n    return str.search(/[^A-Za-z]/) === -1;\n  };\n\n  isalphaOrUnderscore = function (str) {\n    if (str == null) {\n      return false;\n    }\n\n    return str.search(/[^A-Za-z_]/) === -1;\n  };\n\n  isunderscore = function (str) {\n    if (str == null) {\n      return false;\n    }\n\n    return str.search(/_/) === -1;\n  };\n\n  isalnumorunderscore = function (str) {\n    if (str == null) {\n      return false;\n    }\n\n    return isalphaOrUnderscore(str) || isdigit(str);\n  };\n\n  count = function (p) {\n    var n;\n\n    if (iscons(p)) {\n      n = 0;\n\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n\n    return n;\n  };\n\n  countOccurrencesOfSymbol = function (needle, p) {\n    var n;\n    n = 0;\n\n    if (iscons(p)) {\n      while (iscons(p)) {\n        n += countOccurrencesOfSymbol(needle, car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (equal(needle, p)) {\n        n = 1;\n      }\n    }\n\n    return n;\n  };\n\n  countsize = function (p) {\n    var i, l1, n, ref2;\n    n = 0;\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        n += p.tensor.elem[i];\n      }\n    } else if (iscons(p)) {\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n\n    return n;\n  };\n\n  stop = function (s) {\n    var message;\n    errorMessage += \"Stop: \";\n    errorMessage += s;\n    message = errorMessage;\n    errorMessage = '';\n    moveTos(0);\n    throw new Error(message);\n  };\n\n  findDependenciesInScript = function (stringToBeParsed, dontGenerateCode) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, bodyForReadableSummaryOfGeneratedCode, cyclesDescriptions, deQuotedDep, dependencyInfo, eachDependency, error, generatedBody, generatedCode, i, indexOfEachReplacement, indexOfPartRemainingToBeParsed, inited, key, l1, len, len1, len2, len3, len4, len5, len6, len7, m1, n, n1, newUserSymbol, o1, origPrintMode, originalUserSymbol, parameters, q1, r1, readableSummaryOfGeneratedCode, recursedDependencies, ref2, replacementsFrom, replacementsTo, s1, scriptEvaluation, stringToBeRun, t1, testableString, timeStartFromAlgebra, toBePrinted, u1, userVariablesMentioned, value, variablesWithCycles;\n\n    if (DEBUG) {\n      console.log(\"stringToBeParsed: \" + stringToBeParsed);\n    }\n\n    timeStartFromAlgebra = new Date().getTime();\n    inited = true;\n    codeGen = true;\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    symbolsInExpressionsWithoutAssignments = [];\n    patternHasBeenFound = false;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    n = 0;\n    dependencyInfo = {\n      affectsVariables: [],\n      affectedBy: []\n    };\n    stringToBeRun = stringToBeParsed;\n\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n\n        if (DEBUG) {\n          console.log(\"findDependenciesInScript: scanning\");\n        }\n\n        n = scan(stringToBeParsed.substring(indexOfPartRemainingToBeParsed));\n\n        if (DEBUG) {\n          console.log(\"scanned\");\n        }\n\n        pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n\n        errorMessage = error + \"\";\n        reset_after_error();\n        break;\n      }\n\n      if (n === 0) {\n        break;\n      }\n\n      indexOfPartRemainingToBeParsed += n;\n    }\n\n    testableString = \"\";\n\n    if (DEBUG) {\n      console.log(\"all local dependencies ----------------\");\n    }\n\n    testableString += \"All local dependencies: \";\n\n    for (key in symbolsDependencies) {\n      value = symbolsDependencies[key];\n\n      if (DEBUG) {\n        console.log(\"variable \" + key + \" depends on: \");\n      }\n\n      dependencyInfo.affectsVariables.push(key);\n      testableString += \" variable \" + key + \" depends on: \";\n\n      for (l1 = 0, len = value.length; l1 < len; l1++) {\n        i = value[l1];\n\n        if (DEBUG) {\n          console.log(\"    \" + i);\n        }\n\n        if (i[0] !== \"'\") {\n          dependencyInfo.affectedBy.push(i);\n        }\n\n        testableString += i + \", \";\n      }\n\n      testableString += \"; \";\n    }\n\n    testableString += \". \";\n\n    if (DEBUG) {\n      console.log(\"Symbols with reassignments ----------------\");\n    }\n\n    testableString += \"Symbols with reassignments: \";\n\n    for (m1 = 0, len1 = symbolsHavingReassignments.length; m1 < len1; m1++) {\n      key = symbolsHavingReassignments[m1];\n\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n\n    testableString += \". \";\n\n    if (DEBUG) {\n      console.log(\"Symbols in expressions without assignments ----------------\");\n    }\n\n    testableString += \"Symbols in expressions without assignments: \";\n\n    for (n1 = 0, len2 = symbolsInExpressionsWithoutAssignments.length; n1 < len2; n1++) {\n      key = symbolsInExpressionsWithoutAssignments[n1];\n\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n\n    testableString += \". \";\n    dependencyInfo.affectedBy.push(\"PATTERN_DEPENDENCY\");\n\n    if (patternHasBeenFound) {\n      dependencyInfo.affectsVariables.push(\"PATTERN_DEPENDENCY\");\n      testableString += \" - PATTERN_DEPENDENCY inserted - \";\n    }\n\n    if (DEBUG) {\n      console.log(\"All dependencies recursively ----------------\");\n    }\n\n    testableString += \"All dependencies recursively: \";\n    scriptEvaluation = [\"\", \"\"];\n    generatedCode = \"\";\n    readableSummaryOfGeneratedCode = \"\";\n\n    if (errorMessage === \"\" && !dontGenerateCode) {\n      try {\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n        scriptEvaluation = run(stringToBeParsed, true);\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n\n        errorMessage = error + \"\";\n        init();\n      }\n\n      if (errorMessage === \"\") {\n        for (key in symbolsDependencies) {\n          codeGen = true;\n\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n\n          codeGen = false;\n\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" depends on: \");\n          }\n\n          testableString += \" variable \" + key + \" depends on: \";\n          recursedDependencies = [];\n          variablesWithCycles = [];\n          cyclesDescriptions = [];\n          recursiveDependencies(key, recursedDependencies, [], variablesWithCycles, [], cyclesDescriptions);\n\n          for (o1 = 0, len3 = variablesWithCycles.length; o1 < len3; o1++) {\n            i = variablesWithCycles[o1];\n\n            if (DEBUG) {\n              console.log(\"    --> cycle through \" + i);\n            }\n          }\n\n          for (q1 = 0, len4 = recursedDependencies.length; q1 < len4; q1++) {\n            i = recursedDependencies[q1];\n\n            if (DEBUG) {\n              console.log(\"    \" + i);\n            }\n\n            testableString += i + \", \";\n          }\n\n          testableString += \"; \";\n\n          for (r1 = 0, len5 = cyclesDescriptions.length; r1 < len5; r1++) {\n            i = cyclesDescriptions[r1];\n            testableString += \" \" + i + \", \";\n          }\n\n          if (DEBUG) {\n            console.log(\"  code generation:\" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n\n          push(get_binding(usr_symbol(key)));\n          replacementsFrom = [];\n          replacementsTo = [];\n\n          for (s1 = 0, len6 = recursedDependencies.length; s1 < len6; s1++) {\n            eachDependency = recursedDependencies[s1];\n\n            if (eachDependency[0] === \"'\") {\n              deQuotedDep = eachDependency.substring(1);\n              originalUserSymbol = usr_symbol(deQuotedDep);\n              newUserSymbol = usr_symbol(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\" + deQuotedDep);\n              replacementsFrom.push(originalUserSymbol);\n              replacementsTo.push(newUserSymbol);\n              push(originalUserSymbol);\n              push(newUserSymbol);\n              subst();\n\n              if (DEBUG) {\n                console.log(\"after substitution: \" + stack[tos - 1]);\n              }\n            }\n          }\n\n          try {\n            simplifyForCodeGeneration();\n          } catch (error1) {\n            error = error1;\n\n            if (PRINTOUTRESULT) {\n              console.log(error);\n            }\n\n            errorMessage = error + \"\";\n            init();\n          }\n\n          for (indexOfEachReplacement = t1 = 0, ref2 = replacementsFrom.length; 0 <= ref2 ? t1 < ref2 : t1 > ref2; indexOfEachReplacement = 0 <= ref2 ? ++t1 : --t1) {\n            push(replacementsTo[indexOfEachReplacement]);\n            push(replacementsFrom[indexOfEachReplacement]);\n            subst();\n          }\n\n          clearRenamedVariablesToAvoidBindingToExternalScope();\n\n          if (errorMessage === \"\") {\n            toBePrinted = pop();\n            userVariablesMentioned = [];\n            collectUserSymbols(toBePrinted, userVariablesMentioned);\n            allReturnedPlainStrings = \"\";\n            allReturnedLatexStrings = \"\";\n            codeGen = true;\n            generatedBody = toBePrinted.toString();\n            codeGen = false;\n            origPrintMode = printMode;\n            printMode = PRINTMODE_LATEX;\n            bodyForReadableSummaryOfGeneratedCode = toBePrinted.toString();\n            printMode = origPrintMode;\n\n            if (variablesWithCycles.indexOf(key) !== -1) {\n              generatedCode += \"// \" + key + \" is part of a cyclic dependency, no code generated.\";\n              readableSummaryOfGeneratedCode += \"#\" + key + \" is part of a cyclic dependency, no code generated.\";\n            } else {\n              /*\n               * using this paragraph instead of the following one\n               * creates methods signatures that\n               * are slightly less efficient\n               * i.e. variables compare even if they are\n               * simplified away.\n               * In theory these signatures are more stable, but\n               * in practice signatures vary quite a bit anyways\n               * depending on previous assignments for example,\n               * so it's unclear whether going for stability\n               * is sensible at all..\n              if recursedDependencies.length != 0\n                parameters = \"(\"\n                for i in recursedDependencies\n                  if i.indexOf(\"'\") != 0\n                    parameters += i + \", \"\n                  else\n                    if recursedDependencies.indexOf(i.substring(1)) == -1\n                      parameters += i.substring(1) + \", \"\n               */\n              userVariablesMentioned = userVariablesMentioned.filter(function (x) {\n                return predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(x + \"\") === -1;\n              });\n              userVariablesMentioned = userVariablesMentioned.filter(function (x) {\n                return recursedDependencies.indexOf(x + \"\") !== -1 || recursedDependencies.indexOf(\"\\'\" + x + \"\") !== -1;\n              });\n\n              if (userVariablesMentioned.length !== 0) {\n                parameters = \"(\";\n\n                for (u1 = 0, len7 = userVariablesMentioned.length; u1 < len7; u1++) {\n                  i = userVariablesMentioned[u1];\n\n                  if (i.printname !== key) {\n                    parameters += i.printname + \", \";\n                  }\n                }\n\n                parameters = parameters.replace(/, $/gm, \"\");\n                parameters += \")\";\n                generatedCode += key + \" = function \" + parameters + \" { return ( \" + generatedBody + \" ); }\";\n                readableSummaryOfGeneratedCode += key + parameters + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              } else {\n                generatedCode += key + \" = \" + generatedBody + \";\";\n                readableSummaryOfGeneratedCode += key + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              }\n            }\n\n            generatedCode += \"\\n\";\n            readableSummaryOfGeneratedCode += \"\\n\";\n\n            if (DEBUG) {\n              console.log(\"    \" + generatedCode);\n            }\n          }\n        }\n      }\n    }\n\n    generatedCode = generatedCode.replace(/\\n$/gm, \"\");\n    readableSummaryOfGeneratedCode = readableSummaryOfGeneratedCode.replace(/\\n$/gm, \"\");\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    patternHasBeenFound = false;\n    symbolsInExpressionsWithoutAssignments = [];\n\n    if (DEBUG) {\n      console.log(\"testable string: \" + testableString);\n    }\n\n    if (TIMING_DEBUGS) {\n      console.log(\"findDependenciesInScript time for: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStartFromAlgebra) + \"ms\");\n    }\n\n    return [testableString, scriptEvaluation[0], generatedCode, readableSummaryOfGeneratedCode, scriptEvaluation[1], errorMessage, dependencyInfo];\n  };\n\n  recursiveDependencies = function (variableToBeChecked, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions) {\n    var cyclesDescription, i, k, l1, len, len1, m1, ref2;\n    variablesAlreadyFleshedOut.push(variableToBeChecked);\n\n    if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]] != null) {\n      if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]].indexOf(\"'\" + variableToBeChecked) !== -1) {\n        if (DEBUG) {\n          console.log(\"can't keep following the chain of \" + variableToBeChecked + \" because it's actually a variable bound to a parameter\");\n        }\n\n        if (arrayWhereDependenciesWillBeAdded.indexOf(\"'\" + variableToBeChecked) === -1 && arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n          arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n        }\n\n        return arrayWhereDependenciesWillBeAdded;\n      }\n    }\n\n    chainBeingChecked.push(variableToBeChecked);\n\n    if (symbolsDependencies[variableToBeChecked] == null) {\n      if (arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n        arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n      }\n\n      return arrayWhereDependenciesWillBeAdded;\n    } else {\n      ref2 = symbolsDependencies[variableToBeChecked];\n\n      for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n        i = ref2[l1];\n\n        if (chainBeingChecked.indexOf(i) !== -1) {\n          if (DEBUG) {\n            console.log(\"  found cycle:\");\n          }\n\n          cyclesDescription = \"\";\n\n          for (m1 = 0, len1 = chainBeingChecked.length; m1 < len1; m1++) {\n            k = chainBeingChecked[m1];\n\n            if (variablesWithCycles.indexOf(k) === -1) {\n              variablesWithCycles.push(k);\n            }\n\n            if (DEBUG) {\n              console.log(k + \" --> \");\n            }\n\n            cyclesDescription += k + \" --> \";\n          }\n\n          if (DEBUG) {\n            console.log(\" ... then \" + i + \" again\");\n          }\n\n          cyclesDescription += \" ... then \" + i + \" again\";\n          cyclesDescriptions.push(cyclesDescription);\n\n          if (variablesWithCycles.indexOf(i) === -1) {\n            variablesWithCycles.push(i);\n          }\n        } else {\n          recursiveDependencies(i, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions);\n          chainBeingChecked.pop();\n        }\n      }\n\n      return arrayWhereDependenciesWillBeAdded;\n    }\n  };\n\n  inited = false;\n  latexErrorSign = \"\\\\rlap{\\\\large\\\\color{red}\\\\bigtriangleup}{\\\\ \\\\ \\\\tiny\\\\color{red}!}\";\n\n  turnErrorMessageToLatex = function (theErrorMessage) {\n    theErrorMessage = theErrorMessage.replace(/\\n/g, \"\");\n    theErrorMessage = theErrorMessage.replace(/_/g, \"} \\\\_ \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(transpose_unicode), 'g'), \"}{}^{T}\\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(dotprod_unicode), 'g'), \"}\\\\cdot \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"Stop:\", \"}  \\\\quad \\\\text{Stop:\");\n    theErrorMessage = theErrorMessage.replace(\"->\", \"}  \\\\rightarrow \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"?\", \"}\\\\enspace \" + latexErrorSign + \" \\\\enspace  \\\\text{\");\n    theErrorMessage = \"$$\\\\text{\" + theErrorMessage.replace(/\\n/g, \"\") + \"}$$\";\n    return theErrorMessage;\n  };\n\n  normaliseDots = function (stringToNormalise) {\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8901), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8226), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(12539), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(55296), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(65381), 'g'), String.fromCharCode(dotprod_unicode));\n    return stringToNormalise;\n  };\n\n  TIMING_DEBUGS = false;\n\n  run = function (stringToBeRun, generateLatex) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, collectedLatexResult, collectedPlainResult, error, errorWhileExecution, i, indexOfPartRemainingToBeParsed, n, stringToBeReturned, theErrorMessage, timeStart, timingDebugWrite;\n\n    if (generateLatex == null) {\n      generateLatex = false;\n    }\n\n    timeStart = new Date().getTime();\n    stringToBeRun = normaliseDots(stringToBeRun);\n\n    if (stringToBeRun === \"selftest\") {\n      selftest();\n      return;\n    }\n\n    if (!inited) {\n      inited = true;\n      init();\n    }\n\n    i = 0;\n    n = 0;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n        n = scan(stringToBeRun.substring(indexOfPartRemainingToBeParsed));\n        p1 = pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n\n        allReturnedPlainStrings += error.message;\n\n        if (generateLatex) {\n          theErrorMessage = turnErrorMessageToLatex(error.message);\n          allReturnedLatexStrings += theErrorMessage;\n        }\n\n        reset_after_error();\n        break;\n      }\n\n      if (n === 0) {\n        break;\n      }\n\n      indexOfPartRemainingToBeParsed += n;\n      push(p1);\n      errorWhileExecution = false;\n\n      try {\n        stringsEmittedByUserPrintouts = \"\";\n        top_level_eval();\n        p2 = pop();\n        check_stack();\n\n        if (isstr(p2)) {\n          if (DEBUG) {\n            console.log(p2.str);\n          }\n\n          if (DEBUG) {\n            console.log(\"\\n\");\n          }\n        }\n\n        if (p2 === symbol(NIL)) {\n          collectedPlainResult = stringsEmittedByUserPrintouts;\n\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + stringsEmittedByUserPrintouts + \"$$\";\n          }\n        } else {\n          collectedPlainResult = print_expr(p2);\n          collectedPlainResult += \"\\n\";\n\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + collectLatexStringFromReturnValue(p2) + \"$$\";\n\n            if (DEBUG) {\n              console.log(\"collectedLatexResult: \" + collectedLatexResult);\n            }\n          }\n        }\n\n        allReturnedPlainStrings += collectedPlainResult;\n\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n        }\n\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"printline\");\n          }\n\n          if (DEBUG) {\n            console.log(collectedPlainResult);\n          }\n        }\n\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"display:\");\n          }\n\n          print2dascii(p2);\n        }\n\n        if (generateLatex) {\n          allReturnedLatexStrings += \"\\n\";\n        }\n      } catch (error1) {\n        error = error1;\n        errorWhileExecution = true;\n        collectedPlainResult = error.message;\n\n        if (generateLatex) {\n          collectedLatexResult = turnErrorMessageToLatex(error.message);\n        }\n\n        if (PRINTOUTRESULT) {\n          console.log(collectedPlainResult);\n        }\n\n        allReturnedPlainStrings += collectedPlainResult;\n\n        if (collectedPlainResult !== \"\") {\n          allReturnedPlainStrings += \"\\n\";\n        }\n\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n          allReturnedLatexStrings += \"\\n\";\n        }\n\n        init();\n      }\n    }\n\n    if (allReturnedPlainStrings[allReturnedPlainStrings.length - 1] === \"\\n\") {\n      allReturnedPlainStrings = allReturnedPlainStrings.substring(0, allReturnedPlainStrings.length - 1);\n    }\n\n    if (generateLatex) {\n      if (allReturnedLatexStrings[allReturnedLatexStrings.length - 1] === \"\\n\") {\n        allReturnedLatexStrings = allReturnedLatexStrings.substring(0, allReturnedLatexStrings.length - 1);\n      }\n    }\n\n    if (generateLatex) {\n      if (DEBUG) {\n        console.log(\"allReturnedLatexStrings: \" + allReturnedLatexStrings);\n      }\n\n      stringToBeReturned = [allReturnedPlainStrings, allReturnedLatexStrings];\n    } else {\n      stringToBeReturned = allReturnedPlainStrings;\n    }\n\n    if (TIMING_DEBUGS) {\n      timingDebugWrite = \"run time on: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStart) + \"ms\";\n      console.log(timingDebugWrite);\n    }\n\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    return stringToBeReturned;\n  };\n\n  check_stack = function () {\n    if (tos !== 0) {\n      debugger;\n      stop(\"stack error\");\n    }\n\n    if (frame !== TOS) {\n      debugger;\n      stop(\"frame error\");\n    }\n\n    if (chainOfUserSymbolsNotFunctionsBeingEvaluated.length !== 0) {\n      debugger;\n      stop(\"symbols evaluation still ongoing?\");\n    }\n\n    if (evaluatingAsFloats !== 0) {\n      debugger;\n      stop(\"numeric evaluation still ongoing?\");\n    }\n\n    if (evaluatingPolar !== 0) {\n      debugger;\n      return stop(\"evaluation of polar still ongoing?\");\n    }\n  };\n\n  top_level_eval = function () {\n    var evalledArgument, originalArgument, shouldAutoexpand;\n\n    if (DEBUG) {\n      console.log(\"#### top level eval\");\n    }\n\n    trigmode = 0;\n    shouldAutoexpand = symbol(AUTOEXPAND);\n\n    if (isZeroAtomOrTensor(get_binding(shouldAutoexpand))) {\n      expanding = 0;\n    } else {\n      expanding = 1;\n    }\n\n    originalArgument = top();\n    Eval();\n    evalledArgument = top();\n\n    if (evalledArgument === symbol(NIL)) {\n      return;\n    }\n\n    set_binding(symbol(LAST), evalledArgument);\n\n    if (!isZeroAtomOrTensor(get_binding(symbol(BAKE)))) {\n      bake();\n      evalledArgument = top();\n    }\n\n    if ((originalArgument === symbol(SYMBOL_I) || originalArgument === symbol(SYMBOL_J)) && isimaginaryunit(evalledArgument)) {} else if (isimaginaryunit(get_binding(symbol(SYMBOL_J)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_J);\n      return subst();\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_I)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_I);\n      return subst();\n    }\n  };\n\n  check_esc_flag = function () {\n    if (esc_flag) {\n      return stop(\"esc key\");\n    }\n  };\n\n  clearAlgebraEnvironment = function () {\n    return do_clearall();\n  };\n\n  computeDependenciesFromAlgebra = function (codeFromAlgebraBlock) {\n    var i, keepState, l1, len, len1, m1, originalcodeFromAlgebraBlock, userSimplificationsInProgramForm;\n\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra!!!\");\n    }\n\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra: patterns in the list --------------- \");\n\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n\n      console.log(\"...end of list --------------- \");\n    }\n\n    called_from_Algebra_block = false;\n    return findDependenciesInScript(codeFromAlgebraBlock, true)[6];\n  };\n\n  computeResultsAndJavaScriptFromAlgebra = function (codeFromAlgebraBlock) {\n    var code, dependencyInfo, i, keepState, l1, latexResult, len, len1, m1, originalcodeFromAlgebraBlock, readableSummaryOfCode, ref2, result, stringToBeRun, testableStringIsIgnoredHere, timeStartFromAlgebra, userSimplificationsInProgramForm;\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    timeStartFromAlgebra = new Date().getTime();\n\n    if (TIMING_DEBUGS) {\n      console.log(\" --------- computeResultsAndJavaScriptFromAlgebra input: \" + codeFromAlgebraBlock + \" at: \" + new Date());\n    }\n\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    stringToBeRun = codeFromAlgebraBlock;\n\n    if (DEBUG) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- \");\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n\n      console.log(\"...end of list --------------- \");\n    }\n\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n\n    ref2 = findDependenciesInScript(codeFromAlgebraBlock), testableStringIsIgnoredHere = ref2[0], result = ref2[1], code = ref2[2], readableSummaryOfCode = ref2[3], latexResult = ref2[4], errorMessage = ref2[5], dependencyInfo = ref2[6];\n    called_from_Algebra_block = false;\n\n    if (readableSummaryOfCode !== \"\" || errorMessage !== \"\") {\n      result += \"\\n\" + readableSummaryOfCode;\n\n      if (errorMessage !== \"\") {\n        result += \"\\n\" + errorMessage;\n      }\n\n      result = result.replace(/\\n/g, \"\\n\\n\");\n      latexResult += \"\\n\" + \"$$\" + readableSummaryOfCode + \"$$\";\n\n      if (errorMessage !== \"\") {\n        latexResult += turnErrorMessageToLatex(errorMessage);\n      }\n\n      latexResult = latexResult.replace(/\\n/g, \"\\n\\n\");\n    }\n\n    latexResult = latexResult.replace(/\\n*/, \"\");\n    latexResult = latexResult.replace(/\\$\\$\\$\\$\\n*/g, \"\");\n    code = code.replace(/Math\\./g, \"\");\n    code = code.replace(/\\n/g, \"\\n\\n\");\n\n    if (TIMING_DEBUGS) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStartFromAlgebra) + \"ms\");\n    }\n\n    return {\n      code: code,\n      result: latexResult,\n      latexResult: latexResult,\n      dependencyInfo: dependencyInfo\n    };\n  };\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).run = run;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).findDependenciesInScript = findDependenciesInScript;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeDependenciesFromAlgebra = computeDependenciesFromAlgebra;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeResultsAndJavaScriptFromAlgebra = computeResultsAndJavaScriptFromAlgebra;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).clearAlgebraEnvironment = clearAlgebraEnvironment;\n  tos = 0;\n  nil_symbols = 0;\n\n  push = function (p) {\n    if (p == null) {\n      debugger;\n    }\n\n    if (p.isZero != null) {\n      debugger;\n    }\n\n    if (p === symbol(NIL)) {\n      nil_symbols++;\n\n      if (DEBUG) {\n        console.log(\"pushing symbol(NIL) #\" + nil_symbols);\n      }\n    }\n\n    if (tos >= frame) {\n      stop(\"stack overflow\");\n    }\n\n    return stack[tos++] = p;\n  };\n\n  moveTos = function (stackPos) {\n    if (tos <= stackPos) {\n      tos = stackPos;\n      return;\n    }\n\n    while (tos > stackPos) {\n      stack[tos] = null;\n      tos--;\n    }\n  };\n\n  top = function () {\n    return stack[tos - 1];\n  };\n\n  pop = function () {\n    var elementToBeReturned;\n\n    if (tos === 0) {\n      debugger;\n      stop(\"stack underflow\");\n    }\n\n    if (stack[tos - 1] == null) {\n      debugger;\n    }\n\n    elementToBeReturned = stack[--tos];\n    stack[tos] = null;\n    return elementToBeReturned;\n  };\n\n  push_frame = function (n) {\n    var i, l1, ref2, results;\n    i = 0;\n    frame -= n;\n\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n\n    results = [];\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      results.push(stack[frame + i] = symbol(NIL));\n    }\n\n    return results;\n  };\n\n  pop_frame = function (n) {\n    frame += n;\n\n    if (frame > TOS) {\n      return stop(\"frame underflow\");\n    }\n  };\n\n  save = function () {\n    frame -= 10;\n\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n\n    stack[frame + 0] = p0;\n    stack[frame + 1] = p1;\n    stack[frame + 2] = p2;\n    stack[frame + 3] = p3;\n    stack[frame + 4] = p4;\n    stack[frame + 5] = p5;\n    stack[frame + 6] = p6;\n    stack[frame + 7] = p7;\n    stack[frame + 8] = p8;\n    return stack[frame + 9] = p9;\n  };\n\n  restore = function () {\n    if (frame > TOS - 10) {\n      stop(\"frame underflow\");\n    }\n\n    p0 = stack[frame + 0];\n    p1 = stack[frame + 1];\n    p2 = stack[frame + 2];\n    p3 = stack[frame + 3];\n    p4 = stack[frame + 4];\n    p5 = stack[frame + 5];\n    p6 = stack[frame + 6];\n    p7 = stack[frame + 7];\n    p8 = stack[frame + 8];\n    p9 = stack[frame + 9];\n    return frame += 10;\n  };\n\n  swap = function () {\n    var p, q;\n    p = pop();\n    q = pop();\n    push(p);\n    return push(q);\n  };\n\n  dupl = function () {\n    var p;\n    p = pop();\n    push(p);\n    return push(p);\n  };\n\n  $.dupl = dupl;\n  $.swap = swap;\n  $.restore = restore;\n  $.save = save;\n  $.push = push;\n  $.pop = pop;\n\n  Eval_symbolsinfo = function () {\n    var symbolsinfoToBePrinted;\n    symbolsinfoToBePrinted = symbolsinfo();\n\n    if (symbolsinfoToBePrinted !== \"\") {\n      return new_string(symbolsinfoToBePrinted);\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  symbolsinfo = function () {\n    var bindingi, i, l1, ref2, ref3, symbolsinfoToBePrinted, symtabi;\n    symbolsinfoToBePrinted = \"\";\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtabi = symtab[i] + \"\";\n      bindingi = (binding[i] + \"\").substring(0, 4);\n      symbolsinfoToBePrinted += \"symbol: \" + symtabi + \" size: \" + countsize(binding[i]) + \" value: \" + bindingi + \"...\\n\";\n    }\n\n    return symbolsinfoToBePrinted;\n  };\n\n  std_symbol = function (s, n, latexPrint) {\n    var p;\n    p = symtab[n];\n\n    if (p == null) {\n      debugger;\n    }\n\n    p.printname = s;\n\n    if (latexPrint != null) {\n      return p.latexPrint = latexPrint;\n    } else {\n      return p.latexPrint = s;\n    }\n  };\n\n  usr_symbol = function (s) {\n    var i, l1, ref2;\n    i = 0;\n\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (s === symtab[i].printname) {\n        return symtab[i];\n      }\n\n      if (symtab[i].printname === \"\") {\n        break;\n      }\n    }\n\n    if (i === NSYM) {\n      stop(\"symbol table overflow\");\n    }\n\n    symtab[i] = new U();\n    symtab[i].k = SYM;\n    symtab[i].printname = s;\n    binding[i] = symtab[i];\n    isSymbolReclaimable[i] = false;\n    return symtab[i];\n  };\n\n  get_printname = function (p) {\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    return p.printname;\n  };\n\n  set_binding = function (p, q) {\n    var indexFound;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n     */\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> set_binding lookup \" + indexFound);\n    }\n\n    isSymbolReclaimable[indexFound] = false;\n    return binding[indexFound] = q;\n  };\n\n  get_binding = function (p) {\n    var indexFound;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n     */\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> get_binding lookup \" + indexFound);\n    }\n\n    return binding[indexFound];\n  };\n\n  is_usr_symbol = function (p) {\n    var theSymnum;\n\n    if (p.k !== SYM) {\n      return false;\n    }\n\n    theSymnum = symnum(p);\n\n    if (theSymnum > PI && theSymnum !== SYMBOL_I && theSymnum !== SYMBOL_IDENTITY_MATRIX) {\n      return true;\n    }\n\n    return false;\n  };\n\n  lookupsTotal = 0;\n\n  symnum = function (p) {\n    var indexFound;\n    lookupsTotal++;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    indexFound = symtab.indexOf(p);\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> symnum lookup \" + indexFound + \" lookup # \" + lookupsTotal);\n    }\n\n    return indexFound;\n  };\n\n  push_symbol = function (k) {\n    return push(symtab[k]);\n  };\n\n  clear_symbols = function () {\n    var i, l1, ref2, ref3, results;\n    results = [];\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = NSYM; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      results.push(isSymbolReclaimable[i] = false);\n    }\n\n    return results;\n  };\n\n  collectUserSymbols = function (p, accumulator) {\n    var i, l1, ref2;\n\n    if (accumulator == null) {\n      accumulator = [];\n    }\n\n    if (is_usr_symbol(p)) {\n      if (accumulator.indexOf(p) === -1) {\n        accumulator.push(p);\n        return;\n      }\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        collectUserSymbols(p.tensor.elem[i], accumulator);\n      }\n\n      return;\n    }\n\n    while (iscons(p)) {\n      collectUserSymbols(car(p), accumulator);\n      p = cdr(p);\n    }\n  };\n\n  $.get_binding = get_binding;\n  $.set_binding = set_binding;\n  $.usr_symbol = usr_symbol;\n  $.symbolsinfo = symbolsinfo;\n  $.collectUserSymbols = collectUserSymbols;\n\n  if (!inited) {\n    inited = true;\n    init();\n  }\n\n  $.init = init;\n\n  parse_internal = function (argu) {\n    if (typeof argu === 'string') {\n      return scan(argu);\n    } else if (typeof argu === 'number') {\n      if (argu % 1 === 0) {\n        return push_integer(argu);\n      } else {\n        return push_double(argu);\n      }\n    } else if (argu instanceof U) {\n      return push(argu);\n    } else {\n      console.warn('unknown argument type', argu);\n      return push(symbol(NIL));\n    }\n  };\n\n  parse = function (argu) {\n    var data, error;\n\n    try {\n      parse_internal(argu);\n      data = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n\n    return data;\n  };\n\n  exec = function () {\n    var argu, argus, error, fn, l1, len, name, result;\n    name = arguments[0], argus = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    fn = get_binding(usr_symbol(name));\n    check_stack();\n    push(fn);\n\n    for (l1 = 0, len = argus.length; l1 < len; l1++) {\n      argu = argus[l1];\n      parse_internal(argu);\n    }\n\n    list(1 + argus.length);\n    p1 = pop();\n    push(p1);\n\n    try {\n      top_level_eval();\n      result = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n\n    return result;\n  };\n\n  $.exec = exec;\n  $.parse = parse;\n\n  (function () {\n    var builtin_fns, fn, l1, len, results;\n    builtin_fns = [\"abs\", \"add\", \"adj\", \"and\", \"approxratio\", \"arccos\", \"arccosh\", \"arcsin\", \"arcsinh\", \"arctan\", \"arctanh\", \"arg\", \"atomize\", \"besselj\", \"bessely\", \"binding\", \"binomial\", \"ceiling\", \"check\", \"choose\", \"circexp\", \"clear\", \"clearall\", \"clearpatterns\", \"clock\", \"coeff\", \"cofactor\", \"condense\", \"conj\", \"contract\", \"cos\", \"cosh\", \"decomp\", \"defint\", \"deg\", \"denominator\", \"det\", \"derivative\", \"dim\", \"dirac\", \"divisors\", \"do\", \"dot\", \"draw\", \"dsolve\", \"eigen\", \"eigenval\", \"eigenvec\", \"erf\", \"erfc\", \"eval\", \"exp\", \"expand\", \"expcos\", \"expsin\", \"factor\", \"factorial\", \"factorpoly\", \"filter\", \"float\", \"floor\", \"for\", \"Gamma\", \"gcd\", \"hermite\", \"hilbert\", \"imag\", \"component\", \"inner\", \"integral\", \"inv\", \"invg\", \"isinteger\", \"isprime\", \"laguerre\", \"lcm\", \"leading\", \"legendre\", \"log\", \"mod\", \"multiply\", \"not\", \"nroots\", \"number\", \"numerator\", \"operator\", \"or\", \"outer\", \"pattern\", \"patternsinfo\", \"polar\", \"power\", \"prime\", \"print\", \"print2dascii\", \"printcomputer\", \"printlatex\", \"printlist\", \"printhuman\", \"product\", \"quote\", \"quotient\", \"rank\", \"rationalize\", \"real\", \"rect\", \"roots\", \"round\", \"equals\", \"shape\", \"sgn\", \"silentpattern\", \"simplify\", \"sin\", \"sinh\", \"sqrt\", \"stop\", \"subst\", \"sum\", \"symbolsinfo\", \"tan\", \"tanh\", \"taylor\", \"test\", \"testeq\", \"testge\", \"testgt\", \"testle\", \"testlt\", \"transpose\", \"unit\", \"zero\"];\n    results = [];\n\n    for (l1 = 0, len = builtin_fns.length; l1 < len; l1++) {\n      fn = builtin_fns[l1];\n      results.push($[fn] = exec.bind(this, fn));\n    }\n\n    return results;\n  })();\n\n  freeze = function () {\n    var frozenContents, frozenHash, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = [];\n    frozenContents = [];\n    frozenPatterns = [];\n    frozenHash = \"\";\n\n    for (i = l1 = 0, ref2 = symtab.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (isSymbolReclaimable[i] === false) {\n        frozenSymbols.push(symtab[i]);\n        frozenContents.push(binding[i]);\n      }\n    }\n\n    frozenPatterns = userSimplificationsInListForm.slice(0);\n    return [frozenSymbols, frozenContents, frozenPatterns, zero, one, imaginaryunit, getStateHash()];\n  };\n\n  unfreeze = function (frozen) {\n    var frozenContents, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = frozen[0], frozenContents = frozen[1], frozenPatterns = frozen[2], zero = frozen[3], one = frozen[4], imaginaryunit = frozen[5];\n\n    for (i = l1 = 0, ref2 = frozenSymbols.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = frozenSymbols[i];\n      binding[i] = frozenContents[i];\n    }\n\n    return userSimplificationsInListForm = frozenPatterns.slice(0);\n  };\n\n  compareState = function (previousHash) {\n    var frozenHash;\n    frozenHash = getStateHash();\n\n    if (frozenHash === previousHash) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  getStateHash = function () {\n    var bindingi, frozenHash, i, l1, len, m1, ref2, ref3, symtabi;\n    frozenHash = \"\";\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtabi = print_list(symtab[i]);\n      bindingi = print_list(binding[i]);\n      frozenHash += \" //\" + symtabi + \" : \" + bindingi;\n    }\n\n    for (m1 = 0, len = userSimplificationsInListForm.length; m1 < len; m1++) {\n      i = userSimplificationsInListForm[m1];\n      frozenHash += \" pattern: \" + i;\n    }\n\n    if (DEBUG) {\n      console.log(\"frozenHash: \" + frozenHash);\n    }\n\n    return frozenHash;\n  };\n}).call(this);","map":{"version":3,"sources":["C:/Users/HP/Desktop/wed/docker/newmer/node_modules/algebrite/dist/algebrite.js"],"names":["$","ABS","ADD","ADJ","AND","APPROXRATIO","ARCCOS","ARCCOSH","ARCSIN","ARCSINH","ARCTAN","ARCTANH","ARG","ASSUME_REAL_VARIABLES","ATOMIZE","AUTOEXPAND","BAKE","BESSELJ","BESSELY","BINDING","BINOMIAL","BINOM_check_args","BUF","C1","C2","C3","C4","C5","C6","CEILING","CHECK","CHOOSE","CIRCEXP","CLEAR","CLEARALL","CLEARPATTERNS","CLOCK","COEFF","COFACTOR","CONDENSE","CONJ","CONS","CONTRACT","COS","COSH","Condense","DEBUG","DEBUG_ABS","DEBUG_ARG","DEBUG_CLOCKFORM","DEBUG_IMAG","DEBUG_IS","DEBUG_POWER","DEBUG_RECT","DECOMP","DEFINT","DEGREE","DENOMINATOR","DERIVATIVE","DET","DET_check_arg","DIM","DIRAC","DIVISORS","DO","DOT","DOUBLE","DRAW","DRAWX","DSOLVE","E","EIGEN","EIGENVAL","EIGENVEC","EIG_N","EIG_check_arg","EIG_yydd","EIG_yyqq","ERF","ERFC","EVAL","EXP","EXPAND","EXPCOS","EXPSIN","Eval","Eval_Eval","Eval_abs","Eval_add","Eval_adj","Eval_and","Eval_approxratio","Eval_arccos","Eval_arccosh","Eval_arcsin","Eval_arcsinh","Eval_arctan","Eval_arctanh","Eval_arg","Eval_besselj","Eval_bessely","Eval_binding","Eval_binomial","Eval_ceiling","Eval_check","Eval_choose","Eval_circexp","Eval_clear","Eval_clearall","Eval_clearpatterns","Eval_clock","Eval_coeff","Eval_cofactor","Eval_condense","Eval_conj","Eval_cons","Eval_contract","Eval_cos","Eval_cosh","Eval_decomp","Eval_defint","Eval_degree","Eval_denominator","Eval_derivative","Eval_det","Eval_dim","Eval_dirac","Eval_divisors","Eval_do","Eval_dsolve","Eval_eigen","Eval_eigenval","Eval_eigenvec","Eval_erf","Eval_erfc","Eval_exp","Eval_expand","Eval_expcos","Eval_expsin","Eval_factor","Eval_factorial","Eval_factorpoly","Eval_filter","Eval_float","Eval_floor","Eval_for","Eval_function_reference","Eval_gamma","Eval_gcd","Eval_hermite","Eval_hilbert","Eval_imag","Eval_index","Eval_inner","Eval_integral","Eval_inv","Eval_invg","Eval_isinteger","Eval_isprime","Eval_laguerre","Eval_lcm","Eval_leading","Eval_legendre","Eval_log","Eval_lookup","Eval_mod","Eval_multiply","Eval_noexpand","Eval_not","Eval_nroots","Eval_number","Eval_numerator","Eval_operator","Eval_or","Eval_outer","Eval_pattern","Eval_patternsinfo","Eval_polar","Eval_power","Eval_predicate","Eval_prime","Eval_print","Eval_print2dascii","Eval_printcomputer","Eval_printhuman","Eval_printlatex","Eval_printlist","Eval_product","Eval_quote","Eval_quotient","Eval_rank","Eval_rationalize","Eval_real","Eval_rect","Eval_roots","Eval_round","Eval_setq","Eval_sgn","Eval_shape","Eval_silentpattern","Eval_simfac","Eval_simplify","Eval_sin","Eval_sinh","Eval_sqrt","Eval_stop","Eval_subst","Eval_sum","Eval_sym","Eval_symbolsinfo","Eval_tan","Eval_tanh","Eval_taylor","Eval_tensor","Eval_test","Eval_testeq","Eval_testge","Eval_testgt","Eval_testle","Eval_testlt","Eval_transpose","Eval_unit","Eval_user_function","Eval_zero","Evalpoly","FACTOR","FACTORIAL","FACTORPOLY","FILTER","FLOATF","FLOOR","FOR","FORCE_FIXED_PRINTOUT","FUNCTION","Find","GAMMA","GCD","HERMITE","HILBERT","IMAG","INDEX","INNER","INTEGRAL","INV","INVG","INV_check_arg","INV_decomp","ISINTEGER","ISPRIME","LAGUERRE","LAST","LAST_2DASCII_PRINT","LAST_FULL_PRINT","LAST_LATEX_PRINT","LAST_LIST_PRINT","LAST_PLAIN_PRINT","LAST_PRINT","LCM","LEADING","LEGENDRE","LOG","LOOKUP","M","MAXDIM","MAXPRIMETAB","MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES","MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE","MAX_FIXED_PRINTOUT_DIGITS","MAX_PROGRAM_SIZE","MEQUAL","METAA","METAB","METAX","MLENGTH","MOD","MSIGN","MULTIPLY","MZERO","N","NIL","NOT","NROOTS","NROOTS_ABS","NROOTS_DELTA","NROOTS_EPSILON","NROOTS_RANDOM","NROOTS_YMAX","NROOTS_divpoly","NSYM","NUM","NUMBER","NUMERATOR","OPERATOR","OR","OUTER","PATTERN","PATTERNSINFO","PI","POLAR","POWER","PRIME","PRINT","PRINT2DASCII","PRINTFULL","PRINTLATEX","PRINTLIST","PRINTMODE_2DASCII","PRINTMODE_COMPUTER","PRINTMODE_HUMAN","PRINTMODE_LATEX","PRINTMODE_LIST","PRINTOUTRESULT","PRINTPLAIN","PRINT_LEAVE_E_ALONE","PRINT_LEAVE_X_ALONE","PRODUCT","QUOTE","QUOTIENT","RANK","RATIONALIZE","REAL","ROOTS","ROUND","SECRETX","SELFTEST","SETQ","SGN","SHAPE","SILENTPATTERN","SIMPLIFY","SIN","SINH","SPACE_BETWEEN_COLUMNS","SPACE_BETWEEN_ROWS","SQRT","STOP","STR","SUBST","SUM","SYM","SYMBOLSINFO","SYMBOL_A","SYMBOL_A_UNDERSCORE","SYMBOL_B","SYMBOL_B_UNDERSCORE","SYMBOL_C","SYMBOL_D","SYMBOL_I","SYMBOL_IDENTITY_MATRIX","SYMBOL_J","SYMBOL_N","SYMBOL_R","SYMBOL_S","SYMBOL_T","SYMBOL_X","SYMBOL_X_UNDERSCORE","SYMBOL_Y","SYMBOL_Z","TAN","TANH","TAYLOR","TENSOR","TEST","TESTEQ","TESTGE","TESTGT","TESTLE","TESTLT","TIMING_DEBUGS","TOS","TRACE","TRANSPOSE","T_DOUBLE","T_EQ","T_FUNCTION","T_GTEQ","T_INTEGER","T_LTEQ","T_NEQ","T_NEWLINE","T_QUOTASSIGN","T_STRING","T_SYMBOL","U","UNIT","USR_SYMBOLS","VERSION","YMAX","YYE","YYRECT","ZERO","__emit_char","__emit_str","__factor_add","__factorial","__is_negative","__is_radical_number","__lcm","__legendre","__legendre2","__legendre3","__normalize_radical_factors","__rationalize_tensor","_print","abs","absValFloat","absval","absval_tensor","add","addSymbolLeftOfAssignment","addSymbolRightOfAssignment","add_all","add_factor_to_accumulator","add_numbers","add_terms","addf","adj","alloc_tensor","allocatedId","any_denominators","approxAll","approxLogs","approxLogsOfRationals","approxOneRatioOnly","approxRadicals","approxRadicalsOfRationals","approxRationalsOfLogs","approxRationalsOfPowersOfE","approxRationalsOfPowersOfPI","approxRationalsOfRadicals","approxSineOfRationalMultiplesOfPI","approxSineOfRationals","approxTrigonometric","approx_just_an_integer","approx_logarithmsOfRationals","approx_nothingUseful","approx_radicalOfRatio","approx_ratioOfRadical","approx_rationalOfE","approx_rationalOfPi","approx_rationalsOfLogarithms","approx_sine_of_pi_times_rational","approx_sine_of_rational","approxratioRecursive","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","areunivarpolysfactoredorexpandedform","arg","arglist","assignmentFound","avoidCalculatingPowersIntoArctans","bake","bake_poly","bake_poly_term","besselj","bessely","bigInt","bignum_factorial","bignum_float","bignum_power_number","bignum_scan_float","bignum_scan_integer","bignum_truncate","binding","binomial","buffer","build_tensor","caaddr","caadr","caar","cadaddr","cadadr","cadar","caddaddr","caddadr","caddar","caddddr","cadddr","caddr","cadr","called_from_Algebra_block","car","cdaddr","cdadr","cdar","cddaddr","cddar","cdddaddr","cddddr","cdddr","cddr","cdr","ceiling","chainOfUserSymbolsNotFunctionsBeingEvaluated","charTabIndex","chartab","checkFloatHasWorkedOutCompletely","check_esc_flag","check_stack","check_tensor_dimensions","choose","choose_check_args","circexp","clearAlgebraEnvironment","clearRenamedVariablesToAvoidBindingToExternalScope","clear_symbols","clear_term","clearall","clockform","cmpGlyphs","cmp_args","cmp_expr","cmp_terms","cmp_terms_count","codeGen","coeff","cofactor","collectLatexStringFromReturnValue","collectUserSymbols","combine_factors","combine_gammas","combine_terms","compareState","compare_numbers","compare_rationals","compare_tensors","compatible","computeDependenciesFromAlgebra","computeResultsAndJavaScriptFromAlgebra","compute_fa","conjugate","cons","consCount","contract","convert_bignum_to_double","convert_rational_to_double","copy_tensor","cosine","cosine_of_angle","cosine_of_angle_sum","count","countOccurrencesOfSymbol","count_denominators","counter","countsize","d_scalar_scalar","d_scalar_scalar_1","d_scalar_tensor","d_tensor_scalar","d_tensor_tensor","dabs","darccos","darccosh","darcsin","darcsinh","darctan","darctanh","dbesselj0","dbesseljn","dbessely0","dbesselyn","dcos","dcosh","dd","decomp","decomp_product","decomp_sum","defineSomeHandyConstants","define_user_function","defn","defn_str","degree","denominator","derf","derfc","derivative","derivative_of_integral","det","determinant","detg","dfunction","dhermite","dirac","display","display_flag","displaychar","divide","divide_numbers","divisors","divisors_onstack","divpoly","dlog","do_clearPatterns","do_clearall","do_simplify_nested_radicals","dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication","dotprod_unicode","doubleToReasonableString","dpow","dpower","dproduct","draw_flag","draw_stop_return","dsgn","dsin","dsinh","dsum","dtan","dtanh","dupl","eigen","elelmIndex","elem","emit_denominator","emit_denominators","emit_expr","emit_factor","emit_factorial_function","emit_flat_tensor","emit_fraction","emit_function","emit_index_function","emit_multiply","emit_number","emit_numerators","emit_numerical_fraction","emit_power","emit_string","emit_subexpr","emit_symbol","emit_tensor","emit_tensor_inner","emit_term","emit_top_expr","emit_unsigned_expr","emit_x","equal","equaln","equalq","erfc","errorMessage","esc_flag","evaluatingAsFloats","evaluatingPolar","exec","expand","expand_get_A","expand_get_AF","expand_get_B","expand_get_C","expand_get_CF","expand_tensor","expanding","expcos","exponential","expr_level","expsin","f1","f10","f2","f3","f4","f5","f9","f_equals_a","factor","factor_a","factor_again","factor_b","factor_number","factor_small_number","factor_term","factorial","factorpoly","factors","factpoly_expo","fill_buf","filter","filter_main","filter_sum","filter_tensor","findDependenciesInScript","findPossibleClockForm","findPossibleExponentialForm","findroot","fixup_fraction","fixup_power","flag","floatToRatioRoutine","fmt_index","fmt_level","fmt_x","frame","freeze","functionInvokationsScanningStack","gamma","gamma_of_sum","gammaf","gcd","gcd_main","gcd_numbers","gcd_polys","gcd_powers_with_same_base","gcd_product_product","gcd_product_sum","gcd_sum","gcd_sum_product","gcd_sum_sum","gen","getSimpleRoots","getStateHash","get_binding","get_factor_from_complex_root","get_factor_from_real_root","get_innerprod_factors","get_next_token","get_printname","get_size","get_token","getdisplaystr","glyph","gp","guess","hasImaginaryCoeff","hasNegativeRationalExponent","hash_addition","hash_function","hash_multiplication","hash_power","hashcode_values","hashed_itab","hermite","hilbert","i1","imag","imaginaryunit","index_function","init","initNRoots","inited","inner","inner_f","input_str","integral","integral_of_form","integral_of_product","integral_of_sum","inv","inverse","invert_number","invg","isNumberOneOverSomething","isNumericAtom","isNumericAtomOrTensor","isSimpleRoot","isSmall","isSymbolLeftOfAssignment","isSymbolReclaimable","isZeroAtom","isZeroAtomOrTensor","isZeroLikeOrNonZeroLikeOrUndetermined","isZeroTensor","is_denominator","is_factor","is_small_integer","is_square_matrix","is_usr_symbol","isadd","isalnumorunderscore","isalpha","isalphaOrUnderscore","iscomplexnumber","iscomplexnumberdouble","iscons","isdenominator","isdigit","isdouble","iseveninteger","isfactor","isfactorial","isfloating","isfraction","isidentitymatrix","isimaginarynumber","isimaginarynumberdouble","isimaginaryunit","isinnerordot","isinteger","isintegerfactor","isintegerorintegerfloat","isinv","iskeyword","isminusone","isminusoneoversqrttwo","isminusoneovertwo","ismultiply","isnegative","isnegativenumber","isnegativeterm","isnonnegativeinteger","isnpi","isone","isoneover","isoneoversqrttwo","isoneovertwo","isplusone","isplustwo","ispolyexpandedform","ispolyexpandedform_expr","ispolyexpandedform_factor","ispolyexpandedform_term","ispolyfactoredorexpandedform","ispolyfactoredorexpandedform_factor","ispolyfactoredorexpandedform_power","isposint","ispositivenumber","ispower","isquarterturn","isrational","isspace","isstr","issymbol","issymbolic","istensor","istranspose","isunderscore","isunivarpolyfactoredorexpandedform","itab","italu_hashcode","j1","laguerre","laguerre2","lastFoundSymbol","latexErrorSign","lcm","leading","legendre","length","lessp","level","list","listLength","logarithm","logbuf","lookupsTotal","lu_decomp","madd","makePositive","makeSignSameAs","make_hashed_itab","mask","mcmp","mcmpint","mdiv","mdivrem","meta_mode","mgcd","mini_solve","mint","mmod","mmul","mod","monic","move","moveTos","mp_clr_bit","mp_denominator","mp_numerator","mp_set_bit","mpow","mprime","mroot","mshiftright","msub","mtotal","multinomial_sum","multiply","multiply_all","multiply_all_noexpand","multiply_consecutive_constants","multiply_denominators","multiply_denominators_factor","multiply_denominators_term","multiply_noexpand","multiply_numbers","n_factor_number","negate","negate_expand","negate_noexpand","negate_number","new_string","newline_flag","nil_symbols","normaliseDots","normalisedCoeff","normalize_angle","nroots_a","nroots_b","nroots_c","nroots_df","nroots_dx","nroots_fa","nroots_fb","nroots_x","nroots_y","nterms","nthCadr","numerator","numericRootOfPolynomial","o","one","oneElement","one_as_double","out_buf","out_count","out_of_memory","outer","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","parse","parse_internal","parse_p1","parse_p2","parse_time_simplifications","partition","patternHasBeenFound","patternsinfo","peek","performing_roots","polar","polarRectAMinusOneBase","polycoeff","polyform","pop","pop_double","pop_frame","pop_integer","power","power_str","power_sum","power_tensor","predefinedSymbolsInGlobalScope_doNotTrackInDependencies","prime","primetab","print2dascii","printMode","print_ABS_latex","print_ARCCOS_codegen","print_ARCSIN_codegen","print_ARCTAN_codegen","print_BINOMIAL_latex","print_COS_codegen","print_DEFINT_latex","print_DOT_codegen","print_DOT_latex","print_DO_codegen","print_FOR_codegen","print_INV_codegen","print_INV_latex","print_PRODUCT_codegen","print_PRODUCT_latex","print_SETQ_codegen","print_SIN_codegen","print_SQRT_latex","print_SUM_codegen","print_SUM_latex","print_TAN_codegen","print_TESTEQ_latex","print_TESTGE_latex","print_TESTGT_latex","print_TESTLE_latex","print_TESTLT_latex","print_TEST_codegen","print_TEST_latex","print_TRANSPOSE_codegen","print_TRANSPOSE_latex","print_UNIT_codegen","print_a_over_b","print_base","print_base_of_denom","print_char","print_denom","print_double","print_expo_of_denom","print_exponent","print_expr","print_factor","print_factorial_function","print_glyphs","print_index_function","print_list","print_multiply_sign","print_number","print_power","print_str","print_subexpr","print_tensor","print_tensor_inner","print_tensor_inner_latex","print_tensor_latex","print_term","printchar","printchar_nowrap","printline","program_buf","promote_tensor","push","pushTryNotToDuplicate","push_cars","push_double","push_factor","push_frame","push_identity_matrix","push_integer","push_rational","push_symbol","push_term_factors","push_terms","push_zero_matrix","qadd","qdiv","qmul","qpow","qpowf","quickfactor","quickpower","rational","rationalize","rationalize_coefficients","real","reciprocate","rect","recursionLevelNestedRadicalsRemoval","recursiveDependencies","ref","ref1","rememberPrint","remove_negative_exponents","reset_after_error","restore","restoreMetaBindings","rewrite_args","rewrite_args_tensor","roots","roots2","roots3","run","runUserDefinedSimplifications","save","saveMetaBindings","scalar_times_tensor","scan","scan_error","scan_expression","scan_factor","scan_function_call_with_function_name","scan_function_call_without_function_name","scan_index","scan_meta","scan_power","scan_relation","scan_stmt","scan_str","scan_string","scan_subexpr","scan_symbol","scan_tensor","scan_term","scanned","scanningParameters","setM","setSignTo","set_binding","set_component","setq_indexed","sfac_product","sfac_product_f","sgn","shape","show_power_debug","sign","sign_of_term","simfac","simfac_term","simpleComplexityMeasure","simplify","simplifyForCodeGeneration","simplify_1_in_products","simplify_main","simplify_nested_radicals","simplify_polar","simplify_polarRect","simplify_rational_expressions","simplify_rectToClock","simplify_tensor","simplify_trig","simplifyfactorials","sine","sine_of_angle","sine_of_angle_sum","skipRootVariableToBeSolved","sort_stack","square","ssqrt","stack","stackAddsCount","std_symbol","step","step2","stop","strcmp","stringsEmittedByUserPrintouts","subf","subst","subtract","subtract_numbers","swap","symbol","symbolsDependencies","symbolsHavingReassignments","symbolsInExpressionsWithoutAssignments","symbolsLeftOfAssignment","symbolsRightOfAssignment","symbolsinfo","symnum","symtab","take_care_of_nested_radicals","tangent","taylor","tensor","tensor_plus_tensor","tensor_times_scalar","testApprox","test_flag","text_metric","theRandom","token","token_buf","token_str","top","top_level_eval","tos","transform","transpose","transpose_unicode","trigmode","trivial_divide","try_kth_prime","turnErrorMessageToLatex","ucmp","unfreeze","unique","unique_f","update_token_buf","userSimplificationsInListForm","userSimplificationsInStringForm","usr_symbol","verbosing","version","will_be_displayed_as_fraction","ybinomial","ycosh","ydirac","yerf","yerfc","yfloor","yindex","yround","ysinh","yyarg","yybesselj","yybessely","yyceiling","yycondense","yycontract","yycosh","yydegree","yydetg","yydivpoly","yyerf","yyerfc","yyexpand","yyfactorpoly","yyfloat","yyfloor","yyhermite","yyhermite2","yyinvg","yylcm","yylog","yymultiply","yyouter","yypower","yyrationalize","yyround","yysgn","yysimfac","yysinh","yytangent","zero","zzfloat","hasProp","hasOwnProperty","slice","require","prototype","a","b","printname","str","q","d","k","tag","toString","toLatexString","ndim","dim","nelem","results","h","w","n","ascent","descent","width","ceil","i","j","primes","Math","sqrt","x","p","startCount","isPositive","isZero","equals","exports","theArgument","console","trace","log","anyFactorsYet","input","s","subsetOfStack","sort","concat","t","l1","m1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","doNothing","numberOfDigitsAfterTheDot","precision","splitBeforeAndAfterDot","supposedlyTheFloat","theFloat","theRatio","split","pow","decimal","AccuracyFactor","DecimalSign","FractionDenominator","FractionNumerator","PreviousDenominator","ScratchValue","Z","ret","isNaN","floor","bestResultSoFar","complexity","error","hypothesis","len","likelyMultiplier","minimumComplexity","ratio","result","Number","MAX_VALUE","round","len1","approxRadicalsOfRationalsResult","approxRationalsOfRadicalsResult","approxLogsOfRationalsResult","approxRationalsOfLogsResult","approxSineOfRationalMultiplesOfPIResult","approxSineOfRationalsResult","fraction","sin","LOG_EXPLANATIONS","approxLogsResult","approxRadicalsResult","approxRationalsOfPowersOfEResult","approxRationalsOfPowersOfPIResult","approxTrigonometricResult","bestApproxSoFar","constantsSum","constantsSumMin","aResult","c","theSum","Array","i2","i3","j2","j3","k3","l2","l3","len2","len3","len4","len5","len6","len7","m2","m3","n1","n2","o1","o2","originalValue","q1","q2","r1","r2","returned","returnedFraction","returnedValue","s1","s2","t1","t2","u1","u2","v1","v2","value","x1","x2","z1","z2","toFixed","errno","acos","asin","atan","y","z","jn","yn","geq","MIN_SAFE_INTEGER","leq","MAX_SAFE_INTEGER","isNegative","theResult","qsub","ab","ba","minusOne","expo","toJSNumber","quotientAndRemainder","divmod","quotient","remainder","accumulator","buf","scounter","sign_","substring","parseFloat","signed","aAsString","denominatorString","shiftRight","indexOf","indexFound","variableToBeCleared","prev_expanding","row","col","ai","an","l","m","cos","cosh","toBePushed","generalTransform","breakFromOutherWhile","base","theta","op","ref10","printstr","ref11","results1","cc","ss","ans","exp","willEvaluateAsFloats","cycleString","positionIfSymbolAlreadyBeingEvaluated","cons_head","Eval_atomize","Eval_draw","checkResult","dsolve","orig","theTensor","checkingTheDivision","dividend","foundComplexRoot","foundRealRoot","previousFactorisation","remainingPoly","whichRootsAreWeFinding","a0","na0","nan","rootsTries_i","rootsTries_j","nodeToCheck","numberOfEs","numberOfMults","numberOfPIs","numberOfPowers","numberOfSums","loopingVariable","polyVar","difference","moretheArguments","operands","refinedOperands","secondArgument","shift","theArguments","arg1","arg2","arg3","subtractionResult","ak","bk","tree","factors_accumulator","hc","tab","u","half","constant","arg_hash","name","Error","terms","sum","term","term_hash","term_set","v","call","product","base_hash","exp_hash","constexp","f","key","JSON","stringify","eachEntry","results2","valueOrPredicate","evalledArgument","isEven","minussign","listIterator","compareAbs","toReturn","isProbablePrime","index","and","shiftLeft","not","or","append","_gamma","r","random","nrabs","firstArgument","patternPosition","stringKey","thirdArgument","patternsinfoToBePrinted","compare","bigint_one","g","xprime","b_isEven_and_c_isItsInverse","hopefullySimplified","inputBase","inputExp","isThisOne","is_a_moreThanZero","original_test_flag","beenPrinted","passedPrintMode","origPrintMode","theString","theTypeOfPrint","parsedString","originalCodeGen","returnedString","replace","denom","numberOneOverSomething","origAccumulator","previousFactorWasANumber","functionBody","numberOfIntegrals","originalIntegral","theIntegral","theVariable","retString","firstLevel","body","lowerlimit","upperlimit","variable","howManyIfs","exponent","denomExponent","newExponent","numExponent","omitParens","fbody","parameters","character","k1","k2","pPrintName","pString","dx","dy","h1","h2","w1","w2","y1","y2","max_x","max_y","min_x","min_y","emit_sign","tmpString","sIndex","tmpBuffer","eh","ew","ncol","nrow","indexVariable","oldIndexVariableValue","gcdBetweenNumeratorAndDenominator","qadd_ab","qadd_ba","qadd_denominator","qadd_frac1","qadd_frac2","qadd_numerator","resultSum","aa","bb","isOdd","stackIndex","divisor","commonDenominator","eachTerm","printf","imaginaryCoefficients","isSimpleRootPolynomial","divideBy","miniStack","lastCoeff","leadingCoeff","aSol","commonPart","rootsOfOne","C_CHECKED_AS_NOT_ZERO","Q_CHECKED_AS_NOT_ZERO","R_18_a_b_c_d","R_27_a2_d","R_2_b3","R_3_a","R_3_a_C","R_3_a_c","R_4_DELTA03","R_6_a","R_6_a_C","R_C","R_C_over_3a","R_C_simplified_toCheckIfZero","R_DELTA0","R_DELTA0_simplified_toCheckIfZero","R_DELTA0_toBeCheckedIfZero","R_DELTA1","R_Q","R_Q_simplified_toCheckIfZero","R_S","R_S_simplified_toCheckIfZero","R_a2","R_a2_d","R_a2_d2","R_a3","R_a_b_c","R_a_b_c_d","R_a_c","R_b2","R_b2_c2","R_b3","R_b3_d","R_c2","R_c3","R_d2","R_determinant","R_determinant_simplified_toCheckIfZero","R_e2","R_e3","R_m","R_m27_a2_d2","R_m4_a_c3","R_m4_b3_d","R_m9_a_b_c","R_m_b_over_3a","R_minus_4S2_minus_2p","R_minus_b_over_4a","R_p","R_principalCubicRoot","R_q","R_q_over_S","R_r","S_CHECKED_AS_NOT_ZERO","ThreePPlus2M","TwoQOversqrtPPlus2M","biquadraticSolutions","choiceOfRadicalInQSoSIsNotZero","coeff2","coeff3","coeff4","depressedSolutions","eachSolution","flipSignOFQSoCIsNotZero","flipSignOFRadicalSoQIsNotZero","i_sqrt3","one_minus_i_sqrt3","one_plus_i_sqrt3","resolventCubicSolutions","root_solution","sqrtPPlus2M","toBeCheckedIFZero","assignmentIsOfQuotedType","existingDependencies","indexOfSymbolLeftOfAssignment","symbolLeftOfAssignment","splice","charCodeAt","firstFactorIsNumber","theSymbol","prefixVar","functionName","RegExp","test","errmsg","atLeastOneSuccessInRouldOfRulesApplications","eachConsecutiveRuleApplication","eachSimplification","numberOfRulesApplications","originalexpanding","success","args","eval","carp1","miao","oldp1","oldp2","num","sasa","theGCD","simplificationWithCondense","simplificationWithoutCondense","somethingSimplified","A","B","C","SOLUTION","anyRadicalSimplificationWorked","checkSize","commonBases","commonInnerExponent","countingTerms","firstTerm","innerbase","innerexponent","lowercase_a","lowercase_b","numberOfTerms","possibleNewExpression","possibleNewExpressionValue","possibleRationalSolutions","possibleSolutions","potentialPower","realOfpossibleRationalSolutions","secondTerm","secondTermFactor","termsThatAreNotPowers","whichRationalSolution","max","apply","sinh","tan","tanh","comparison","wholeAndExpression","andPredicates","somePredicateUnknown","orPredicates","wholeOrExpression","bookmarkTosToPrintDecomps","eachTransformEntry","numberOfDecomps","restTerm","theTransform","transform_h","transformationSuccessful","transformedTerms","fea_i","fea_j","innerTranspSwitch1","innerTranspSwitch2","bodyAndFormalArguments","definitionOfInterest","defn_i","str1","str2","maxFixedPrintoutDigits","stringRepresentation","search","needle","message","stringToBeParsed","dontGenerateCode","allReturnedLatexStrings","allReturnedPlainStrings","bodyForReadableSummaryOfGeneratedCode","cyclesDescriptions","deQuotedDep","dependencyInfo","eachDependency","generatedBody","generatedCode","indexOfEachReplacement","indexOfPartRemainingToBeParsed","newUserSymbol","originalUserSymbol","readableSummaryOfGeneratedCode","recursedDependencies","replacementsFrom","replacementsTo","scriptEvaluation","stringToBeRun","testableString","timeStartFromAlgebra","toBePrinted","userVariablesMentioned","variablesWithCycles","Date","getTime","affectsVariables","affectedBy","error1","variableToBeChecked","arrayWhereDependenciesWillBeAdded","variablesAlreadyFleshedOut","chainBeingChecked","cyclesDescription","theErrorMessage","String","fromCharCode","stringToNormalise","generateLatex","collectedLatexResult","collectedPlainResult","errorWhileExecution","stringToBeReturned","timeStart","timingDebugWrite","selftest","originalArgument","shouldAutoexpand","codeFromAlgebraBlock","keepState","originalcodeFromAlgebraBlock","userSimplificationsInProgramForm","code","latexResult","readableSummaryOfCode","testableStringIsIgnoredHere","stackPos","elementToBeReturned","symbolsinfoToBePrinted","bindingi","symtabi","latexPrint","theSymnum","argu","warn","data","argus","fn","arguments","builtin_fns","bind","frozenContents","frozenHash","frozenPatterns","frozenSymbols","frozen","previousHash"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var $, ABS, ADD, ADJ, AND, APPROXRATIO, ARCCOS, ARCCOSH, ARCSIN, ARCSINH, ARCTAN, ARCTANH, ARG, ASSUME_REAL_VARIABLES, ATOMIZE, AUTOEXPAND, BAKE, BESSELJ, BESSELY, BINDING, BINOMIAL, BINOM_check_args, BUF, C1, C2, C3, C4, C5, C6, CEILING, CHECK, CHOOSE, CIRCEXP, CLEAR, CLEARALL, CLEARPATTERNS, CLOCK, COEFF, COFACTOR, CONDENSE, CONJ, CONS, CONTRACT, COS, COSH, Condense, DEBUG, DEBUG_ABS, DEBUG_ARG, DEBUG_CLOCKFORM, DEBUG_IMAG, DEBUG_IS, DEBUG_POWER, DEBUG_RECT, DECOMP, DEFINT, DEGREE, DENOMINATOR, DERIVATIVE, DET, DET_check_arg, DIM, DIRAC, DIVISORS, DO, DOT, DOUBLE, DRAW, DRAWX, DSOLVE, E, EIGEN, EIGENVAL, EIGENVEC, EIG_N, EIG_check_arg, EIG_yydd, EIG_yyqq, ERF, ERFC, EVAL, EXP, EXPAND, EXPCOS, EXPSIN, Eval, Eval_Eval, Eval_abs, Eval_add, Eval_adj, Eval_and, Eval_approxratio, Eval_arccos, Eval_arccosh, Eval_arcsin, Eval_arcsinh, Eval_arctan, Eval_arctanh, Eval_arg, Eval_besselj, Eval_bessely, Eval_binding, Eval_binomial, Eval_ceiling, Eval_check, Eval_choose, Eval_circexp, Eval_clear, Eval_clearall, Eval_clearpatterns, Eval_clock, Eval_coeff, Eval_cofactor, Eval_condense, Eval_conj, Eval_cons, Eval_contract, Eval_cos, Eval_cosh, Eval_decomp, Eval_defint, Eval_degree, Eval_denominator, Eval_derivative, Eval_det, Eval_dim, Eval_dirac, Eval_divisors, Eval_do, Eval_dsolve, Eval_eigen, Eval_eigenval, Eval_eigenvec, Eval_erf, Eval_erfc, Eval_exp, Eval_expand, Eval_expcos, Eval_expsin, Eval_factor, Eval_factorial, Eval_factorpoly, Eval_filter, Eval_float, Eval_floor, Eval_for, Eval_function_reference, Eval_gamma, Eval_gcd, Eval_hermite, Eval_hilbert, Eval_imag, Eval_index, Eval_inner, Eval_integral, Eval_inv, Eval_invg, Eval_isinteger, Eval_isprime, Eval_laguerre, Eval_lcm, Eval_leading, Eval_legendre, Eval_log, Eval_lookup, Eval_mod, Eval_multiply, Eval_noexpand, Eval_not, Eval_nroots, Eval_number, Eval_numerator, Eval_operator, Eval_or, Eval_outer, Eval_pattern, Eval_patternsinfo, Eval_polar, Eval_power, Eval_predicate, Eval_prime, Eval_print, Eval_print2dascii, Eval_printcomputer, Eval_printhuman, Eval_printlatex, Eval_printlist, Eval_product, Eval_quote, Eval_quotient, Eval_rank, Eval_rationalize, Eval_real, Eval_rect, Eval_roots, Eval_round, Eval_setq, Eval_sgn, Eval_shape, Eval_silentpattern, Eval_simfac, Eval_simplify, Eval_sin, Eval_sinh, Eval_sqrt, Eval_stop, Eval_subst, Eval_sum, Eval_sym, Eval_symbolsinfo, Eval_tan, Eval_tanh, Eval_taylor, Eval_tensor, Eval_test, Eval_testeq, Eval_testge, Eval_testgt, Eval_testle, Eval_testlt, Eval_transpose, Eval_unit, Eval_user_function, Eval_zero, Evalpoly, FACTOR, FACTORIAL, FACTORPOLY, FILTER, FLOATF, FLOOR, FOR, FORCE_FIXED_PRINTOUT, FUNCTION, Find, GAMMA, GCD, HERMITE, HILBERT, IMAG, INDEX, INNER, INTEGRAL, INV, INVG, INV_check_arg, INV_decomp, ISINTEGER, ISPRIME, LAGUERRE, LAST, LAST_2DASCII_PRINT, LAST_FULL_PRINT, LAST_LATEX_PRINT, LAST_LIST_PRINT, LAST_PLAIN_PRINT, LAST_PRINT, LCM, LEADING, LEGENDRE, LOG, LOOKUP, M, MAXDIM, MAXPRIMETAB, MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES, MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE, MAX_FIXED_PRINTOUT_DIGITS, MAX_PROGRAM_SIZE, MEQUAL, METAA, METAB, METAX, MLENGTH, MOD, MSIGN, MULTIPLY, MZERO, N, NIL, NOT, NROOTS, NROOTS_ABS, NROOTS_DELTA, NROOTS_EPSILON, NROOTS_RANDOM, NROOTS_YMAX, NROOTS_divpoly, NSYM, NUM, NUMBER, NUMERATOR, OPERATOR, OR, OUTER, PATTERN, PATTERNSINFO, PI, POLAR, POWER, PRIME, PRINT, PRINT2DASCII, PRINTFULL, PRINTLATEX, PRINTLIST, PRINTMODE_2DASCII, PRINTMODE_COMPUTER, PRINTMODE_HUMAN, PRINTMODE_LATEX, PRINTMODE_LIST, PRINTOUTRESULT, PRINTPLAIN, PRINT_LEAVE_E_ALONE, PRINT_LEAVE_X_ALONE, PRODUCT, QUOTE, QUOTIENT, RANK, RATIONALIZE, REAL, ROOTS, ROUND, SECRETX, SELFTEST, SETQ, SGN, SHAPE, SILENTPATTERN, SIMPLIFY, SIN, SINH, SPACE_BETWEEN_COLUMNS, SPACE_BETWEEN_ROWS, SQRT, STOP, STR, SUBST, SUM, SYM, SYMBOLSINFO, SYMBOL_A, SYMBOL_A_UNDERSCORE, SYMBOL_B, SYMBOL_B_UNDERSCORE, SYMBOL_C, SYMBOL_D, SYMBOL_I, SYMBOL_IDENTITY_MATRIX, SYMBOL_J, SYMBOL_N, SYMBOL_R, SYMBOL_S, SYMBOL_T, SYMBOL_X, SYMBOL_X_UNDERSCORE, SYMBOL_Y, SYMBOL_Z, TAN, TANH, TAYLOR, TENSOR, TEST, TESTEQ, TESTGE, TESTGT, TESTLE, TESTLT, TIMING_DEBUGS, TOS, TRACE, TRANSPOSE, T_DOUBLE, T_EQ, T_FUNCTION, T_GTEQ, T_INTEGER, T_LTEQ, T_NEQ, T_NEWLINE, T_QUOTASSIGN, T_STRING, T_SYMBOL, U, UNIT, USR_SYMBOLS, VERSION, YMAX, YYE, YYRECT, ZERO, __emit_char, __emit_str, __factor_add, __factorial, __is_negative, __is_radical_number, __lcm, __legendre, __legendre2, __legendre3, __normalize_radical_factors, __rationalize_tensor, _print, abs, absValFloat, absval, absval_tensor, add, addSymbolLeftOfAssignment, addSymbolRightOfAssignment, add_all, add_factor_to_accumulator, add_numbers, add_terms, addf, adj, alloc_tensor, allocatedId, any_denominators, approxAll, approxLogs, approxLogsOfRationals, approxOneRatioOnly, approxRadicals, approxRadicalsOfRationals, approxRationalsOfLogs, approxRationalsOfPowersOfE, approxRationalsOfPowersOfPI, approxRationalsOfRadicals, approxSineOfRationalMultiplesOfPI, approxSineOfRationals, approxTrigonometric, approx_just_an_integer, approx_logarithmsOfRationals, approx_nothingUseful, approx_radicalOfRatio, approx_ratioOfRadical, approx_rationalOfE, approx_rationalOfPi, approx_rationalsOfLogarithms, approx_sine_of_pi_times_rational, approx_sine_of_rational, approxratioRecursive, arccos, arccosh, arcsin, arcsinh, arctan, arctanh, areunivarpolysfactoredorexpandedform, arg, arglist, assignmentFound, avoidCalculatingPowersIntoArctans, bake, bake_poly, bake_poly_term, besselj, bessely, bigInt, bignum_factorial, bignum_float, bignum_power_number, bignum_scan_float, bignum_scan_integer, bignum_truncate, binding, binomial, buffer, build_tensor, caaddr, caadr, caar, cadaddr, cadadr, cadar, caddaddr, caddadr, caddar, caddddr, cadddr, caddr, cadr, called_from_Algebra_block, car, cdaddr, cdadr, cdar, cddaddr, cddar, cdddaddr, cddddr, cdddr, cddr, cdr, ceiling, chainOfUserSymbolsNotFunctionsBeingEvaluated, charTabIndex, chartab, checkFloatHasWorkedOutCompletely, check_esc_flag, check_stack, check_tensor_dimensions, choose, choose_check_args, circexp, clearAlgebraEnvironment, clearRenamedVariablesToAvoidBindingToExternalScope, clear_symbols, clear_term, clearall, clockform, cmpGlyphs, cmp_args, cmp_expr, cmp_terms, cmp_terms_count, codeGen, coeff, cofactor, collectLatexStringFromReturnValue, collectUserSymbols, combine_factors, combine_gammas, combine_terms, compareState, compare_numbers, compare_rationals, compare_tensors, compatible, computeDependenciesFromAlgebra, computeResultsAndJavaScriptFromAlgebra, compute_fa, conjugate, cons, consCount, contract, convert_bignum_to_double, convert_rational_to_double, copy_tensor, cosine, cosine_of_angle, cosine_of_angle_sum, count, countOccurrencesOfSymbol, count_denominators, counter, countsize, d_scalar_scalar, d_scalar_scalar_1, d_scalar_tensor, d_tensor_scalar, d_tensor_tensor, dabs, darccos, darccosh, darcsin, darcsinh, darctan, darctanh, dbesselj0, dbesseljn, dbessely0, dbesselyn, dcos, dcosh, dd, decomp, decomp_product, decomp_sum, defineSomeHandyConstants, define_user_function, defn, defn_str, degree, denominator, derf, derfc, derivative, derivative_of_integral, det, determinant, detg, dfunction, dhermite, dirac, display, display_flag, displaychar, divide, divide_numbers, divisors, divisors_onstack, divpoly, dlog, do_clearPatterns, do_clearall, do_simplify_nested_radicals, dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication, dotprod_unicode, doubleToReasonableString, dpow, dpower, dproduct, draw_flag, draw_stop_return, dsgn, dsin, dsinh, dsum, dtan, dtanh, dupl, eigen, elelmIndex, elem, emit_denominator, emit_denominators, emit_expr, emit_factor, emit_factorial_function, emit_flat_tensor, emit_fraction, emit_function, emit_index_function, emit_multiply, emit_number, emit_numerators, emit_numerical_fraction, emit_power, emit_string, emit_subexpr, emit_symbol, emit_tensor, emit_tensor_inner, emit_term, emit_top_expr, emit_unsigned_expr, emit_x, equal, equaln, equalq, erfc, errorMessage, esc_flag, evaluatingAsFloats, evaluatingPolar, exec, expand, expand_get_A, expand_get_AF, expand_get_B, expand_get_C, expand_get_CF, expand_tensor, expanding, expcos, exponential, expr_level, expsin, f1, f10, f2, f3, f4, f5, f9, f_equals_a, factor, factor_a, factor_again, factor_b, factor_number, factor_small_number, factor_term, factorial, factorpoly, factors, factpoly_expo, fill_buf, filter, filter_main, filter_sum, filter_tensor, findDependenciesInScript, findPossibleClockForm, findPossibleExponentialForm, findroot, fixup_fraction, fixup_power, flag, floatToRatioRoutine, fmt_index, fmt_level, fmt_x, frame, freeze, functionInvokationsScanningStack, gamma, gamma_of_sum, gammaf, gcd, gcd_main, gcd_numbers, gcd_polys, gcd_powers_with_same_base, gcd_product_product, gcd_product_sum, gcd_sum, gcd_sum_product, gcd_sum_sum, gen, getSimpleRoots, getStateHash, get_binding, get_factor_from_complex_root, get_factor_from_real_root, get_innerprod_factors, get_next_token, get_printname, get_size, get_token, getdisplaystr, glyph, gp, guess, hasImaginaryCoeff, hasNegativeRationalExponent, hash_addition, hash_function, hash_multiplication, hash_power, hashcode_values, hashed_itab, hermite, hilbert, i1, imag, imaginaryunit, index_function, init, initNRoots, inited, inner, inner_f, input_str, integral, integral_of_form, integral_of_product, integral_of_sum, inv, inverse, invert_number, invg, isNumberOneOverSomething, isNumericAtom, isNumericAtomOrTensor, isSimpleRoot, isSmall, isSymbolLeftOfAssignment, isSymbolReclaimable, isZeroAtom, isZeroAtomOrTensor, isZeroLikeOrNonZeroLikeOrUndetermined, isZeroTensor, is_denominator, is_factor, is_small_integer, is_square_matrix, is_usr_symbol, isadd, isalnumorunderscore, isalpha, isalphaOrUnderscore, iscomplexnumber, iscomplexnumberdouble, iscons, isdenominator, isdigit, isdouble, iseveninteger, isfactor, isfactorial, isfloating, isfraction, isidentitymatrix, isimaginarynumber, isimaginarynumberdouble, isimaginaryunit, isinnerordot, isinteger, isintegerfactor, isintegerorintegerfloat, isinv, iskeyword, isminusone, isminusoneoversqrttwo, isminusoneovertwo, ismultiply, isnegative, isnegativenumber, isnegativeterm, isnonnegativeinteger, isnpi, isone, isoneover, isoneoversqrttwo, isoneovertwo, isplusone, isplustwo, ispolyexpandedform, ispolyexpandedform_expr, ispolyexpandedform_factor, ispolyexpandedform_term, ispolyfactoredorexpandedform, ispolyfactoredorexpandedform_factor, ispolyfactoredorexpandedform_power, isposint, ispositivenumber, ispower, isquarterturn, isrational, isspace, isstr, issymbol, issymbolic, istensor, istranspose, isunderscore, isunivarpolyfactoredorexpandedform, itab, italu_hashcode, j1, laguerre, laguerre2, lastFoundSymbol, latexErrorSign, lcm, leading, legendre, length, lessp, level, list, listLength, logarithm, logbuf, lookupsTotal, lu_decomp, madd, makePositive, makeSignSameAs, make_hashed_itab, mask, mcmp, mcmpint, mdiv, mdivrem, meta_mode, mgcd, mini_solve, mint, mmod, mmul, mod, monic, move, moveTos, mp_clr_bit, mp_denominator, mp_numerator, mp_set_bit, mpow, mprime, mroot, mshiftright, msub, mtotal, multinomial_sum, multiply, multiply_all, multiply_all_noexpand, multiply_consecutive_constants, multiply_denominators, multiply_denominators_factor, multiply_denominators_term, multiply_noexpand, multiply_numbers, n_factor_number, negate, negate_expand, negate_noexpand, negate_number, new_string, newline_flag, nil_symbols, normaliseDots, normalisedCoeff, normalize_angle, nroots_a, nroots_b, nroots_c, nroots_df, nroots_dx, nroots_fa, nroots_fb, nroots_x, nroots_y, nterms, nthCadr, numerator, numericRootOfPolynomial, o, one, oneElement, one_as_double, out_buf, out_count, out_of_memory, outer, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, parse, parse_internal, parse_p1, parse_p2, parse_time_simplifications, partition, patternHasBeenFound, patternsinfo, peek, performing_roots, polar, polarRectAMinusOneBase, polycoeff, polyform, pop, pop_double, pop_frame, pop_integer, power, power_str, power_sum, power_tensor, predefinedSymbolsInGlobalScope_doNotTrackInDependencies, prime, primetab, print2dascii, printMode, print_ABS_latex, print_ARCCOS_codegen, print_ARCSIN_codegen, print_ARCTAN_codegen, print_BINOMIAL_latex, print_COS_codegen, print_DEFINT_latex, print_DOT_codegen, print_DOT_latex, print_DO_codegen, print_FOR_codegen, print_INV_codegen, print_INV_latex, print_PRODUCT_codegen, print_PRODUCT_latex, print_SETQ_codegen, print_SIN_codegen, print_SQRT_latex, print_SUM_codegen, print_SUM_latex, print_TAN_codegen, print_TESTEQ_latex, print_TESTGE_latex, print_TESTGT_latex, print_TESTLE_latex, print_TESTLT_latex, print_TEST_codegen, print_TEST_latex, print_TRANSPOSE_codegen, print_TRANSPOSE_latex, print_UNIT_codegen, print_a_over_b, print_base, print_base_of_denom, print_char, print_denom, print_double, print_expo_of_denom, print_exponent, print_expr, print_factor, print_factorial_function, print_glyphs, print_index_function, print_list, print_multiply_sign, print_number, print_power, print_str, print_subexpr, print_tensor, print_tensor_inner, print_tensor_inner_latex, print_tensor_latex, print_term, printchar, printchar_nowrap, printline, program_buf, promote_tensor, push, pushTryNotToDuplicate, push_cars, push_double, push_factor, push_frame, push_identity_matrix, push_integer, push_rational, push_symbol, push_term_factors, push_terms, push_zero_matrix, qadd, qdiv, qmul, qpow, qpowf, quickfactor, quickpower, rational, rationalize, rationalize_coefficients, real, reciprocate, rect, recursionLevelNestedRadicalsRemoval, recursiveDependencies, ref, ref1, rememberPrint, remove_negative_exponents, reset_after_error, restore, restoreMetaBindings, rewrite_args, rewrite_args_tensor, roots, roots2, roots3, run, runUserDefinedSimplifications, save, saveMetaBindings, scalar_times_tensor, scan, scan_error, scan_expression, scan_factor, scan_function_call_with_function_name, scan_function_call_without_function_name, scan_index, scan_meta, scan_power, scan_relation, scan_stmt, scan_str, scan_string, scan_subexpr, scan_symbol, scan_tensor, scan_term, scanned, scanningParameters, setM, setSignTo, set_binding, set_component, setq_indexed, sfac_product, sfac_product_f, sgn, shape, show_power_debug, sign, sign_of_term, simfac, simfac_term, simpleComplexityMeasure, simplify, simplifyForCodeGeneration, simplify_1_in_products, simplify_main, simplify_nested_radicals, simplify_polar, simplify_polarRect, simplify_rational_expressions, simplify_rectToClock, simplify_tensor, simplify_trig, simplifyfactorials, sine, sine_of_angle, sine_of_angle_sum, skipRootVariableToBeSolved, sort_stack, square, ssqrt, stack, stackAddsCount, std_symbol, step, step2, stop, strcmp, stringsEmittedByUserPrintouts, subf, subst, subtract, subtract_numbers, swap, symbol, symbolsDependencies, symbolsHavingReassignments, symbolsInExpressionsWithoutAssignments, symbolsLeftOfAssignment, symbolsRightOfAssignment, symbolsinfo, symnum, symtab, take_care_of_nested_radicals, tangent, taylor, tensor, tensor_plus_tensor, tensor_times_scalar, testApprox, test_flag, text_metric, theRandom, token, token_buf, token_str, top, top_level_eval, tos, transform, transpose, transpose_unicode, trigmode, trivial_divide, try_kth_prime, turnErrorMessageToLatex, ucmp, unfreeze, unique, unique_f, update_token_buf, userSimplificationsInListForm, userSimplificationsInStringForm, usr_symbol, verbosing, version, will_be_displayed_as_fraction, ybinomial, ycosh, ydirac, yerf, yerfc, yfloor, yindex, yround, ysinh, yyarg, yybesselj, yybessely, yyceiling, yycondense, yycontract, yycosh, yydegree, yydetg, yydivpoly, yyerf, yyerfc, yyexpand, yyfactorpoly, yyfloat, yyfloor, yyhermite, yyhermite2, yyinvg, yylcm, yylog, yymultiply, yyouter, yypower, yyrationalize, yyround, yysgn, yysimfac, yysinh, yytangent, zero, zzfloat,\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  bigInt = require('big-integer');\n\n  version = \"1.3.1\";\n\n  SELFTEST = 1;\n\n  NSYM = 1000;\n\n  DEBUG = false;\n\n  PRINTOUTRESULT = false;\n\n  PRINTMODE_LATEX = \"PRINTMODE_LATEX\";\n\n  PRINTMODE_2DASCII = \"PRINTMODE_2DASCII\";\n\n  PRINTMODE_COMPUTER = \"PRINTMODE_COMPUTER\";\n\n  PRINTMODE_HUMAN = \"PRINTMODE_HUMAN\";\n\n  PRINTMODE_LIST = \"PRINTMODE_LIST\";\n\n  printMode = PRINTMODE_COMPUTER;\n\n  dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication = true;\n\n  recursionLevelNestedRadicalsRemoval = 0;\n\n  do_simplify_nested_radicals = true;\n\n  avoidCalculatingPowersIntoArctans = true;\n\n  rational = (function() {\n    function rational() {}\n\n    rational.prototype.a = null;\n\n    rational.prototype.b = null;\n\n    return rational;\n\n  })();\n\n  U = (function() {\n    U.prototype.cons = null;\n\n    U.prototype.printname = \"\";\n\n    U.prototype.str = \"\";\n\n    U.prototype.tensor = null;\n\n    U.prototype.q = null;\n\n    U.prototype.d = 0.0;\n\n    U.prototype.k = 0;\n\n    U.prototype.tag = 0;\n\n    U.prototype.toString = function() {\n      return print_expr(this);\n    };\n\n    U.prototype.toLatexString = function() {\n      return collectLatexStringFromReturnValue(this);\n    };\n\n    function U() {\n      this.cons = {};\n      this.cons.car = null;\n      this.cons.cdr = null;\n      this.q = new rational();\n    }\n\n    return U;\n\n  })();\n\n  errorMessage = \"\";\n\n  CONS = 0;\n\n  NUM = 1;\n\n  DOUBLE = 2;\n\n  STR = 3;\n\n  TENSOR = 4;\n\n  SYM = 5;\n\n  counter = 0;\n\n  ABS = counter++;\n\n  ADD = counter++;\n\n  ADJ = counter++;\n\n  AND = counter++;\n\n  APPROXRATIO = counter++;\n\n  ARCCOS = counter++;\n\n  ARCCOSH = counter++;\n\n  ARCSIN = counter++;\n\n  ARCSINH = counter++;\n\n  ARCTAN = counter++;\n\n  ARCTANH = counter++;\n\n  ARG = counter++;\n\n  ATOMIZE = counter++;\n\n  BESSELJ = counter++;\n\n  BESSELY = counter++;\n\n  BINDING = counter++;\n\n  BINOMIAL = counter++;\n\n  CEILING = counter++;\n\n  CHECK = counter++;\n\n  CHOOSE = counter++;\n\n  CIRCEXP = counter++;\n\n  CLEAR = counter++;\n\n  CLEARALL = counter++;\n\n  CLEARPATTERNS = counter++;\n\n  CLOCK = counter++;\n\n  COEFF = counter++;\n\n  COFACTOR = counter++;\n\n  CONDENSE = counter++;\n\n  CONJ = counter++;\n\n  CONTRACT = counter++;\n\n  COS = counter++;\n\n  COSH = counter++;\n\n  DECOMP = counter++;\n\n  DEFINT = counter++;\n\n  DEGREE = counter++;\n\n  DENOMINATOR = counter++;\n\n  DERIVATIVE = counter++;\n\n  DET = counter++;\n\n  DIM = counter++;\n\n  DIRAC = counter++;\n\n  DIVISORS = counter++;\n\n  DO = counter++;\n\n  DOT = counter++;\n\n  DRAW = counter++;\n\n  DSOLVE = counter++;\n\n  EIGEN = counter++;\n\n  EIGENVAL = counter++;\n\n  EIGENVEC = counter++;\n\n  ERF = counter++;\n\n  ERFC = counter++;\n\n  EVAL = counter++;\n\n  EXP = counter++;\n\n  EXPAND = counter++;\n\n  EXPCOS = counter++;\n\n  EXPSIN = counter++;\n\n  FACTOR = counter++;\n\n  FACTORIAL = counter++;\n\n  FACTORPOLY = counter++;\n\n  FILTER = counter++;\n\n  FLOATF = counter++;\n\n  FLOOR = counter++;\n\n  FOR = counter++;\n\n  FUNCTION = counter++;\n\n  GAMMA = counter++;\n\n  GCD = counter++;\n\n  HERMITE = counter++;\n\n  HILBERT = counter++;\n\n  IMAG = counter++;\n\n  INDEX = counter++;\n\n  INNER = counter++;\n\n  INTEGRAL = counter++;\n\n  INV = counter++;\n\n  INVG = counter++;\n\n  ISINTEGER = counter++;\n\n  ISPRIME = counter++;\n\n  LAGUERRE = counter++;\n\n  LCM = counter++;\n\n  LEADING = counter++;\n\n  LEGENDRE = counter++;\n\n  LOG = counter++;\n\n  LOOKUP = counter++;\n\n  MOD = counter++;\n\n  MULTIPLY = counter++;\n\n  NOT = counter++;\n\n  NROOTS = counter++;\n\n  NUMBER = counter++;\n\n  NUMERATOR = counter++;\n\n  OPERATOR = counter++;\n\n  OR = counter++;\n\n  OUTER = counter++;\n\n  PATTERN = counter++;\n\n  PATTERNSINFO = counter++;\n\n  POLAR = counter++;\n\n  POWER = counter++;\n\n  PRIME = counter++;\n\n  PRINT_LEAVE_E_ALONE = counter++;\n\n  PRINT_LEAVE_X_ALONE = counter++;\n\n  PRINT = counter++;\n\n  PRINT2DASCII = counter++;\n\n  PRINTFULL = counter++;\n\n  PRINTLATEX = counter++;\n\n  PRINTLIST = counter++;\n\n  PRINTPLAIN = counter++;\n\n  PRODUCT = counter++;\n\n  QUOTE = counter++;\n\n  QUOTIENT = counter++;\n\n  RANK = counter++;\n\n  RATIONALIZE = counter++;\n\n  REAL = counter++;\n\n  ROUND = counter++;\n\n  YYRECT = counter++;\n\n  ROOTS = counter++;\n\n  SETQ = counter++;\n\n  SGN = counter++;\n\n  SILENTPATTERN = counter++;\n\n  SIMPLIFY = counter++;\n\n  SIN = counter++;\n\n  SINH = counter++;\n\n  SHAPE = counter++;\n\n  SQRT = counter++;\n\n  STOP = counter++;\n\n  SUBST = counter++;\n\n  SUM = counter++;\n\n  SYMBOLSINFO = counter++;\n\n  TAN = counter++;\n\n  TANH = counter++;\n\n  TAYLOR = counter++;\n\n  TEST = counter++;\n\n  TESTEQ = counter++;\n\n  TESTGE = counter++;\n\n  TESTGT = counter++;\n\n  TESTLE = counter++;\n\n  TESTLT = counter++;\n\n  TRANSPOSE = counter++;\n\n  UNIT = counter++;\n\n  ZERO = counter++;\n\n  NIL = counter++;\n\n  LAST = counter++;\n\n  LAST_PRINT = counter++;\n\n  LAST_2DASCII_PRINT = counter++;\n\n  LAST_FULL_PRINT = counter++;\n\n  LAST_LATEX_PRINT = counter++;\n\n  LAST_LIST_PRINT = counter++;\n\n  LAST_PLAIN_PRINT = counter++;\n\n  AUTOEXPAND = counter++;\n\n  BAKE = counter++;\n\n  ASSUME_REAL_VARIABLES = counter++;\n\n  TRACE = counter++;\n\n  FORCE_FIXED_PRINTOUT = counter++;\n\n  MAX_FIXED_PRINTOUT_DIGITS = counter++;\n\n  YYE = counter++;\n\n  DRAWX = counter++;\n\n  METAA = counter++;\n\n  METAB = counter++;\n\n  METAX = counter++;\n\n  SECRETX = counter++;\n\n  VERSION = counter++;\n\n  PI = counter++;\n\n  SYMBOL_A = counter++;\n\n  SYMBOL_B = counter++;\n\n  SYMBOL_C = counter++;\n\n  SYMBOL_D = counter++;\n\n  SYMBOL_I = counter++;\n\n  SYMBOL_J = counter++;\n\n  SYMBOL_N = counter++;\n\n  SYMBOL_R = counter++;\n\n  SYMBOL_S = counter++;\n\n  SYMBOL_T = counter++;\n\n  SYMBOL_X = counter++;\n\n  SYMBOL_Y = counter++;\n\n  SYMBOL_Z = counter++;\n\n  SYMBOL_IDENTITY_MATRIX = counter++;\n\n  SYMBOL_A_UNDERSCORE = counter++;\n\n  SYMBOL_B_UNDERSCORE = counter++;\n\n  SYMBOL_X_UNDERSCORE = counter++;\n\n  C1 = counter++;\n\n  C2 = counter++;\n\n  C3 = counter++;\n\n  C4 = counter++;\n\n  C5 = counter++;\n\n  C6 = counter++;\n\n  USR_SYMBOLS = counter++;\n\n  E = YYE;\n\n  TOS = 100000;\n\n  BUF = 10000;\n\n  MAX_PROGRAM_SIZE = 100001;\n\n  MAXPRIMETAB = 10000;\n\n  MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES = 5;\n\n  MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE = 10;\n\n  MAXDIM = 24;\n\n  symbolsDependencies = {};\n\n  symbolsHavingReassignments = [];\n\n  symbolsInExpressionsWithoutAssignments = [];\n\n  patternHasBeenFound = false;\n\n  predefinedSymbolsInGlobalScope_doNotTrackInDependencies = [\"rationalize\", \"abs\", \"e\", \"i\", \"pi\", \"sin\", \"ceiling\", \"cos\", \"roots\", \"integral\", \"derivative\", \"defint\", \"sqrt\", \"eig\", \"cov\", \"deig\", \"dcov\", \"float\", \"floor\", \"product\", \"root\", \"round\", \"sum\", \"test\", \"unit\"];\n\n  parse_time_simplifications = true;\n\n  chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n\n  stringsEmittedByUserPrintouts = \"\";\n\n  called_from_Algebra_block = false;\n\n  tensor = (function() {\n    tensor.prototype.ndim = 0;\n\n    tensor.prototype.dim = null;\n\n    tensor.prototype.nelem = 0;\n\n    tensor.prototype.elem = null;\n\n    function tensor() {\n      this.dim = (function() {\n        var o, ref, results;\n        results = [];\n        for (o = 0, ref = MAXDIM; 0 <= ref ? o <= ref : o >= ref; 0 <= ref ? o++ : o--) {\n          results.push(0);\n        }\n        return results;\n      })();\n      this.elem = [];\n    }\n\n    return tensor;\n\n  })();\n\n  display = (function() {\n    function display() {}\n\n    display.prototype.h = 0;\n\n    display.prototype.w = 0;\n\n    display.prototype.n = 0;\n\n    display.prototype.a = [];\n\n    return display;\n\n  })();\n\n  text_metric = (function() {\n    function text_metric() {}\n\n    text_metric.prototype.ascent = 0;\n\n    text_metric.prototype.descent = 0;\n\n    text_metric.prototype.width = 0;\n\n    return text_metric;\n\n  })();\n\n  tos = 0;\n\n  expanding = 0;\n\n  evaluatingAsFloats = 0;\n\n  evaluatingPolar = 0;\n\n  fmt_x = 0;\n\n  fmt_index = 0;\n\n  fmt_level = 0;\n\n  verbosing = 0;\n\n  primetab = (function() {\n    var ceil, i, j, primes;\n    primes = [2];\n    i = 3;\n    while (primes.length < MAXPRIMETAB) {\n      j = 0;\n      ceil = Math.sqrt(i);\n      while (j < primes.length && primes[j] <= ceil) {\n        if (i % primes[j] === 0) {\n          j = -1;\n          break;\n        }\n        j++;\n      }\n      if (j !== -1) {\n        primes.push(i);\n      }\n      i += 2;\n    }\n    primes[MAXPRIMETAB] = 0;\n    return primes;\n  })();\n\n  esc_flag = 0;\n\n  draw_flag = 0;\n\n  mtotal = 0;\n\n  trigmode = 0;\n\n  logbuf = \"\";\n\n  program_buf = \"\";\n\n  symtab = [];\n\n  binding = [];\n\n  isSymbolReclaimable = [];\n\n  arglist = [];\n\n  stack = [];\n\n  frame = 0;\n\n  p0 = null;\n\n  p1 = null;\n\n  p2 = null;\n\n  p3 = null;\n\n  p4 = null;\n\n  p5 = null;\n\n  p6 = null;\n\n  p7 = null;\n\n  p8 = null;\n\n  p9 = null;\n\n  zero = null;\n\n  one = null;\n\n  one_as_double = null;\n\n  imaginaryunit = null;\n\n  out_buf = \"\";\n\n  out_count = 0;\n\n  test_flag = 0;\n\n  codeGen = false;\n\n  draw_stop_return = null;\n\n  userSimplificationsInListForm = [];\n\n  userSimplificationsInStringForm = [];\n\n  transpose_unicode = 7488;\n\n  dotprod_unicode = 183;\n\n  symbol = function(x) {\n    return symtab[x];\n  };\n\n  iscons = function(p) {\n    return p.k === CONS;\n  };\n\n  isrational = function(p) {\n    return p.k === NUM;\n  };\n\n  isdouble = function(p) {\n    return p.k === DOUBLE;\n  };\n\n  isNumericAtom = function(p) {\n    return isrational(p) || isdouble(p);\n  };\n\n  isstr = function(p) {\n    return p.k === STR;\n  };\n\n  istensor = function(p) {\n    if (p == null) {\n      debugger;\n    } else {\n      return p.k === TENSOR;\n    }\n  };\n\n  isNumericAtomOrTensor = function(p) {\n    var a, i, n, o, ref;\n    if (isNumericAtom(p) || p === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      return 1;\n    }\n    if (!istensor(p) && !isNumericAtom(p)) {\n      return 0;\n    }\n    n = p.tensor.nelem;\n    a = p.tensor.elem;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtomOrTensor(a[i])) {\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  issymbol = function(p) {\n    return p.k === SYM;\n  };\n\n  iskeyword = function(p) {\n    return issymbol(p) && symnum(p) < NIL;\n  };\n\n  car = function(p) {\n    if (iscons(p)) {\n      return p.cons.car;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  cdr = function(p) {\n    if (iscons(p)) {\n      return p.cons.cdr;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  caar = function(p) {\n    return car(car(p));\n  };\n\n  cadr = function(p) {\n    return car(cdr(p));\n  };\n\n  cdar = function(p) {\n    return cdr(car(p));\n  };\n\n  cddr = function(p) {\n    return cdr(cdr(p));\n  };\n\n  caadr = function(p) {\n    return car(car(cdr(p)));\n  };\n\n  caddr = function(p) {\n    return car(cdr(cdr(p)));\n  };\n\n  cadar = function(p) {\n    return car(cdr(car(p)));\n  };\n\n  cdadr = function(p) {\n    return cdr(car(cdr(p)));\n  };\n\n  cddar = function(p) {\n    return cdr(cdr(car(p)));\n  };\n\n  cdddr = function(p) {\n    return cdr(cdr(cdr(p)));\n  };\n\n  caaddr = function(p) {\n    return car(car(cdr(cdr(p))));\n  };\n\n  cadadr = function(p) {\n    return car(cdr(car(cdr(p))));\n  };\n\n  caddar = function(p) {\n    return car(cdr(cdr(car(p))));\n  };\n\n  cdaddr = function(p) {\n    return cdr(car(cdr(cdr(p))));\n  };\n\n  cadddr = function(p) {\n    return car(cdr(cdr(cdr(p))));\n  };\n\n  cddddr = function(p) {\n    return cdr(cdr(cdr(cdr(p))));\n  };\n\n  caddddr = function(p) {\n    return car(cdr(cdr(cdr(cdr(p)))));\n  };\n\n  cadaddr = function(p) {\n    return car(cdr(car(cdr(cdr(p)))));\n  };\n\n  cddaddr = function(p) {\n    return cdr(cdr(car(cdr(cdr(p)))));\n  };\n\n  caddadr = function(p) {\n    return car(cdr(cdr(car(cdr(p)))));\n  };\n\n  cdddaddr = function(p) {\n    return cdr(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  caddaddr = function(p) {\n    return car(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  listLength = function(p) {\n    var startCount;\n    startCount = -1;\n    while (iscons(p)) {\n      p = cdr(p);\n      startCount++;\n    }\n    return startCount;\n  };\n\n  nthCadr = function(p, n) {\n    var startCount;\n    startCount = 0;\n    while (startCount <= n) {\n      p = cdr(p);\n      startCount++;\n    }\n    return car(p);\n  };\n\n  isadd = function(p) {\n    return car(p) === symbol(ADD);\n  };\n\n  ismultiply = function(p) {\n    return car(p) === symbol(MULTIPLY);\n  };\n\n  ispower = function(p) {\n    return car(p) === symbol(POWER);\n  };\n\n  isfactorial = function(p) {\n    return car(p) === symbol(FACTORIAL);\n  };\n\n  isinnerordot = function(p) {\n    return (car(p) === symbol(INNER)) || (car(p) === symbol(DOT));\n  };\n\n  istranspose = function(p) {\n    return car(p) === symbol(TRANSPOSE);\n  };\n\n  isinv = function(p) {\n    return car(p) === symbol(INV);\n  };\n\n  isidentitymatrix = function(p) {\n    return p === symbol(SYMBOL_IDENTITY_MATRIX);\n  };\n\n  MSIGN = function(p) {\n    if (p.isPositive()) {\n      return 1;\n    } else if (p.isZero()) {\n      return 0;\n    } else {\n      return -1;\n    }\n  };\n\n  MLENGTH = function(p) {\n    return p.toString().length;\n  };\n\n  MZERO = function(p) {\n    return p.isZero();\n  };\n\n  MEQUAL = function(p, n) {\n    if (p == null) {\n      debugger;\n    }\n    return p.equals(n);\n  };\n\n  reset_after_error = function() {\n    moveTos(0);\n    esc_flag = 0;\n    draw_flag = 0;\n    frame = TOS;\n    evaluatingAsFloats = 0;\n    return evaluatingPolar = 0;\n  };\n\n  $ = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\n  $.version = version;\n\n  $.isadd = isadd;\n\n  $.ismultiply = ismultiply;\n\n  $.ispower = ispower;\n\n  $.isfactorial = isfactorial;\n\n  $.car = car;\n\n  $.cdr = cdr;\n\n  $.caar = caar;\n\n  $.cadr = cadr;\n\n  $.cdar = cdar;\n\n  $.cddr = cddr;\n\n  $.caadr = caadr;\n\n  $.caddr = caddr;\n\n  $.cadar = cadar;\n\n  $.cdadr = cdadr;\n\n  $.cddar = cddar;\n\n  $.cdddr = cdddr;\n\n  $.caaddr = caaddr;\n\n  $.cadadr = cadadr;\n\n  $.caddar = caddar;\n\n  $.cdaddr = cdaddr;\n\n  $.cadddr = cadddr;\n\n  $.cddddr = cddddr;\n\n  $.caddddr = caddddr;\n\n  $.cadaddr = cadaddr;\n\n  $.cddaddr = cddaddr;\n\n  $.caddadr = caddadr;\n\n  $.cdddaddr = cdddaddr;\n\n  $.caddaddr = caddaddr;\n\n  $.symbol = symbol;\n\n  $.iscons = iscons;\n\n  $.isrational = isrational;\n\n  $.isdouble = isdouble;\n\n  $.isNumericAtom = isNumericAtom;\n\n  $.isstr = isstr;\n\n  $.istensor = istensor;\n\n  $.issymbol = issymbol;\n\n  $.iskeyword = iskeyword;\n\n  $.CONS = CONS;\n\n  $.NUM = NUM;\n\n  $.DOUBLE = DOUBLE;\n\n  $.STR = STR;\n\n  $.TENSOR = TENSOR;\n\n  $.SYM = SYM;\n\n\n  /* abs =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the absolute value of a real number, the magnitude of a complex number, or the vector length.\n   */\n\n\n  /*\n   Absolute value of a number,or magnitude of complex z, or norm of a vector\n  \n    z    abs(z)\n    -    ------\n  \n    a    a\n  \n    -a    a\n  \n    (-1)^a    1\n  \n    exp(a + i b)  exp(a)\n  \n    a b    abs(a) abs(b)\n  \n    a + i b    sqrt(a^2 + b^2)\n  \n  Notes\n  \n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n  \n    2. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n  \n      abs(numerator(z)) / abs(denominator(z))\n  \n       must be used to get the correct answer. Now the operation is\n       automatic.\n   */\n\n  DEBUG_ABS = false;\n\n  Eval_abs = function() {\n    push(cadr(p1));\n    Eval();\n    return abs();\n  };\n\n  absValFloat = function() {\n    Eval();\n    absval();\n    Eval();\n    return zzfloat();\n  };\n\n  abs = function() {\n    var theArgument;\n    theArgument = top();\n    if (DEBUG_ABS) {\n      console.trace(\">>>>  ABS of \" + theArgument);\n    }\n    numerator();\n    if (DEBUG_ABS) {\n      console.log(\"ABS numerator \" + stack[tos - 1]);\n    }\n    absval();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL numerator: \" + stack[tos - 1]);\n    }\n    push(theArgument);\n    denominator();\n    if (DEBUG_ABS) {\n      console.log(\"ABS denominator: \" + stack[tos - 1]);\n    }\n    absval();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL denominator: \" + stack[tos - 1]);\n    }\n    divide();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL divided: \" + stack[tos - 1]);\n    }\n    if (DEBUG_ABS) {\n      return console.log(\"<<<<<<<  ABS\");\n    }\n  };\n\n  absval = function() {\n    var anyFactorsYet, input;\n    save();\n    p1 = pop();\n    input = p1;\n    if (DEBUG_ABS) {\n      console.log(\"ABS of \" + p1);\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just zero\");\n      }\n      push(zero);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (isnegativenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a negative\");\n      }\n      push(p1);\n      negate();\n      restore();\n      return;\n    }\n    if (ispositivenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a positive\");\n      }\n      push(p1);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (p1 === symbol(PI)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" of PI\");\n      }\n      push(p1);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(ADD) && (findPossibleClockForm(p1) || findPossibleExponentialForm(p1) || Find(p1, imaginaryunit))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a sum\");\n      }\n      if (DEBUG_ABS) {\n        console.log(\"abs of a sum\");\n      }\n      push(p1);\n      rect();\n      p1 = pop();\n      push(p1);\n      real();\n      push_integer(2);\n      power();\n      push(p1);\n      imag();\n      push_integer(2);\n      power();\n      add();\n      push_rational(1, 2);\n      power();\n      simplify_trig();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is -1 to any power\");\n      }\n      if (evaluatingAsFloats) {\n        if (DEBUG_ABS) {\n          console.log(\" abs: numeric, so result is 1.0\");\n        }\n        push_double(1.0);\n      } else {\n        if (DEBUG_ABS) {\n          console.log(\" abs: symbolic, so result is 1\");\n        }\n        push_integer(1);\n      }\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(POWER) && ispositivenumber(caddr(p1))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is something to the power of a positive number\");\n      }\n      push(cadr(p1));\n      abs();\n      push(caddr(p1));\n      power();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is an exponential\");\n      }\n      push(caddr(p1));\n      real();\n      exponential();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a product\");\n      }\n      anyFactorsYet = false;\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        absval();\n        if (anyFactorsYet) {\n          multiply();\n        }\n        anyFactorsYet = true;\n        p1 = cdr(p1);\n      }\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(ABS)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is abs of a abs\");\n      }\n      push_symbol(ABS);\n      push(cadr(p1));\n      list(2);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n\n    /*\n     * Evaluation via zzfloat()\n     * ...while this is in theory a powerful mechanism, I've commented it\n     * out because I've refined this method enough to not need this.\n     * Evaling via zzfloat() is in principle more problematic because it could\n     * require further evaluations which could end up in further \"abs\" which\n     * would end up in infinite loops. Better not use it if not necessary.\n    \n     * we look directly at the float evaluation of the argument\n     * to see if we end up with a number, which would mean that there\n     * is no imaginary component and we can just return the input\n     * (or its negation) as the result.\n    push p1\n    zzfloat()\n    floatEvaluation = pop()\n    \n    if (isnegativenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a negative\"\n      push(p1)\n      negate()\n      restore()\n      return\n    \n    if (ispositivenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a positive\"\n      push(p1)\n      if DEBUG_ABS then console.log \" --> ABS of \" + input + \" : \" + stack[tos-1]\n      restore()\n      return\n     */\n    if (istensor(p1)) {\n      absval_tensor();\n      restore();\n      return;\n    }\n    if (isnegativeterm(p1) || (car(p1) === symbol(ADD) && isnegativeterm(cadr(p1)))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    if (DEBUG_ABS) {\n      console.log(\" abs: \" + p1 + \" is nothing decomposable\");\n    }\n    push_symbol(ABS);\n    push(p1);\n    list(2);\n    if (DEBUG_ABS) {\n      console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n    }\n    return restore();\n  };\n\n  absval_tensor = function() {\n    if (p1.tensor.ndim !== 1) {\n      stop(\"abs(tensor) with tensor rank > 1\");\n    }\n    push(p1);\n    push(p1);\n    conjugate();\n    inner();\n    push_rational(1, 2);\n    power();\n    simplify();\n    return Eval();\n  };\n\n\n  /*\n   Symbolic addition\n  \n    Terms in a sum are combined if they are identical modulo rational\n    coefficients.\n  \n    For example, A + 2A becomes 3A.\n  \n    However, the sum A + sqrt(2) A is not modified.\n  \n    Combining terms can lead to second-order effects.\n  \n    For example, consider the case of\n  \n      1/sqrt(2) A + 3/sqrt(2) A + sqrt(2) A\n  \n    The first two terms are combined to yield 2 sqrt(2) A.\n  \n    This result can now be combined with the third term to yield\n  \n      3 sqrt(2) A\n   */\n\n  flag = 0;\n\n  Eval_add = function() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p2 = pop();\n      push_terms(p2);\n      p1 = cdr(p1);\n    }\n    return add_terms(tos - h);\n  };\n\n  stackAddsCount = 0;\n\n  add_terms = function(n) {\n    var h, i, i1, j1, o, ref, ref1, results, s, subsetOfStack;\n    stackAddsCount++;\n    i = 0;\n    h = tos - n;\n    s = h;\n    if (DEBUG) {\n      console.log(\"stack before adding terms #\" + stackAddsCount);\n    }\n    if (DEBUG) {\n      for (i = o = 0, ref = tos; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        console.log(print_list(stack[i]));\n      }\n    }\n    for (i = i1 = 0; i1 < 10; i = ++i1) {\n      if (n < 2) {\n        break;\n      }\n      flag = 0;\n      subsetOfStack = stack.slice(h, h + n);\n      subsetOfStack.sort(cmp_terms);\n      stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n      if (flag === 0) {\n        break;\n      }\n      n = combine_terms(h, n);\n    }\n    moveTos(h + n);\n    switch (n) {\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      case 1:\n        break;\n      default:\n        list(n);\n        p1 = pop();\n        push_symbol(ADD);\n        push(p1);\n        cons();\n    }\n    if (DEBUG) {\n      console.log(\"stack after adding terms #\" + stackAddsCount);\n    }\n    if (DEBUG) {\n      results = [];\n      for (i = j1 = 0, ref1 = tos; 0 <= ref1 ? j1 < ref1 : j1 > ref1; i = 0 <= ref1 ? ++j1 : --j1) {\n        results.push(console.log(print_list(stack[i])));\n      }\n      return results;\n    }\n  };\n\n  cmp_terms_count = 0;\n\n  cmp_terms = function(p1, p2) {\n    var i, o, ref, t;\n    cmp_terms_count++;\n    i = 0;\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      flag = 1;\n      return 0;\n    }\n    if (istensor(p1) && istensor(p2)) {\n      if (p1.tensor.ndim < p2.tensor.ndim) {\n        return -1;\n      }\n      if (p1.tensor.ndim > p2.tensor.ndim) {\n        return 1;\n      }\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n          return -1;\n        }\n        if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n          return 1;\n        }\n      }\n      flag = 1;\n      return 0;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      if (isNumericAtom(car(p1))) {\n        p1 = cdr(p1);\n        if (cdr(p1) === symbol(NIL)) {\n          p1 = car(p1);\n        }\n      }\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n      if (isNumericAtom(car(p2))) {\n        p2 = cdr(p2);\n        if (cdr(p2) === symbol(NIL)) {\n          p2 = car(p2);\n        }\n      }\n    }\n    t = cmp_expr(p1, p2);\n    if (t === 0) {\n      flag = 1;\n    }\n    return t;\n  };\n\n\n  /*\n   Compare adjacent terms in s[] and combine if possible.\n  \n    Returns the number of terms remaining in s[].\n  \n    n  number of terms in s[] initially\n   */\n\n  combine_terms = function(s, n) {\n    var i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t;\n    i = 0;\n    while (i < (n - 1)) {\n      check_esc_flag();\n      p3 = stack[s + i];\n      p4 = stack[s + i + 1];\n      if (istensor(p3) && istensor(p4)) {\n        push(p3);\n        push(p4);\n        tensor_plus_tensor();\n        p1 = pop();\n        if (p1 !== symbol(NIL)) {\n          stack[s + i] = p1;\n          for (j = o = ref = i + 1, ref1 = n - 1; ref <= ref1 ? o < ref1 : o > ref1; j = ref <= ref1 ? ++o : --o) {\n            stack[s + j] = stack[s + j + 1];\n          }\n          n--;\n          i--;\n        }\n        i++;\n        continue;\n      }\n      if (istensor(p3) || istensor(p4)) {\n        i++;\n        continue;\n      }\n      if (isNumericAtom(p3) && isNumericAtom(p4)) {\n        push(p3);\n        push(p4);\n        add_numbers();\n        p1 = pop();\n        if (isZeroAtomOrTensor(p1)) {\n          for (j = i1 = ref2 = i, ref3 = n - 2; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; j = ref2 <= ref3 ? ++i1 : --i1) {\n            stack[s + j] = stack[s + j + 2];\n          }\n          n -= 2;\n        } else {\n          stack[s + i] = p1;\n          for (j = j1 = ref4 = i + 1, ref5 = n - 1; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; j = ref4 <= ref5 ? ++j1 : --j1) {\n            stack[s + j] = stack[s + j + 1];\n          }\n          n--;\n        }\n        i--;\n        i++;\n        continue;\n      }\n      if (isNumericAtom(p3) || isNumericAtom(p4)) {\n        i++;\n        continue;\n      }\n      if (evaluatingAsFloats) {\n        p1 = one_as_double;\n        p2 = one_as_double;\n      } else {\n        p1 = one;\n        p2 = one;\n      }\n      t = 0;\n      if (car(p3) === symbol(MULTIPLY)) {\n        p3 = cdr(p3);\n        t = 1;\n        if (isNumericAtom(car(p3))) {\n          p1 = car(p3);\n          p3 = cdr(p3);\n          if (cdr(p3) === symbol(NIL)) {\n            p3 = car(p3);\n            t = 0;\n          }\n        }\n      }\n      if (car(p4) === symbol(MULTIPLY)) {\n        p4 = cdr(p4);\n        if (isNumericAtom(car(p4))) {\n          p2 = car(p4);\n          p4 = cdr(p4);\n          if (cdr(p4) === symbol(NIL)) {\n            p4 = car(p4);\n          }\n        }\n      }\n      if (!equal(p3, p4)) {\n        i++;\n        continue;\n      }\n      push(p1);\n      push(p2);\n      add_numbers();\n      p1 = pop();\n      if (isZeroAtomOrTensor(p1)) {\n        for (j = l1 = ref6 = i, ref7 = n - 2; ref6 <= ref7 ? l1 < ref7 : l1 > ref7; j = ref6 <= ref7 ? ++l1 : --l1) {\n          stack[s + j] = stack[s + j + 2];\n        }\n        n -= 2;\n        i--;\n        i++;\n        continue;\n      }\n      push(p1);\n      if (t) {\n        push(symbol(MULTIPLY));\n        push(p3);\n        cons();\n      } else {\n        push(p3);\n      }\n      multiply();\n      stack[s + i] = pop();\n      for (j = m1 = ref8 = i + 1, ref9 = n - 1; ref8 <= ref9 ? m1 < ref9 : m1 > ref9; j = ref8 <= ref9 ? ++m1 : --m1) {\n        stack[s + j] = stack[s + j + 1];\n      }\n      n--;\n      i--;\n      i++;\n    }\n    return n;\n  };\n\n  push_terms = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else if (!isZeroAtom(p)) {\n      return push(p);\n    }\n  };\n\n  add = function() {\n    var h;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push_terms(p1);\n    push_terms(p2);\n    add_terms(tos - h);\n    return restore();\n  };\n\n  add_all = function(k) {\n    var h, i, o, ref, s;\n    i = 0;\n    save();\n    s = tos - k;\n    h = tos;\n    for (i = o = 0, ref = k; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push_terms(stack[s + i]);\n    }\n    add_terms(tos - h);\n    p1 = pop();\n    moveTos(tos - k);\n    push(p1);\n    return restore();\n  };\n\n  subtract = function() {\n    negate();\n    return add();\n  };\n\n\n  /* adj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Returns the adjunct of matrix m. The inverse of m is equal to adj(m) divided by det(m).\n   */\n\n  Eval_adj = function() {\n    push(cadr(p1));\n    Eval();\n    return adj();\n  };\n\n  adj = function() {\n    var doNothing, i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    if (istensor(p1) && p1.tensor.ndim === 2 && p1.tensor.dim[0] === p1.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"adj: square matrix expected\");\n    }\n    n = p1.tensor.dim[0];\n    p2 = alloc_tensor(n * n);\n    p2.tensor.ndim = 2;\n    p2.tensor.dim[0] = n;\n    p2.tensor.dim[1] = n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        cofactor(p1, n, i, j);\n        p2.tensor.elem[n * j + i] = pop();\n      }\n    }\n    push(p2);\n    return restore();\n  };\n\n\n  /*\n   Guesses a rational for each float in the passed expression\n   */\n\n  Eval_approxratio = function() {\n    var theArgument;\n    theArgument = cadr(p1);\n    push(theArgument);\n    return approxratioRecursive();\n  };\n\n  approxratioRecursive = function() {\n    var i, i1, o, ref, ref1;\n    i = 0;\n    save();\n    p1 = pop();\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n        approxratioRecursive();\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n      push(p4);\n    } else if (p1.k === DOUBLE) {\n      push(p1);\n      approxOneRatioOnly();\n    } else if (iscons(p1)) {\n      push(car(p1));\n      approxratioRecursive();\n      push(cdr(p1));\n      approxratioRecursive();\n      cons();\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  approxOneRatioOnly = function() {\n    var numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot, supposedlyTheFloat, theFloat, theRatio;\n    zzfloat();\n    supposedlyTheFloat = pop();\n    if (supposedlyTheFloat.k === DOUBLE) {\n      theFloat = supposedlyTheFloat.d;\n      splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n      if (splitBeforeAndAfterDot.length === 2) {\n        numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n        precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n        theRatio = floatToRatioRoutine(theFloat, precision);\n        push_rational(theRatio[0], theRatio[1]);\n      } else {\n        push_integer(theFloat);\n      }\n      return;\n    }\n    push_symbol(APPROXRATIO);\n    push(theArgument);\n    return list(2);\n  };\n\n  floatToRatioRoutine = function(decimal, AccuracyFactor) {\n    var DecimalSign, FractionDenominator, FractionNumerator, PreviousDenominator, ScratchValue, Z, ret;\n    FractionNumerator = void 0;\n    FractionDenominator = void 0;\n    DecimalSign = void 0;\n    Z = void 0;\n    PreviousDenominator = void 0;\n    ScratchValue = void 0;\n    ret = [0, 0];\n    if (isNaN(decimal)) {\n      return ret;\n    }\n    if (decimal === 2e308) {\n      ret[0] = 1;\n      ret[1] = 0;\n      return ret;\n    }\n    if (decimal === -2e308) {\n      ret[0] = -1;\n      ret[1] = 0;\n      return ret;\n    }\n    if (decimal < 0.0) {\n      DecimalSign = -1.0;\n    } else {\n      DecimalSign = 1.0;\n    }\n    decimal = Math.abs(decimal);\n    if (Math.abs(decimal - Math.floor(decimal)) < AccuracyFactor) {\n      FractionNumerator = decimal * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    if (decimal < 1.0e-19) {\n      FractionNumerator = DecimalSign;\n      FractionDenominator = 9999999999999999999.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    if (decimal > 1.0e19) {\n      FractionNumerator = 9999999999999999999.0 * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    Z = decimal;\n    PreviousDenominator = 0.0;\n    FractionDenominator = 1.0;\n    while (true) {\n      Z = 1.0 / (Z - Math.floor(Z));\n      ScratchValue = FractionDenominator;\n      FractionDenominator = FractionDenominator * Math.floor(Z) + PreviousDenominator;\n      PreviousDenominator = ScratchValue;\n      FractionNumerator = Math.floor(decimal * FractionDenominator + 0.5);\n      if (!(Math.abs(decimal - (FractionNumerator / FractionDenominator)) > AccuracyFactor && Z !== Math.floor(Z))) {\n        break;\n      }\n    }\n    FractionNumerator = DecimalSign * FractionNumerator;\n    ret[0] = FractionNumerator;\n    ret[1] = FractionDenominator;\n    return ret;\n  };\n\n  approx_just_an_integer = 0;\n\n  approx_sine_of_rational = 1;\n\n  approx_sine_of_pi_times_rational = 2;\n\n  approx_rationalOfPi = 3;\n\n  approx_radicalOfRatio = 4;\n\n  approx_nothingUseful = 5;\n\n  approx_ratioOfRadical = 6;\n\n  approx_rationalOfE = 7;\n\n  approx_logarithmsOfRationals = 8;\n\n  approx_rationalsOfLogarithms = 9;\n\n  approxRationalsOfRadicals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      for (j = i1 = 1; i1 <= 10; j = ++i1) {\n        hypothesis = Math.sqrt(i) / j;\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sqrt( \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_ratioOfRadical, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRadicalsOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, len1, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, ref1, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [1, 2, 3, 5, 6, 7, 8, 10];\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [1, 2, 3, 5, 6, 7, 8, 10];\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n        hypothesis = Math.sqrt(i / j);\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (sqrt( \" + i + \" / \" + j + \" )\";\n            bestResultSoFar = [result, approx_radicalOfRatio, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRadicals = function(theFloat) {\n    var approxRadicalsOfRationalsResult, approxRationalsOfRadicalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    approxRationalsOfRadicalsResult = approxRationalsOfRadicals(theFloat);\n    if (approxRationalsOfRadicalsResult != null) {\n      return approxRationalsOfRadicalsResult;\n    }\n    approxRadicalsOfRationalsResult = approxRadicalsOfRationals(theFloat);\n    if (approxRadicalsOfRationalsResult != null) {\n      return approxRadicalsOfRationalsResult;\n    }\n    return null;\n  };\n\n  approxLogs = function(theFloat) {\n    var approxLogsOfRationalsResult, approxRationalsOfLogsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    approxRationalsOfLogsResult = approxRationalsOfLogs(theFloat);\n    if (approxRationalsOfLogsResult != null) {\n      return approxRationalsOfLogsResult;\n    }\n    approxLogsOfRationalsResult = approxLogsOfRationals(theFloat);\n    if (approxLogsOfRationalsResult != null) {\n      return approxLogsOfRationalsResult;\n    }\n    return null;\n  };\n\n  approxRationalsOfLogs = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 2; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        hypothesis = Math.log(i) / j;\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (likelyMultiplier !== 1 && Math.abs(Math.floor(likelyMultiplier / j)) === Math.abs(likelyMultiplier / j)) {\n          continue;\n        }\n        if (error < 2.2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_rationalsOfLogarithms, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxLogsOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        hypothesis = Math.log(i / j);\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 1.96 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" / \" + j + \" )\";\n            bestResultSoFar = [result, approx_logarithmsOfRationals, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfE = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 1; o <= 2; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        hypothesis = Math.pow(Math.E, i) / j;\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (e ^ \" + i + \" ) / \" + j;\n            bestResultSoFar = [result, approx_rationalOfE, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfPI = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        hypothesis = Math.pow(Math.PI, i) / j;\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (pi ^ \" + i + \" ) / \" + j + \" )\";\n            bestResultSoFar = [result, approx_rationalOfPi, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxTrigonometric = function(theFloat) {\n    var approxSineOfRationalMultiplesOfPIResult, approxSineOfRationalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    approxSineOfRationalsResult = approxSineOfRationals(theFloat);\n    if (approxSineOfRationalsResult != null) {\n      return approxSineOfRationalsResult;\n    }\n    approxSineOfRationalMultiplesOfPIResult = approxSineOfRationalMultiplesOfPI(theFloat);\n    if (approxSineOfRationalMultiplesOfPIResult != null) {\n      return approxSineOfRationalMultiplesOfPIResult;\n    }\n    return null;\n  };\n\n  approxSineOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 1; o <= 4; i = ++o) {\n      for (j = i1 = 1; i1 <= 4; j = ++i1) {\n        fraction = i / j;\n        hypothesis = Math.sin(fraction);\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" )\";\n            bestResultSoFar = [result, approx_sine_of_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxSineOfRationalMultiplesOfPI = function(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    for (i = o = 1; o <= 13; i = ++o) {\n      for (j = i1 = 1; i1 <= 13; j = ++i1) {\n        fraction = i / j;\n        hypothesis = Math.sin(Math.PI * fraction);\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        if (error < 23 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" * pi )\";\n            bestResultSoFar = [result, approx_sine_of_pi_times_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxAll = function(theFloat) {\n    var LOG_EXPLANATIONS, approxLogsResult, approxRadicalsResult, approxRationalsOfPowersOfEResult, approxRationalsOfPowersOfPIResult, approxTrigonometricResult, bestApproxSoFar, constantsSum, constantsSumMin, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    constantsSumMin = Number.MAX_VALUE;\n    constantsSum = 0;\n    bestApproxSoFar = null;\n    LOG_EXPLANATIONS = true;\n    approxRadicalsResult = approxRadicals(theFloat);\n    if (approxRadicalsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRadicalsResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRadicalsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxLogsResult = approxLogs(theFloat);\n    if (approxLogsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxLogsResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxLogsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxRationalsOfPowersOfEResult = approxRationalsOfPowersOfE(theFloat);\n    if (approxRationalsOfPowersOfEResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfEResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfEResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxRationalsOfPowersOfPIResult = approxRationalsOfPowersOfPI(theFloat);\n    if (approxRationalsOfPowersOfPIResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfPIResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfPIResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxTrigonometricResult = approxTrigonometric(theFloat);\n    if (approxTrigonometricResult != null) {\n      constantsSum = simpleComplexityMeasure(approxTrigonometricResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxTrigonometricResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    return bestApproxSoFar;\n  };\n\n  simpleComplexityMeasure = function(aResult, b, c) {\n    var theSum;\n    theSum = null;\n    if (aResult instanceof Array) {\n      switch (aResult[1]) {\n        case approx_sine_of_pi_times_rational:\n          theSum = 4;\n          break;\n        case approx_rationalOfPi:\n          theSum = Math.pow(4, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n        case approx_rationalOfE:\n          theSum = Math.pow(3, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n        default:\n          theSum = 0;\n      }\n      theSum += Math.abs(aResult[2]) * (Math.abs(aResult[3]) + Math.abs(aResult[4]));\n    } else {\n      theSum += Math.abs(aResult) * (Math.abs(b) + Math.abs(c));\n    }\n    if (aResult[2] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (aResult[3] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (aResult[4] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (theSum < 0) {\n      theSum = 0;\n    }\n    return theSum;\n  };\n\n  testApprox = function() {\n    var error, fraction, i, i1, i2, i3, j, j1, j2, j3, k3, l1, l2, l3, len, len1, len2, len3, len4, len5, len6, len7, m1, m2, m3, n1, n2, o, o1, o2, originalValue, q1, q2, r1, r2, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, returned, returnedFraction, returnedValue, s1, s2, t1, t2, u1, u2, v1, v2, value, x1, x2, z1, z2;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [2, 3, 5, 6, 7, 8, 10];\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n        if (i === j) {\n          continue;\n        }\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.sqrt(i) / j;\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    ref2 = [2, 3, 5, 6, 7, 8, 10];\n    for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {\n      i = ref2[j1];\n      ref3 = [2, 3, 5, 6, 7, 8, 10];\n      for (l1 = 0, len3 = ref3.length; l1 < len3; l1++) {\n        j = ref3[l1];\n        if (i === j) {\n          continue;\n        }\n        console.log(\"testapproxRadicals testing with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.sqrt(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    ref4 = [2, 3, 5, 6, 7, 8, 10];\n    for (m1 = 0, len4 = ref4.length; m1 < len4; m1++) {\n      i = ref4[m1];\n      ref5 = [2, 3, 5, 6, 7, 8, 10];\n      for (n1 = 0, len5 = ref5.length; n1 < len5; n1++) {\n        j = ref5[n1];\n        if (i === j) {\n          continue;\n        }\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.sqrt(i / j);\n        returned = approxRadicals(value);\n        if (returned != null) {\n          returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n          if (returned[1] === approx_radicalOfRatio && Math.abs(value - returnedValue) > 1e-15) {\n            console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n          }\n        }\n      }\n    }\n    ref6 = [1, 2, 3, 5, 6, 7, 8, 10];\n    for (o1 = 0, len6 = ref6.length; o1 < len6; o1++) {\n      i = ref6[o1];\n      ref7 = [1, 2, 3, 5, 6, 7, 8, 10];\n      for (q1 = 0, len7 = ref7.length; q1 < len7; q1++) {\n        j = ref7[q1];\n        if (i === 1 && j === 1) {\n          continue;\n        }\n        console.log(\"testapproxRadicals testing with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sqrt(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n        if (returned[1] === approx_radicalOfRatio && Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = r1 = 1; r1 <= 5; i = ++r1) {\n      for (j = s1 = 1; s1 <= 5; j = ++s1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.log(i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = t1 = 1; t1 <= 5; i = ++t1) {\n      for (j = u1 = 1; u1 <= 5; j = ++u1) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.log(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = v1 = 1; v1 <= 5; i = ++v1) {\n      for (j = x1 = 1; x1 <= 5; j = ++x1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.log(i / j);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = z1 = 1; z1 <= 5; i = ++z1) {\n      for (j = i2 = 1; i2 <= 5; j = ++i2) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.log(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = j2 = 1; j2 <= 2; i = ++j2) {\n      for (j = l2 = 1; l2 <= 12; j = ++l2) {\n        console.log(\"testApproxAll testing: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.E, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = m2 = 1; m2 <= 2; i = ++m2) {\n      for (j = n2 = 1; n2 <= 12; j = ++n2) {\n        console.log(\"approxRationalsOfPowersOfE testing with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.E, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfE(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfE with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = o2 = 1; o2 <= 2; i = ++o2) {\n      for (j = q2 = 1; q2 <= 12; j = ++q2) {\n        console.log(\"testApproxAll testing: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.PI, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = r2 = 1; r2 <= 2; i = ++r2) {\n      for (j = s2 = 1; s2 <= 12; j = ++s2) {\n        console.log(\"approxRationalsOfPowersOfPI testing with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.PI, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfPI(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfPI with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = t2 = 1; t2 <= 4; i = ++t2) {\n      for (j = u2 = 1; u2 <= 4; j = ++u2) {\n        console.log(\"testApproxAll testing: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        value = Math.sin(fraction);\n        returned = approxAll(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = v2 = 1; v2 <= 4; i = ++v2) {\n      for (j = x2 = 1; x2 <= 4; j = ++x2) {\n        console.log(\"testApproxAll testing with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(5);\n        returned = approxAll(value);\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n    for (i = z2 = 1; z2 <= 4; i = ++z2) {\n      for (j = i3 = 1; i3 <= 4; j = ++i3) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n    value = 0;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0\");\n    }\n    value = 0.0;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0\");\n    }\n    value = 0.00;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.00\");\n    }\n    value = 0.000;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.000\");\n    }\n    value = 0.0000;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0000\");\n    }\n    value = 1;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1\");\n    }\n    value = 1.0;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0\");\n    }\n    value = 1.00;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00\");\n    }\n    value = 1.000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.000\");\n    }\n    value = 1.0000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n    value = 1.00000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00000\");\n    }\n    value = Math.sqrt(2);\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2)\");\n    }\n    value = 1.41;\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: 1.41\");\n    }\n    value = 1.4;\n    if (approxRadicals(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail approxRadicals: 1.4\");\n    }\n    value = 0.6;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.6\");\n    }\n    value = 0.69;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.69\");\n    }\n    value = 0.7;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.7\");\n    }\n    value = 1.09;\n    if (approxLogs(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxLogs: 1.09\");\n    }\n    value = 1.09;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.09\");\n    }\n    value = 1.098;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.098\");\n    }\n    value = 1.1;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.1\");\n    }\n    value = 1.11;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.11\");\n    }\n    value = Math.sqrt(3);\n    if (approxAll(value)[0] !== \"1 * sqrt( 3 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(3)\");\n    }\n    value = 1.0000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n    value = 3.141592;\n    if (approxAll(value)[0] !== \"1 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 3.141592\");\n    }\n    value = 31.41592;\n    if (approxAll(value)[0] !== \"10 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31.41592\");\n    }\n    value = 314.1592;\n    if (approxAll(value)[0] !== \"100 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 314.1592\");\n    }\n    value = 31415926.53589793;\n    if (approxAll(value)[0] !== \"10000000 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31415926.53589793\");\n    }\n    value = Math.sqrt(2);\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/4 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(2)\");\n    }\n    value = Math.sqrt(3);\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/3 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(3)\");\n    }\n    value = (Math.sqrt(6) - Math.sqrt(2)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4\");\n    }\n    value = Math.sqrt(2 - Math.sqrt(2)) / 2;\n    if (approxAll(value)[0] !== \"1 * sin( 1/8 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2\");\n    }\n    value = (Math.sqrt(6) + Math.sqrt(2)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4\");\n    }\n    value = Math.sqrt(2 + Math.sqrt(3)) / 2;\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2\");\n    }\n    value = (Math.sqrt(5) - 1) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/10 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(5) - 1)/4\");\n    }\n    value = Math.sqrt(10 - 2 * Math.sqrt(5)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/5 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4\");\n    }\n    value = Math.sin(Math.PI / 7);\n    if (approxAll(value)[0] !== \"1 * sin( 1/7 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/7)\");\n    }\n    value = Math.sin(Math.PI / 9);\n    if (approxAll(value)[0] !== \"1 * sin( 1/9 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/9)\");\n    }\n    value = 1836.15267;\n    if (approxRationalsOfPowersOfPI(value)[0] !== \"6 * (pi ^ 5 ) / 1 )\") {\n      console.log(\"fail approxRationalsOfPowersOfPI: 1836.15267\");\n    }\n    for (i = j3 = 1; j3 <= 13; i = ++j3) {\n      for (j = k3 = 1; k3 <= 13; j = ++k3) {\n        console.log(\"approxTrigonometric testing: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        value = Math.sin(Math.PI * fraction);\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail approxTrigonometric: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = l3 = 1; l3 <= 13; i = ++l3) {\n      for (j = m3 = 1; m3 <= 13; j = ++m3) {\n        if (i === 5 && j === 11 || i === 6 && j === 11) {\n          continue;\n        }\n        console.log(\"approxTrigonometric testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        originalValue = Math.sin(Math.PI * fraction);\n        value = originalValue.toFixed(4);\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail approxTrigonometric with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n    return console.log(\"testApprox done\");\n  };\n\n  $.approxRadicals = approxRadicals;\n\n  $.approxRationalsOfLogs = approxRationalsOfLogs;\n\n  $.approxAll = approxAll;\n\n  $.testApprox = testApprox;\n\n\n  /* arccos =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse cosine of x.\n   */\n\n  Eval_arccos = function() {\n    push(cadr(p1));\n    Eval();\n    return arccos();\n  };\n\n  arccos = function() {\n    var d, errno, n;\n    n = 0;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.acos(p1.d);\n      if (errno) {\n        stop(\"arccos function argument is not in the interval [-1,1]\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    if ((isoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 4.0);\n      } else {\n        push_rational(1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    if ((isminusoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI * 3.0 / 4.0);\n      } else {\n        push_rational(3, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    if (!isrational(p1)) {\n      push_symbol(ARCCOS);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push_symbol(PI);\n        }\n        break;\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI * 2.0 / 3.0);\n        } else {\n          push_rational(2, 3);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 3.0);\n        } else {\n          push_rational(1, 3);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      default:\n        push_symbol(ARCCOS);\n        push(p1);\n        list(2);\n    }\n    return restore();\n  };\n\n\n  /* arccosh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic cosine of x.\n   */\n\n  Eval_arccosh = function() {\n    push(cadr(p1));\n    Eval();\n    return arccosh();\n  };\n\n  arccosh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COSH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      if (d < 1.0) {\n        stop(\"arccosh function argument is less than 1.0\");\n      }\n      d = Math.log(d + Math.sqrt(d * d - 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isplusone(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCCOSH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n\n  /* arcsin =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse sine of x.\n   */\n\n  Eval_arcsin = function() {\n    push(cadr(p1));\n    Eval();\n    return arcsin();\n  };\n\n  arcsin = function() {\n    var d, errno, n;\n    n = 0;\n    d = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.asin(p1.d);\n      if (errno) {\n        stop(\"arcsin function argument is not in the interval [-1,1]\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    if ((isoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      push_rational(1, 4);\n      push_symbol(PI);\n      multiply();\n      restore();\n      return;\n    }\n    if ((isminusoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 4.0);\n      } else {\n        push_rational(-1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    if (!isrational(p1)) {\n      push_symbol(ARCSIN);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 2.0);\n        } else {\n          push_rational(-1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 6.0);\n        } else {\n          push_rational(-1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 6.0);\n        } else {\n          push_rational(1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      default:\n        push_symbol(ARCSIN);\n        push(p1);\n        list(2);\n    }\n    return restore();\n  };\n\n\n  /* arcsinh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic sine of x.\n   */\n\n  Eval_arcsinh = function() {\n    push(cadr(p1));\n    Eval();\n    return arcsinh();\n  };\n\n  arcsinh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(SINH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      d = Math.log(d + Math.sqrt(d * d + 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCSINH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n\n  /* arctan =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse tangent of x.\n   */\n\n  Eval_arctan = function() {\n    push(cadr(p1));\n    Eval();\n    return arctan();\n  };\n\n  arctan = function() {\n    var d, errno;\n    d = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(TAN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.atan(p1.d);\n      if (errno) {\n        stop(\"arctan function error\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      arctan();\n      negate();\n      restore();\n      return;\n    }\n    if (Find(p1, symbol(SIN)) && Find(p1, symbol(COS))) {\n      push(p1);\n      numerator();\n      p2 = pop();\n      push(p1);\n      denominator();\n      p3 = pop();\n      if (car(p2) === symbol(SIN) && car(p3) === symbol(COS) && equal(cadr(p2), cadr(p3))) {\n        push(cadr(p2));\n        restore();\n        return;\n      }\n    }\n    if ((car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), -1, 2)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 3) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 3) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      push_rational(1, 6);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    if (equaln(p1, 1)) {\n      push_rational(1, 4);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), 1, 2)) {\n      push_rational(1, 3);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    push_symbol(ARCTAN);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n\n  /* arctanh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the inverse hyperbolic tangent of x.\n   */\n\n  Eval_arctanh = function() {\n    push(cadr(p1));\n    Eval();\n    return arctanh();\n  };\n\n  arctanh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(TANH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      if (d < -1.0 || d > 1.0) {\n        stop(\"arctanh function argument is not in the interval [-1,1]\");\n      }\n      d = Math.log((1.0 + d) / (1.0 - d)) / 2.0;\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCTANH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n\n  /* arg =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  z\n  \n  General description\n  -------------------\n  Returns the angle of complex z.\n   */\n\n\n  /*\n   Argument (angle) of complex z\n  \n    z    arg(z)\n    -    ------\n  \n    a    0\n  \n    -a    -pi      See note 3 below\n  \n    (-1)^a    a pi\n  \n    exp(a + i b)  b\n  \n    a b    arg(a) + arg(b)\n  \n    a + i b    arctan(b/a)\n  \n  Result by quadrant\n  \n    z    arg(z)\n    -    ------\n  \n    1 + i    1/4 pi\n  \n    1 - i    -1/4 pi\n  \n    -1 + i    3/4 pi\n  \n    -1 - i    -3/4 pi\n  \n  Notes\n  \n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n  \n    2. Symbols in z are assumed to be positive and real.\n  \n    3. Negative direction adds -pi to angle.\n  \n       Example: z = (-1)^(1/3), abs(z) = 1/3 pi, abs(-z) = -2/3 pi\n  \n    4. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n  \n      arg(numerator(z)) - arg(denominator(z))\n  \n       must be used to get the correct answer. Now the operation is\n       automatic.\n   */\n\n  DEBUG_ARG = false;\n\n  Eval_arg = function() {\n    push(cadr(p1));\n    Eval();\n    return arg();\n  };\n\n  arg = function() {\n    save();\n    p1 = pop();\n    push(p1);\n    numerator();\n    yyarg();\n    push(p1);\n    denominator();\n    yyarg();\n    subtract();\n    return restore();\n  };\n\n  yyarg = function() {\n    save();\n    p1 = pop();\n    if (ispositivenumber(p1) || p1 === symbol(PI)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(0);\n      } else {\n        push_integer(0);\n      }\n    } else if (isnegativenumber(p1)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      negate();\n    } else if (issymbol(p1)) {\n      push_symbol(ARG);\n      push(p1);\n      list(2);\n    } else if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      push(caddr(p1));\n      imag();\n    } else if (car(p1) === symbol(POWER) && isoneovertwo(caddr(p1))) {\n      if (DEBUG_ARG) {\n        console.log(\"arg of a sqrt: \" + p1);\n      }\n      if (DEBUG_ARG) {\n        debugger;\n      }\n      push(cadr(p1));\n      arg();\n      if (DEBUG_ARG) {\n        console.log(\" = 1/2 * \" + stack[tos - 1]);\n      }\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        arg();\n        add();\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n      rect();\n      p1 = pop();\n      push(p1);\n      real();\n      p2 = pop();\n      push(p1);\n      imag();\n      p3 = pop();\n      if (isZeroAtomOrTensor(p2)) {\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n        if (isnegative(p3)) {\n          negate();\n        }\n      } else {\n        push(p3);\n        push(p2);\n        divide();\n        arctan();\n        if (isnegative(p2)) {\n          if (evaluatingAsFloats) {\n            push_double(Math.PI);\n          } else {\n            push_symbol(PI);\n          }\n          if (isnegative(p3)) {\n            subtract();\n          } else {\n            add();\n          }\n        }\n      }\n    } else {\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push_integer(0);\n      } else {\n        push_symbol(ARG);\n        push(p1);\n        list(2);\n      }\n    }\n    return restore();\n  };\n\n  bake = function() {\n    var h, s, t, x, y, z;\n    h = 0;\n    s = 0;\n    t = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    expanding++;\n    save();\n    p1 = pop();\n    s = ispolyexpandedform(p1, symbol(SYMBOL_S));\n    t = ispolyexpandedform(p1, symbol(SYMBOL_T));\n    x = ispolyexpandedform(p1, symbol(SYMBOL_X));\n    y = ispolyexpandedform(p1, symbol(SYMBOL_Y));\n    z = ispolyexpandedform(p1, symbol(SYMBOL_Z));\n    if (s === 1 && t === 0 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_S);\n      bake_poly();\n    } else if (s === 0 && t === 1 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_T);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 1 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_X);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 1 && z === 0) {\n      p2 = symbol(SYMBOL_Y);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 0 && z === 1) {\n      p2 = symbol(SYMBOL_Z);\n      bake_poly();\n    } else if ((iscons(p1)) && car(p1) !== symbol(FOR)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        bake();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    restore();\n    return expanding--;\n  };\n\n  polyform = function() {\n    var h;\n    h = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (ispolyexpandedform(p1, p2)) {\n      bake_poly();\n    } else if (iscons(p1)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        polyform();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  bake_poly = function() {\n    var a, h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    a = tos;\n    push(p1);\n    push(p2);\n    k = coeff();\n    h = tos;\n    for (i = o = ref = k - 1; o >= 0; i = o += -1) {\n      p1 = stack[a + i];\n      bake_poly_term(i);\n    }\n    n = tos - h;\n    if (n > 1) {\n      list(n);\n      push(symbol(ADD));\n      swap();\n      cons();\n    }\n    p1 = pop();\n    moveTos(tos - k);\n    return push(p1);\n  };\n\n  bake_poly_term = function(k) {\n    var h, n;\n    h = 0;\n    n = 0;\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n    if (k === 0) {\n      if (car(p1) === symbol(ADD)) {\n        p1 = cdr(p1);\n        while (iscons(p1)) {\n          push(car(p1));\n          p1 = cdr(p1);\n        }\n      } else {\n        push(p1);\n      }\n      return;\n    }\n    h = tos;\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else if (!equaln(p1, 1)) {\n      push(p1);\n    }\n    if (k === 1) {\n      push(p2);\n    } else {\n      push(symbol(POWER));\n      push(p2);\n      push_integer(k);\n      list(3);\n    }\n    n = tos - h;\n    if (n > 1) {\n      list(n);\n      push(symbol(MULTIPLY));\n      swap();\n      return cons();\n    }\n  };\n\n\n  /* besselj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x,n\n  \n  General description\n  -------------------\n  \n  Returns a solution to the Bessel differential equation (Bessel function of first kind).\n  \n  Recurrence relation:\n  \n    besselj(x,n) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n-2)\n  \n    besselj(x,1/2) = sqrt(2/pi/x) sin(x)\n  \n    besselj(x,-1/2) = sqrt(2/pi/x) cos(x)\n  \n  For negative n, reorder the recurrence relation as:\n  \n    besselj(x,n-2) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n)\n  \n  Substitute n+2 for n to obtain\n  \n    besselj(x,n) = (2/x) (n+1) besselj(x,n+1) - besselj(x,n+2)\n  \n  Examples:\n  \n    besselj(x,3/2) = (1/x) besselj(x,1/2) - besselj(x,-1/2)\n  \n    besselj(x,-3/2) = -(1/x) besselj(x,-1/2) - besselj(x,1/2)\n   */\n\n  Eval_besselj = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return besselj();\n  };\n\n  besselj = function() {\n    save();\n    yybesselj();\n    return restore();\n  };\n\n  yybesselj = function() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (isdouble(p1) && !isNaN(n)) {\n      d = jn(n, p1.d);\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1) && isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1) && !isNaN(n)) {\n      push_integer(0);\n      return;\n    }\n    if (p2.k === NUM && MEQUAL(p2.q.b, 2)) {\n      if (MEQUAL(p2.q.a, 1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        sine();\n        multiply();\n        return;\n      }\n      if (MEQUAL(p2.q.a, -1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        cosine();\n        multiply();\n        return;\n      }\n      push_integer(MSIGN(p2.q.a));\n      p3 = pop();\n      push_integer(2);\n      push(p1);\n      divide();\n      push(p2);\n      push(p3);\n      subtract();\n      multiply();\n      push(p1);\n      push(p2);\n      push(p3);\n      subtract();\n      besselj();\n      multiply();\n      push(p1);\n      push(p2);\n      push_integer(2);\n      push(p3);\n      multiply();\n      subtract();\n      besselj();\n      subtract();\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      power();\n      push(p1);\n      push(p2);\n      negate();\n      power();\n      multiply();\n      push_symbol(BESSELJ);\n      push(p1);\n      negate();\n      push(p2);\n      list(3);\n      multiply();\n      return;\n    }\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELJ);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n    push(symbol(BESSELJ));\n    push(p1);\n    push(p2);\n    return list(3);\n  };\n\n\n  /* bessely =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x,n\n  \n  General description\n  -------------------\n  \n  Bessel function of second kind.\n   */\n\n  Eval_bessely = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return bessely();\n  };\n\n  bessely = function() {\n    save();\n    yybessely();\n    return restore();\n  };\n\n  yybessely = function() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (isdouble(p1) && !isNaN(n)) {\n      d = yn(n, p1.d);\n      push_double(d);\n      return;\n    }\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELY);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n    push_symbol(BESSELY);\n    push(p1);\n    push(p2);\n    list(3);\n  };\n\n  mint = function(a) {\n    return bigInt(a);\n  };\n\n  isSmall = function(a) {\n    return a.geq(Number.MIN_SAFE_INTEGER) && a.leq(Number.MAX_SAFE_INTEGER);\n  };\n\n  setSignTo = function(a, b) {\n    if (a.isPositive()) {\n      if (b < 0) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      if (b > 0) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n    return a;\n  };\n\n  makeSignSameAs = function(a, b) {\n    if (a.isPositive()) {\n      if (b.isNegative()) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      if (b.isPositive()) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n    return a;\n  };\n\n  makePositive = function(a) {\n    if (a.isNegative()) {\n      return a.multiply(bigInt(-1));\n    }\n    return a;\n  };\n\n\n  /*\n  mtotal = 0\n  MP_MIN_SIZE = 2\n  MP_MAX_FREE  = 1000\n  \n  mnew = (n) ->\n    if (n < MP_MIN_SIZE)\n      n = MP_MIN_SIZE\n    if (n == MP_MIN_SIZE && mfreecount)\n      p = free_stack[--mfreecount]\n    else\n      p = [] #(unsigned int *) malloc((n + 3) * sizeof (int))\n      #if (p == 0)\n       *  stop(\"malloc failure\")\n    p[0] = n\n    mtotal += n\n    return p[3]\n   */\n\n\n  /*\n  free_stack = []\n  \n  mfree = (array, p) ->\n    p -= 3\n    mtotal -= array[p]\n    if (array[p] == MP_MIN_SIZE && mfreecount < MP_MAX_FREE)\n      free_stack[mfreecount++] = p\n    else\n      free(p)\n   */\n\n\n  /*\n  mint = (n) ->\n    p = mnew(1)\n    if (n < 0)\n       * !!! this is FU\n       * MSIGN(p) = -1\n      fu = true\n    else\n       * !!! this is FU\n      #MSIGN(p) = 1\n      fu = true\n     * !!! this is FU\n    #MLENGTH(p) = 1\n    p[0] = Math.abs(n)\n    return p\n   */\n\n\n  /*\n  mcopy = (a) ->\n    #unsigned int *b\n  \n    b = mnew(MLENGTH(a))\n  \n     * !!! fu\n    #MSIGN(b) = MSIGN(a)\n    #MLENGTH(b) = MLENGTH(a)\n  \n    for i in [0...MLENGTH(a)]\n      b[i] = a[i]\n  \n    return b\n   */\n\n\n  /*\n   * \n   * ge not invoked from anywhere - is you need ge\n   * just use the bigNum's ge implementation\n   * leaving it here just in case I decide to backport to C\n   *\n   * a >= b ?\n   * and and b arrays of ints, len is an int\n  ge = (a, b, len) ->\n    i = 0\n    for i in [0...len]\n      if (a[i] == b[i])\n        continue\n      else\n        break\n    if (a[i] >= b[i])\n      return 1\n    else\n      return 0\n   */\n\n  add_numbers = function() {\n    var a, b, theResult;\n    a = 1.0;\n    b = 1.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qadd();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    theResult = a + b;\n    push_double(theResult);\n    return restore();\n  };\n\n  subtract_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qsub();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a - b);\n    return restore();\n  };\n\n  multiply_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qmul();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a * b);\n    return restore();\n  };\n\n  divide_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qdiv();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"divide by zero\");\n    }\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a / b);\n    return restore();\n  };\n\n  invert_number = function() {\n    var a, b;\n    save();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p1)) {\n      stop(\"divide by zero\");\n    }\n    if (isdouble(p1)) {\n      push_double(1 / p1.d);\n      restore();\n      return;\n    }\n    a = bigInt(p1.q.a);\n    b = bigInt(p1.q.b);\n    b = makeSignSameAs(b, a);\n    a = setSignTo(a, 1);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = b;\n    p1.q.b = a;\n    push(p1);\n    return restore();\n  };\n\n  compare_rationals = function(a, b) {\n    var ab, ba, t;\n    t = 0;\n    ab = mmul(a.q.a, b.q.b);\n    ba = mmul(a.q.b, b.q.a);\n    t = mcmp(ab, ba);\n    return t;\n  };\n\n  compare_numbers = function(a, b) {\n    var x, y;\n    x = 0.0;\n    y = 0.0;\n    if (isrational(a) && isrational(b)) {\n      return compare_rationals(a, b);\n    }\n    if (isdouble(a)) {\n      x = a.d;\n    } else {\n      x = convert_rational_to_double(a);\n    }\n    if (isdouble(b)) {\n      y = b.d;\n    } else {\n      y = convert_rational_to_double(b);\n    }\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n  negate_number = function() {\n    save();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    switch (p1.k) {\n      case NUM:\n        p2 = new U();\n        p2.k = NUM;\n        p2.q.a = bigInt(p1.q.a.multiply(bigInt.minusOne));\n        p2.q.b = bigInt(p1.q.b);\n        push(p2);\n        break;\n      case DOUBLE:\n        push_double(-p1.d);\n        break;\n      default:\n        stop(\"bug caught in mp_negate_number\");\n    }\n    return restore();\n  };\n\n  bignum_truncate = function() {\n    var a;\n    save();\n    p1 = pop();\n    a = mdiv(p1.q.a, p1.q.b);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  mp_numerator = function() {\n    save();\n    p1 = pop();\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.a);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  mp_denominator = function() {\n    save();\n    p1 = pop();\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.b);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  bignum_power_number = function(expo) {\n    var a, b, t;\n    save();\n    p1 = pop();\n    a = mpow(p1.q.a, Math.abs(expo));\n    b = mpow(p1.q.b, Math.abs(expo));\n    if (expo < 0) {\n      t = a;\n      a = b;\n      b = t;\n      a = makeSignSameAs(a, b);\n      b = setSignTo(b, 1);\n    }\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = b;\n    push(p1);\n    return restore();\n  };\n\n  convert_bignum_to_double = function(p) {\n    return p.toJSNumber();\n  };\n\n  convert_rational_to_double = function(p) {\n    var quotientAndRemainder, result;\n    if (p.q == null) {\n      debugger;\n    }\n    quotientAndRemainder = p.q.a.divmod(p.q.b);\n    result = quotientAndRemainder.quotient + quotientAndRemainder.remainder / p.q.b.toJSNumber();\n    return result;\n  };\n\n  push_integer = function(n) {\n    if (DEBUG) {\n      console.log(\"pushing integer \" + n);\n    }\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = bigInt(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  push_double = function(d) {\n    save();\n    p1 = new U();\n    p1.k = DOUBLE;\n    p1.d = d;\n    push(p1);\n    return restore();\n  };\n\n  push_rational = function(a, b) {\n\n    /*\n    save()\n    p1 = new U()\n    p1.k = NUM\n    p1.q.a = bigInt(a)\n    p1.q.b = bigInt(b)\n    ## FIXME -- normalize ##\n    push(p1)\n    restore()\n     */\n    var p;\n    p = new U();\n    p.k = NUM;\n    p.q.a = bigInt(a);\n    p.q.b = bigInt(b);\n    return push(p);\n  };\n\n  pop_integer = function() {\n    var n;\n    n = 0/0;\n    save();\n    p1 = pop();\n    switch (p1.k) {\n      case NUM:\n        if (isinteger(p1) && isSmall(p1.q.a)) {\n          n = p1.q.a.toJSNumber();\n        }\n        break;\n      case DOUBLE:\n        if (DEBUG) {\n          console.log(\"popping integer but double is found\");\n        }\n        if (Math.floor(p1.d) === p1.d) {\n          if (DEBUG) {\n            console.log(\"...altough it's an integer\");\n          }\n          n = p1.d;\n        }\n    }\n    restore();\n    return n;\n  };\n\n  print_double = function(p, flag) {\n    var accumulator, buf;\n    accumulator = \"\";\n    buf = doubleToReasonableString(p.d);\n    if (flag === 1 && buf === '-') {\n      accumulator += print_str(buf + 1);\n    } else {\n      accumulator += print_str(buf);\n    }\n    return accumulator;\n  };\n\n  bignum_scan_integer = function(s) {\n    var a, scounter, sign_;\n    save();\n    scounter = 0;\n    sign_ = s[scounter];\n    if (sign_ === '+' || sign_ === '-') {\n      scounter++;\n    }\n    a = bigInt(s.substring(scounter));\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    if (sign_ === '-') {\n      negate();\n    }\n    return restore();\n  };\n\n  bignum_scan_float = function(s) {\n    return push_double(parseFloat(s));\n  };\n\n  print_number = function(p, signed) {\n    var aAsString, accumulator, buf, denominatorString;\n    accumulator = \"\";\n    denominatorString = \"\";\n    buf = \"\";\n    switch (p.k) {\n      case NUM:\n        aAsString = p.q.a.toString();\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n        if (printMode === PRINTMODE_LATEX && isfraction(p)) {\n          aAsString = \"\\\\frac{\" + aAsString + \"}{\";\n        }\n        accumulator += aAsString;\n        if (isfraction(p)) {\n          if (printMode !== PRINTMODE_LATEX) {\n            accumulator += \"/\";\n          }\n          denominatorString = p.q.b.toString();\n          if (printMode === PRINTMODE_LATEX) {\n            denominatorString += \"}\";\n          }\n          accumulator += denominatorString;\n        }\n        break;\n      case DOUBLE:\n        aAsString = doubleToReasonableString(p.d);\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n        accumulator += aAsString;\n    }\n    return accumulator;\n  };\n\n  gcd_numbers = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mgcd(p1.q.a, p2.q.a);\n    p3.q.b = mgcd(p1.q.b, p2.q.b);\n    p3.q.a = setSignTo(p3.q.a, 1);\n    push(p3);\n    return restore();\n  };\n\n  pop_double = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    switch (p1.k) {\n      case NUM:\n        d = convert_rational_to_double(p1);\n        break;\n      case DOUBLE:\n        d = p1.d;\n        break;\n      default:\n        d = 0.0;\n    }\n    restore();\n    return d;\n  };\n\n  bignum_float = function() {\n    var d;\n    d = 0.0;\n    d = convert_rational_to_double(pop());\n    return push_double(d);\n  };\n\n  bignum_factorial = function(n) {\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = __factorial(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  __factorial = function(n) {\n    var a, b, i, o, ref, t;\n    i = 0;\n    if (n === 0 || n === 1) {\n      a = bigInt(1);\n      return a;\n    }\n    a = bigInt(2);\n    b = bigInt(0);\n    if (3 <= n) {\n      for (i = o = 3, ref = n; 3 <= ref ? o <= ref : o >= ref; i = 3 <= ref ? ++o : --o) {\n        b = bigInt(i);\n        t = mmul(a, b);\n        a = t;\n      }\n    }\n    return a;\n  };\n\n  mask = [0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020, 0x00000040, 0x00000080, 0x00000100, 0x00000200, 0x00000400, 0x00000800, 0x00001000, 0x00002000, 0x00004000, 0x00008000, 0x00010000, 0x00020000, 0x00040000, 0x00080000, 0x00100000, 0x00200000, 0x00400000, 0x00800000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000];\n\n  mp_set_bit = function(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] |= mask[k % 32];\n  };\n\n  mp_clr_bit = function(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] &= ~mask[k % 32];\n  };\n\n  mshiftright = function(a) {\n    return a = a.shiftRight();\n  };\n\n  Eval_binomial = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return binomial();\n  };\n\n  binomial = function() {\n    save();\n    ybinomial();\n    return restore();\n  };\n\n  ybinomial = function() {\n    p2 = pop();\n    p1 = pop();\n    if (BINOM_check_args() === 0) {\n      push(zero);\n      return;\n    }\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    return divide();\n  };\n\n  BINOM_check_args = function() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n\n  /* ceiling =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Returns the smallest integer not less than x.\n   */\n\n  Eval_ceiling = function() {\n    push(cadr(p1));\n    Eval();\n    return ceiling();\n  };\n\n  ceiling = function() {\n    save();\n    yyceiling();\n    return restore();\n  };\n\n  yyceiling = function() {\n    var d, doNothing;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(CEILING);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.ceil(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n    if (isnegativenumber(p1)) {\n      return doNothing = 1;\n    } else {\n      push_integer(1);\n      return add();\n    }\n  };\n\n\n  /* choose =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  n,k\n  \n  General description\n  -------------------\n  \n  Returns the number of combinations of n items taken k at a time.\n  \n  For example, the number of five card hands is choose(52,5)\n  \n  ```\n                            n!\n        choose(n,k) = -------------\n                       k! (n - k)!\n  ```\n   */\n\n  Eval_choose = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return choose();\n  };\n\n  choose = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (choose_check_args() === 0) {\n      push_integer(0);\n      restore();\n      return;\n    }\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    divide();\n    return restore();\n  };\n\n  choose_check_args = function() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n\n  /* circexp =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Returns expression x with circular and hyperbolic functions converted to exponential forms. Sometimes this will simplify an expression.\n   */\n\n  Eval_circexp = function() {\n    push(cadr(p1));\n    Eval();\n    circexp();\n    return Eval();\n  };\n\n  circexp = function() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      expcos();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      expsin();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(TAN)) {\n      p1 = cadr(p1);\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      exponential();\n      p2 = pop();\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      negate();\n      exponential();\n      p3 = pop();\n      push(p3);\n      push(p2);\n      subtract();\n      push(imaginaryunit);\n      multiply();\n      push(p2);\n      push(p3);\n      add();\n      divide();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(COSH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      add();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(SINH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      subtract();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(TANH)) {\n      p1 = cadr(p1);\n      push(p1);\n      push_integer(2);\n      multiply();\n      exponential();\n      p1 = pop();\n      push(p1);\n      push_integer(1);\n      subtract();\n      push(p1);\n      push_integer(1);\n      add();\n      divide();\n      restore();\n      return;\n    }\n    if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        push(car(p1));\n        circexp();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return;\n    }\n    if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        circexp();\n        p1.tensor.elem[i] = pop();\n      }\n      push(p1);\n      restore();\n      return;\n    }\n    push(p1);\n    return restore();\n  };\n\n\n  /* clearall =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  \n  General description\n  -------------------\n  \n  Completely wipes all variables from the environment.\n   */\n\n  Eval_clearall = function() {\n    do_clearall();\n    return push(symbol(NIL));\n  };\n\n  do_clearall = function() {\n    if (test_flag === 0) {\n      clear_term();\n    }\n    do_clearPatterns();\n    clear_symbols();\n    defn();\n    return codeGen = false;\n  };\n\n  clearall = function() {\n    return run(\"clearall\");\n  };\n\n  clearRenamedVariablesToAvoidBindingToExternalScope = function() {\n    var i, o, ref, results;\n    results = [];\n    for (i = o = 0, ref = symtab.length; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (symtab[i].printname.indexOf(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\") !== -1) {\n        symtab[i].k = SYM;\n        symtab[i].printname = \"\";\n        binding[i] = symtab[i];\n        results.push(isSymbolReclaimable[i] = true);\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n\n  /* clear =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  \n  Completely wipes a variable from the environment (while doing x = quote(x) just unassigns it).\n   */\n\n  Eval_clear = function() {\n    var indexFound, variableToBeCleared;\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      variableToBeCleared = car(p2);\n      if (variableToBeCleared.k !== SYM) {\n        stop(\"symbol error\");\n      }\n      indexFound = symtab.indexOf(variableToBeCleared);\n      symtab[indexFound].k = SYM;\n      symtab[indexFound].printname = \"\";\n      binding[indexFound] = symtab[indexFound];\n      isSymbolReclaimable[indexFound] = true;\n      p2 = cdr(p2);\n    }\n    return push(symbol(NIL));\n  };\n\n\n  /*\n   Convert complex z to clock form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n  \n    clock(z) = abs(z) * (-1) ^ (arg(z) / pi)\n  \n    For example, clock(exp(i pi/3)) gives the result (-1)^(1/3)\n   */\n\n  DEBUG_CLOCKFORM = false;\n\n  Eval_clock = function() {\n    push(cadr(p1));\n    Eval();\n    return clockform();\n  };\n\n  clockform = function() {\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: abs of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p1);\n    arg();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: arg of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push(symbol(PI));\n    }\n    divide();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: divide : \" + stack[tos - 1]);\n    }\n    list(3);\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: power : \" + stack[tos - 1]);\n    }\n    multiply();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: multiply : \" + stack[tos - 1]);\n    }\n\n    /*\n    p1 = pop()\n    push(p1)\n    abs()\n    push(symbol(E))\n    push(p1)\n    arg()\n    push(imaginaryunit)\n    multiply()\n    power()\n    multiply()\n     */\n    return restore();\n  };\n\n\n  /* coeff =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p,x,n\n  \n  General description\n  -------------------\n  Returns the coefficient of x^n in polynomial p. The x argument can be omitted for polynomials in x.\n   */\n\n  Eval_coeff = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    if (p3 === symbol(NIL)) {\n      p3 = p2;\n      p2 = symbol(SYMBOL_X);\n    }\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    return filter();\n  };\n\n  coeff = function() {\n    var h, n, prev_expanding;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    while (1) {\n      push(p1);\n      push(p2);\n      push(zero);\n      subst();\n      Eval();\n      p3 = pop();\n      push(p3);\n      push(p1);\n      push(p3);\n      subtract();\n      p1 = pop();\n      if (equal(p1, zero)) {\n        n = tos - h;\n        restore();\n        return n;\n      }\n      push(p1);\n      push(p2);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      p1 = pop();\n    }\n  };\n\n\n  /* cofactor =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m,i,j\n  \n  General description\n  -------------------\n  Cofactor of a matrix component.\n  Let c be the cofactor matrix of matrix m, i.e. tranpose(c) = adj(m).\n  This function returns c[i,j].\n   */\n\n  Eval_cofactor = function() {\n    var doNothing, i, j, n;\n    i = 0;\n    j = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    if (istensor(p2) && p2.tensor.ndim === 2 && p2.tensor.dim[0] === p2.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"cofactor: 1st arg: square matrix expected\");\n    }\n    n = p2.tensor.dim[0];\n    push(caddr(p1));\n    Eval();\n    i = pop_integer();\n    if (i < 1 || i > n) {\n      stop(\"cofactor: 2nd arg: row index expected\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (j < 1 || j > n) {\n      stop(\"cofactor: 3rd arg: column index expected\");\n    }\n    return cofactor(p2, n, i - 1, j - 1);\n  };\n\n  cofactor = function(p, n, row, col) {\n    var i, i1, j, o, ref, ref1;\n    i = 0;\n    j = 0;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i !== row && j !== col) {\n          push(p.tensor.elem[n * i + j]);\n        }\n      }\n    }\n    determinant(n - 1);\n    if ((row + col) % 2) {\n      return negate();\n    }\n  };\n\n  Eval_condense = function() {\n    push(cadr(p1));\n    Eval();\n    return Condense();\n  };\n\n  Condense = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    save();\n    yycondense();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yycondense = function() {\n    p1 = pop();\n    if (car(p1) !== symbol(ADD)) {\n      push(p1);\n      return;\n    }\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply_noexpand();\n      add();\n      p3 = cdr(p3);\n    }\n    yyexpand();\n    push(p2);\n    return divide();\n  };\n\n\n  /* conj =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  z\n  \n  General description\n  -------------------\n  Returns the complex conjugate of z.\n   */\n\n  Eval_conj = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    push(p1);\n    if (!Find(p1, imaginaryunit)) {\n      polar();\n      conjugate();\n      return clockform();\n    } else {\n      return conjugate();\n    }\n  };\n\n  conjugate = function() {\n    push(imaginaryunit);\n    push(imaginaryunit);\n    negate();\n    subst();\n    return Eval();\n  };\n\n  consCount = 0;\n\n  cons = function() {\n    var p;\n    consCount++;\n    if (DEBUG) {\n      console.log(\"cons tos: \" + tos + \" # \" + consCount);\n    }\n    p = new U();\n    p.k = CONS;\n    p.cons.cdr = pop();\n    if (p === p.cons.cdr) {\n      debugger;\n      console.log(\"something wrong p == its cdr\");\n    }\n    p.cons.car = pop();\n\n    /*\n    console.log \"cons new cdr.k = \" + p.cons.cdr.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.cdr\n    console.log \"cons new car.k = \" + p.cons.car.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.car\n     */\n    return push(p);\n  };\n\n\n  /* contract =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,i,j\n  \n  General description\n  -------------------\n  Contract across tensor indices i.e. returns \"a\" summed over indices i and j.\n  If i and j are omitted then 1 and 2 are used.\n  contract(m) is equivalent to the trace of matrix m.\n   */\n\n  Eval_contract = function() {\n    push(cadr(p1));\n    Eval();\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n    return contract();\n  };\n\n  contract = function() {\n    save();\n    yycontract();\n    return restore();\n  };\n\n  yycontract = function() {\n    var a, ai, an, b, h, i, i1, j, j1, k, l, l1, m, m1, n, n1, ndim, nelem, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    ndim = 0;\n    nelem = 0;\n    ai = [];\n    an = [];\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"contract: tensor expected, 1st arg is not a tensor\");\n      }\n      push(zero);\n      return;\n    }\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    ndim = p1.tensor.ndim;\n    if (l < 1 || l > ndim || m < 1 || m > ndim || l === m || p1.tensor.dim[l - 1] !== p1.tensor.dim[m - 1]) {\n      stop(\"contract: index out of range\");\n    }\n    l--;\n    m--;\n    n = p1.tensor.dim[l];\n    nelem = 1;\n    for (i = o = 0, ref = ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (i !== l && i !== m) {\n        nelem *= p1.tensor.dim[i];\n      }\n    }\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - 2;\n    j = 0;\n    for (i = i1 = 0, ref1 = ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (i !== l && i !== m) {\n        p2.tensor.dim[j++] = p1.tensor.dim[i];\n      }\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    for (i = j1 = 0, ref2 = ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n    for (i = l1 = 0, ref3 = nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(zero);\n      for (j = m1 = 0, ref4 = n; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        ai[l] = j;\n        ai[m] = j;\n        h = 0;\n        for (k = n1 = 0, ref5 = ndim; 0 <= ref5 ? n1 < ref5 : n1 > ref5; k = 0 <= ref5 ? ++n1 : --n1) {\n          h = (h * an[k]) + ai[k];\n        }\n        push(a[h]);\n        add();\n      }\n      b[i] = pop();\n      for (j = o1 = ref6 = ndim - 1; ref6 <= 0 ? o1 <= 0 : o1 >= 0; j = ref6 <= 0 ? ++o1 : --o1) {\n        if (j === l || j === m) {\n          continue;\n        }\n        if (++ai[j] < an[j]) {\n          break;\n        }\n        ai[j] = 0;\n      }\n    }\n    if (nelem === 1) {\n      return push(b[0]);\n    } else {\n      return push(p2);\n    }\n  };\n\n\n  /* cos =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the cosine of x.\n   */\n\n  Eval_cos = function() {\n    push(cadr(p1));\n    Eval();\n    return cosine();\n  };\n\n  cosine = function() {\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      cosine_of_angle_sum();\n    } else {\n      cosine_of_angle();\n    }\n    return restore();\n  };\n\n  cosine_of_angle_sum = function() {\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      p4 = car(p2);\n      if (isnpi(p4)) {\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        cosine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        sine();\n        push(p4);\n        sine();\n        multiply();\n        subtract();\n        return;\n      }\n      p2 = cdr(p2);\n    }\n    return cosine_of_angle();\n  };\n\n  cosine_of_angle = function() {\n    var d, n;\n    if (car(p1) === symbol(ARCCOS)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.cos(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    if (car(p1) === symbol(ARCTAN)) {\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      return;\n    }\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push(symbol(COS));\n      push(p1);\n      list(2);\n      return;\n    }\n    switch (n % 360) {\n      case 90:\n      case 270:\n        return push_integer(0);\n      case 60:\n      case 300:\n        return push_rational(1, 2);\n      case 120:\n      case 240:\n        return push_rational(-1, 2);\n      case 45:\n      case 315:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 135:\n      case 225:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 30:\n      case 330:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 150:\n      case 210:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 0:\n        return push_integer(1);\n      case 180:\n        return push_integer(-1);\n      default:\n        push(symbol(COS));\n        push(p1);\n        return list(2);\n    }\n  };\n\n\n  /* cosh =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the hyperbolic cosine of x\n  \n  ```\n              exp(x) + exp(-x)\n    cosh(x) = ----------------\n                     2\n  ```\n   */\n\n  Eval_cosh = function() {\n    push(cadr(p1));\n    Eval();\n    return ycosh();\n  };\n\n  ycosh = function() {\n    save();\n    yycosh();\n    return restore();\n  };\n\n  yycosh = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCCOSH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.cosh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n    push_symbol(COSH);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_decomp = function() {\n    var h;\n    save();\n    console.log(\"Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!\");\n    h = tos;\n    push(symbol(NIL));\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    decomp(false);\n    list(tos - h);\n    return restore();\n  };\n\n  pushTryNotToDuplicate = function(toBePushed) {\n    if (tos > 0) {\n      if (DEBUG) {\n        console.log(\"comparing \" + toBePushed + \" to: \" + stack[tos - 1]);\n      }\n      if (equal(toBePushed, stack[tos - 1])) {\n        if (DEBUG) {\n          console.log(\"skipping \" + toBePushed + \" because it's already on stack \");\n        }\n        return;\n      }\n    }\n    return push(toBePushed);\n  };\n\n  decomp = function(generalTransform) {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (DEBUG) {\n      console.log(\"DECOMPOSING \" + p1);\n    }\n    if (generalTransform) {\n      if (!iscons(p1)) {\n        if (DEBUG) {\n          console.log(\" ground thing: \" + p1);\n        }\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    } else {\n      if (Find(p1, p2) === 0) {\n        if (DEBUG) {\n          console.log(\" entire expression is constant\");\n        }\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    }\n    if (isadd(p1)) {\n      decomp_sum(generalTransform);\n      restore();\n      return;\n    }\n    if (ismultiply(p1)) {\n      decomp_product(generalTransform);\n      restore();\n      return;\n    }\n    if (DEBUG) {\n      console.log(\" naive decomp\");\n    }\n    p3 = cdr(p1);\n    if (DEBUG) {\n      console.log(\"startig p3: \" + p3);\n    }\n    while (iscons(p3)) {\n      if (generalTransform) {\n        push(car(p3));\n      }\n      if (DEBUG) {\n        console.log(\"recursive decomposition\");\n      }\n      push(car(p3));\n      if (DEBUG) {\n        console.log(\"car(p3): \" + car(p3));\n      }\n      push(p2);\n      if (DEBUG) {\n        console.log(\"p2: \" + p2);\n      }\n      decomp(generalTransform);\n      p3 = cdr(p3);\n    }\n    return restore();\n  };\n\n  decomp_sum = function(generalTransform) {\n    var h;\n    if (DEBUG) {\n      console.log(\" decomposing the sum \");\n    }\n    h = 0;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n      p3 = cdr(p3);\n    }\n    h = tos;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n      p3 = cdr(p3);\n    }\n    if (tos - h) {\n      add_all(tos - h);\n      p3 = pop();\n      pushTryNotToDuplicate(p3);\n      push(p3);\n      return negate();\n    }\n  };\n\n  decomp_product = function(generalTransform) {\n    var h;\n    if (DEBUG) {\n      console.log(\" decomposing the product \");\n    }\n    h = 0;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n      p3 = cdr(p3);\n    }\n    h = tos;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n      p3 = cdr(p3);\n    }\n    if (tos - h) {\n      return multiply_all(tos - h);\n    }\n  };\n\n  define_user_function = function() {\n    p3 = caadr(p1);\n    p4 = cdadr(p1);\n    p5 = caddr(p1);\n    if (!issymbol(p3)) {\n      stop(\"function name?\");\n    }\n    if (car(p5) === symbol(EVAL)) {\n      push(cadr(p5));\n      Eval();\n      p5 = pop();\n    }\n    push_symbol(FUNCTION);\n    push(p5);\n    push(p4);\n    list(3);\n    p5 = pop();\n    set_binding(p3, p5);\n    return push_symbol(NIL);\n  };\n\n  Eval_function_reference = function() {\n    return push(p1);\n  };\n\n\n  /* defint =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  f,x,a,b[,y,c,d...]\n  \n  General description\n  -------------------\n  Returns the definite integral of f with respect to x evaluated from \"a\" to b.\n  The argument list can be extended for multiple integrals (or \"iterated\n  integrals\"), for example a double integral (which can represent for\n  example a volume under a surface), or a triple integral, etc. For\n  example, defint(f,x,a,b,y,c,d).\n   */\n\n  Eval_defint = function() {\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    p1 = cddr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p3 = pop();\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p4 = pop();\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p5 = pop();\n      push(p2);\n      push(p3);\n      integral();\n      p2 = pop();\n      push(p2);\n      push(p3);\n      push(p5);\n      subst();\n      Eval();\n      push(p2);\n      push(p3);\n      push(p4);\n      subst();\n      Eval();\n      subtract();\n      p2 = pop();\n    }\n    return push(p2);\n  };\n\n\n  /* deg =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p,x\n  \n  General description\n  -------------------\n  Returns the degree of polynomial p(x).\n   */\n\n  Eval_degree = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    return degree();\n  };\n\n  degree = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = zero;\n    yydegree(p1);\n    push(p3);\n    return restore();\n  };\n\n  yydegree = function(p) {\n    var results;\n    if (equal(p, p2)) {\n      if (isZeroAtomOrTensor(p3)) {\n        return p3 = one;\n      }\n    } else if (car(p) === symbol(POWER)) {\n      if (equal(cadr(p), p2) && isNumericAtom(caddr(p)) && lessp(p3, caddr(p))) {\n        return p3 = caddr(p);\n      }\n    } else if (iscons(p)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        yydegree(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    }\n  };\n\n\n  /* denominator =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Returns the denominator of expression x.\n   */\n\n  Eval_denominator = function() {\n    push(cadr(p1));\n    Eval();\n    return denominator();\n  };\n\n  denominator = function() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        denominator();\n        theArgument = cdr(theArgument);\n      }\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_denominator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      push(theArgument);\n      return reciprocate();\n    } else {\n      return push(one);\n    }\n  };\n\n  Eval_derivative = function() {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n    while (1) {\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n        if (isNaN(n)) {\n          stop(\"nth derivative: check n\");\n        }\n      } else {\n        n = 1;\n      }\n      push(p3);\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          derivative();\n        }\n      } else {\n        n = -n;\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          integral();\n        }\n      }\n      p3 = pop();\n      if (p5 === symbol(NIL)) {\n        break;\n      }\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n        if (p5 === symbol(NIL)) {\n          break;\n        }\n        if (isNumericAtom(p5)) {\n          doNothing = 1;\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop();\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n      }\n    }\n    return push(p3);\n  };\n\n  derivative = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isNumericAtom(p2)) {\n      stop(\"undefined function\");\n    }\n    if (istensor(p1)) {\n      if (istensor(p2)) {\n        d_tensor_tensor();\n      } else {\n        d_tensor_scalar();\n      }\n    } else {\n      if (istensor(p2)) {\n        d_scalar_tensor();\n      } else {\n        d_scalar_scalar();\n      }\n    }\n    return restore();\n  };\n\n  d_scalar_scalar = function() {\n    if (issymbol(p2)) {\n      return d_scalar_scalar_1();\n    } else {\n      push(p1);\n      push(p2);\n      push(symbol(SECRETX));\n      subst();\n      push(symbol(SECRETX));\n      derivative();\n      push(symbol(SECRETX));\n      push(p2);\n      return subst();\n    }\n  };\n\n  d_scalar_scalar_1 = function() {\n    if (equal(p1, p2)) {\n      push(one);\n      return;\n    }\n    if (!iscons(p1)) {\n      push(zero);\n      return;\n    }\n    if (isadd(p1)) {\n      dsum();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      dproduct();\n      return;\n    }\n    if (car(p1) === symbol(POWER)) {\n      dpower();\n      return;\n    }\n    if (car(p1) === symbol(DERIVATIVE)) {\n      dd();\n      return;\n    }\n    if (car(p1) === symbol(LOG)) {\n      dlog();\n      return;\n    }\n    if (car(p1) === symbol(SIN)) {\n      dsin();\n      return;\n    }\n    if (car(p1) === symbol(COS)) {\n      dcos();\n      return;\n    }\n    if (car(p1) === symbol(TAN)) {\n      dtan();\n      return;\n    }\n    if (car(p1) === symbol(ARCSIN)) {\n      darcsin();\n      return;\n    }\n    if (car(p1) === symbol(ARCCOS)) {\n      darccos();\n      return;\n    }\n    if (car(p1) === symbol(ARCTAN)) {\n      darctan();\n      return;\n    }\n    if (car(p1) === symbol(SINH)) {\n      dsinh();\n      return;\n    }\n    if (car(p1) === symbol(COSH)) {\n      dcosh();\n      return;\n    }\n    if (car(p1) === symbol(TANH)) {\n      dtanh();\n      return;\n    }\n    if (car(p1) === symbol(ARCSINH)) {\n      darcsinh();\n      return;\n    }\n    if (car(p1) === symbol(ARCCOSH)) {\n      darccosh();\n      return;\n    }\n    if (car(p1) === symbol(ARCTANH)) {\n      darctanh();\n      return;\n    }\n    if (car(p1) === symbol(ABS)) {\n      dabs();\n      return;\n    }\n    if (car(p1) === symbol(SGN)) {\n      dsgn();\n      return;\n    }\n    if (car(p1) === symbol(HERMITE)) {\n      dhermite();\n      return;\n    }\n    if (car(p1) === symbol(ERF)) {\n      derf();\n      return;\n    }\n    if (car(p1) === symbol(ERFC)) {\n      derfc();\n      return;\n    }\n    if (car(p1) === symbol(BESSELJ)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbesselj0();\n      } else {\n        dbesseljn();\n      }\n      return;\n    }\n    if (car(p1) === symbol(BESSELY)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbessely0();\n      } else {\n        dbesselyn();\n      }\n      return;\n    }\n    if (car(p1) === symbol(INTEGRAL) && caddr(p1) === p2) {\n      derivative_of_integral();\n      return;\n    }\n    return dfunction();\n  };\n\n  dsum = function() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      derivative();\n      p1 = cdr(p1);\n    }\n    return add_all(tos - h);\n  };\n\n  dproduct = function() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = length(p1) - 1;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3 = cdr(p1);\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(car(p3));\n        if (i === j) {\n          push(p2);\n          derivative();\n        }\n        p3 = cdr(p3);\n      }\n      multiply_all(n);\n    }\n    return add_all(n);\n  };\n\n  dpower = function() {\n    push(caddr(p1));\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    push(cadr(p1));\n    logarithm();\n    push(caddr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    add();\n    push(p1);\n    return multiply();\n  };\n\n  dlog = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    return divide();\n  };\n\n  dd = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    p3 = pop();\n    if (car(p3) === symbol(DERIVATIVE)) {\n      push_symbol(DERIVATIVE);\n      push_symbol(DERIVATIVE);\n      push(cadr(p3));\n      if (lessp(caddr(p3), caddr(p1))) {\n        push(caddr(p3));\n        list(3);\n        push(caddr(p1));\n      } else {\n        push(caddr(p1));\n        list(3);\n        push(caddr(p3));\n      }\n      return list(3);\n    } else {\n      push(p3);\n      push(caddr(p1));\n      return derivative();\n    }\n  };\n\n  dfunction = function() {\n    p3 = cdr(p1);\n    if (p3 === symbol(NIL) || Find(p3, p2)) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(zero);\n    }\n  };\n\n  dsin = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    return multiply();\n  };\n\n  dcos = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sine();\n    multiply();\n    return negate();\n  };\n\n  dtan = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsin = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccos = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    multiply();\n    return negate();\n  };\n\n  darctan = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    add();\n    inverse();\n    multiply();\n    return simplify();\n  };\n\n  dsinh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    return multiply();\n  };\n\n  dcosh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ysinh();\n    return multiply();\n  };\n\n  dtanh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsinh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccosh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darctanh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    inverse();\n    return multiply();\n  };\n\n  dabs = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sgn();\n    return multiply();\n  };\n\n  dsgn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    dirac();\n    multiply();\n    push_integer(2);\n    return multiply();\n  };\n\n  dhermite = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(2);\n    push(caddr(p1));\n    multiply();\n    multiply();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    hermite();\n    return multiply();\n  };\n\n  derf = function() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  derfc = function() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(-2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  dbesselj0 = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesseljn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    besselj();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    besselj();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  dbessely0 = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesselyn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    bessely();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    bessely();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  derivative_of_integral = function() {\n    return push(cadr(p1));\n  };\n\n\n  /* det =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Returns the determinant of matrix m.\n  Uses Gaussian elimination for numerical matrices.\n  \n  Example:\n  \n    det(((1,2),(3,4)))\n    > -2\n   */\n\n  DET_check_arg = function() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  det = function() {\n    var a, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    n = p1.tensor.nelem;\n    a = p1.tensor.elem;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtom(a[i])) {\n        break;\n      }\n    }\n    if (i === n) {\n      yydetg();\n    } else {\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n      }\n      determinant(p1.tensor.dim[0]);\n    }\n    return restore();\n  };\n\n  determinant = function(n) {\n    var a, breakFromOutherWhile, h, i, i1, j, k, o, q, ref, ref1, s, sign_, t;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    q = 0;\n    s = 0;\n    sign_ = 0;\n    t = 0;\n    a = [];\n    h = tos - n * n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      a[i] = i;\n      a[i + n] = 0;\n      a[i + n + n] = 1;\n    }\n    sign_ = 1;\n    push(zero);\n    while (1) {\n      if (sign_ === 1) {\n        push_integer(1);\n      } else {\n        push_integer(-1);\n      }\n      for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        k = n * a[i] + i;\n        push(stack[h + k]);\n        multiply();\n      }\n      add();\n      j = n - 1;\n      s = 0;\n      breakFromOutherWhile = false;\n      while (1) {\n        q = a[n + j] + a[n + n + j];\n        if (q < 0) {\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n        if (q === j + 1) {\n          if (j === 0) {\n            breakFromOutherWhile = true;\n            break;\n          }\n          s++;\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n        break;\n      }\n      if (breakFromOutherWhile) {\n        break;\n      }\n      t = a[j - a[n + j] + s];\n      a[j - a[n + j] + s] = a[j - q + s];\n      a[j - q + s] = t;\n      a[n + j] = q;\n      sign_ = -sign_;\n    }\n    stack[h] = stack[tos - 1];\n    return moveTos(h + 1);\n  };\n\n  detg = function() {\n    save();\n    p1 = pop();\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    yydetg();\n    return restore();\n  };\n\n  yydetg = function() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    for (i = o = 0, ref = n * n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p1.tensor.elem[i]);\n    }\n    lu_decomp(n);\n    moveTos(tos - n * n);\n    return push(p1);\n  };\n\n  M = function(h, n, i, j) {\n    return stack[h + n * i + j];\n  };\n\n  setM = function(h, n, i, j, value) {\n    return stack[h + n * i + j] = value;\n  };\n\n  lu_decomp = function(n) {\n    var d, h, i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n    d = 0;\n    h = 0;\n    i = 0;\n    j = 0;\n    h = tos - n * n;\n    p1 = one;\n    for (d = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      if (equal(M(h, n, d, d), zero)) {\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(M(h, n, i, d), zero)) {\n            break;\n          }\n        }\n        if (i === n) {\n          p1 = zero;\n          break;\n        }\n        for (j = j1 = ref3 = d, ref4 = n; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; j = ref3 <= ref4 ? ++j1 : --j1) {\n          p2 = M(h, n, d, j);\n          setM(h, n, d, j, M(h, n, i, j));\n          setM(h, n, i, j, p2);\n        }\n        push(p1);\n        negate();\n        p1 = pop();\n      }\n      push(p1);\n      push(M(h, n, d, d));\n      multiply();\n      p1 = pop();\n      for (i = l1 = ref5 = d + 1, ref6 = n; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n        push(M(h, n, i, d));\n        push(M(h, n, d, d));\n        divide();\n        negate();\n        p2 = pop();\n        setM(h, n, i, d, zero);\n        for (j = m1 = ref7 = d + 1, ref8 = n; ref7 <= ref8 ? m1 < ref8 : m1 > ref8; j = ref7 <= ref8 ? ++m1 : --m1) {\n          push(M(h, n, d, j));\n          push(p2);\n          multiply();\n          push(M(h, n, i, j));\n          add();\n          setM(h, n, i, j, pop());\n        }\n      }\n    }\n    push(p1);\n    push(M(h, n, n - 1, n - 1));\n    multiply();\n    return p1 = pop();\n  };\n\n  Eval_dirac = function() {\n    push(cadr(p1));\n    Eval();\n    return dirac();\n  };\n\n  dirac = function() {\n    save();\n    ydirac();\n    return restore();\n  };\n\n  ydirac = function() {\n    p1 = pop();\n    if (isdouble(p1)) {\n      if (p1.d === 0) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n    if (isrational(p1)) {\n      if (MZERO(mmul(p1.q.a, p1.q.b))) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n    if (car(p1) === symbol(POWER)) {\n      push_symbol(DIRAC);\n      push(cadr(p1));\n      list(2);\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(DIRAC);\n      push(p1);\n      negate();\n      list(2);\n      return;\n    }\n    if (isnegativeterm(p1) || (car(p1) === symbol(ADD) && isnegativeterm(cadr(p1)))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    push_symbol(DIRAC);\n    push(p1);\n    return list(2);\n  };\n\n  divisors = function() {\n    var h, i, n, o, ref, subsetOfStack;\n    i = 0;\n    h = 0;\n    n = 0;\n    save();\n    h = tos - 1;\n    divisors_onstack();\n    n = tos - h;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  divisors_onstack = function() {\n    var h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    h = tos;\n    if (isNumericAtom(p1)) {\n      push(p1);\n      factor_small_number();\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n      __factor_add();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      if (isNumericAtom(car(p1))) {\n        push(car(p1));\n        factor_small_number();\n        p1 = cdr(p1);\n      }\n      while (iscons(p1)) {\n        p2 = car(p1);\n        if (car(p2) === symbol(POWER)) {\n          push(cadr(p2));\n          push(caddr(p2));\n        } else {\n          push(p2);\n          push(one);\n        }\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(POWER)) {\n      push(cadr(p1));\n      push(caddr(p1));\n    } else {\n      push(p1);\n      push(one);\n    }\n    k = tos;\n    push(one);\n    gen(h, k);\n    n = tos - k;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[h + i] = stack[k + i];\n    }\n    moveTos(h + n);\n    return restore();\n  };\n\n  gen = function(h, k) {\n    var expo, i, o, ref;\n    expo = 0;\n    i = 0;\n    save();\n    p1 = pop();\n    if (h === k) {\n      push(p1);\n      restore();\n      return;\n    }\n    p2 = stack[h + 0];\n    p3 = stack[h + 1];\n    push(p3);\n    expo = pop_integer();\n    if (!isNaN(expo)) {\n      for (i = o = 0, ref = Math.abs(expo); 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(p1);\n        push(p2);\n        push_integer(sign(expo) * i);\n        power();\n        multiply();\n        gen(h + 2, k);\n      }\n    }\n    return restore();\n  };\n\n  __factor_add = function() {\n    save();\n    p1 = pop();\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n    p2 = pop();\n    if (isplusone(p2)) {\n      push(p1);\n      push(one);\n      restore();\n      return;\n    }\n    if (isNumericAtom(p2)) {\n      push(p2);\n      factor_small_number();\n    } else if (car(p2) === symbol(MULTIPLY)) {\n      p3 = cdr(p2);\n      if (isNumericAtom(car(p3))) {\n        push(car(p3));\n        factor_small_number();\n      } else {\n        push(car(p3));\n        push(one);\n      }\n      p3 = cdr(p3);\n      while (iscons(p3)) {\n        push(car(p3));\n        push(one);\n        p3 = cdr(p3);\n      }\n    } else {\n      push(p2);\n      push(one);\n    }\n    push(p2);\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply();\n      add();\n      p3 = cdr(p3);\n    }\n    push(one);\n    return restore();\n  };\n\n  dpow = function() {\n    var a, b, base, expo, result, theta;\n    a = 0.0;\n    b = 0.0;\n    base = 0.0;\n    expo = 0.0;\n    result = 0.0;\n    theta = 0.0;\n    expo = pop_double();\n    base = pop_double();\n    if (base === 0.0 && expo < 0.0) {\n      stop(\"divide by zero\");\n    }\n    if (base >= 0.0 || (expo % 1.0) === 0.0) {\n      result = Math.pow(base, expo);\n      push_double(result);\n      return;\n    }\n    result = Math.pow(Math.abs(base), expo);\n    theta = Math.PI * expo;\n    if ((expo % 0.5) === 0.0) {\n      a = 0.0;\n      b = Math.sin(theta);\n    } else {\n      a = Math.cos(theta);\n      b = Math.sin(theta);\n    }\n    push_double(a * result);\n    push_double(b * result);\n    push(imaginaryunit);\n    multiply();\n    return add();\n  };\n\n\n  /* eigen =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvalues and eigenvectors. Matrix m must be both numerical and symmetric.\n  The eigenval function returns a matrix with the eigenvalues along the diagonal.\n  The eigenvec function returns a matrix with the eigenvectors arranged as row vectors.\n  The eigen function does not return anything but stores the eigenvalue matrix in D\n  and the eigenvector matrix in Q.\n  \n  Input:    stack[tos - 1]    symmetric matrix\n  \n  Output:    D      diagnonal matrix\n        Q      eigenvector matrix\n  \n  D and Q have the property that\n  \n    A == dot(transpose(Q),D,Q)\n  \n  where A is the original matrix.\n  \n  The eigenvalues are on the diagonal of D.\n  The eigenvectors are row vectors in Q.\n  \n  The eigenvalue relation:\n  \n    A X = lambda X\n  \n  can be checked as follows:\n  \n    lambda = D[1,1]\n    X = Q[1]\n    dot(A,X) - lambda X\n  \n  Example 1. Check the relation AX = lambda X where lambda is an eigenvalue and X is the associated eigenvector.\n  \n  Enter:\n  \n       A = hilbert(3)\n  \n       eigen(A)\n  \n       lambda = D[1,1]\n  \n       X = Q[1]\n  \n       dot(A,X) - lambda X\n  \n  Result:\n  \n       -1.16435e-14\n   \n       -6.46705e-15\n   \n       -4.55191e-15\n  \n  Example 2: Check the relation A = QTDQ.\n  \n  Enter:\n  \n    A - dot(transpose(Q),D,Q)\n  \n  Result: \n  \n    6.27365e-12    -1.58236e-11   1.81902e-11\n   \n    -1.58236e-11   -1.95365e-11   2.56514e-12\n   \n    1.81902e-11    2.56514e-12    1.32627e-11\n   */\n\n  EIG_N = 0;\n\n  EIG_yydd = [];\n\n  EIG_yyqq = [];\n\n  Eval_eigen = function() {\n    if (EIG_check_arg() === 0) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n    eigen(EIGEN);\n    p1 = usr_symbol(\"D\");\n    set_binding(p1, p2);\n    p1 = usr_symbol(\"Q\");\n    set_binding(p1, p3);\n    return push(symbol(NIL));\n  };\n\n\n  /* eigenval =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvalues of m. See \"eigen\" for more info.\n   */\n\n  Eval_eigenval = function() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVAL);\n      push(p1);\n      list(2);\n      return;\n    }\n    eigen(EIGENVAL);\n    return push(p2);\n  };\n\n\n  /* eigenvec =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m\n  \n  General description\n  -------------------\n  Compute eigenvectors of m. See \"eigen\" for more info.\n   */\n\n  Eval_eigenvec = function() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVEC);\n      push(p1);\n      list(2);\n      return;\n    }\n    eigen(EIGENVEC);\n    return push(p3);\n  };\n\n  EIG_check_arg = function() {\n    var i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    p1 = pop();\n    if (!istensor(p1)) {\n      return 0;\n    }\n    if (p1.tensor.ndim !== 2 || p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n    EIG_N = p1.tensor.dim[0];\n    for (i = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (!isdouble(p1.tensor.elem[EIG_N * i + j])) {\n          stop(\"eigen: matrix is not numerical\");\n        }\n      }\n    }\n    for (i = j1 = 0, ref2 = EIG_N - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        if (Math.abs(p1.tensor.elem[EIG_N * i + j].d - p1.tensor.elem[EIG_N * j + i].d) > 1e-10) {\n          stop(\"eigen: matrix is not symmetrical\");\n        }\n      }\n    }\n    return 1;\n  };\n\n  eigen = function(op) {\n    var i, i1, j, j1, l1, m1, n1, o, o1, q1, r1, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s1;\n    i = 0;\n    j = 0;\n    for (i = o = 0, ref = EIG_N * EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      EIG_yydd[i] = 0.0;\n    }\n    for (i = i1 = 0, ref1 = EIG_N * EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      EIG_yyqq[i] = 0.0;\n    }\n    for (i = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      EIG_yydd[EIG_N * i + i] = p1.tensor.elem[EIG_N * i + i].d;\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        EIG_yydd[EIG_N * i + j] = p1.tensor.elem[EIG_N * i + j].d;\n        EIG_yydd[EIG_N * j + i] = p1.tensor.elem[EIG_N * i + j].d;\n      }\n    }\n    for (i = m1 = 0, ref5 = EIG_N; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      EIG_yyqq[EIG_N * i + i] = 1.0;\n      for (j = n1 = ref6 = i + 1, ref7 = EIG_N; ref6 <= ref7 ? n1 < ref7 : n1 > ref7; j = ref6 <= ref7 ? ++n1 : --n1) {\n        EIG_yyqq[EIG_N * i + j] = 0.0;\n        EIG_yyqq[EIG_N * j + i] = 0.0;\n      }\n    }\n    for (i = o1 = 0; o1 < 100; i = ++o1) {\n      if (step() === 0) {\n        break;\n      }\n    }\n    if (i === 100) {\n      printstr(\"\\nnote: eigen did not converge\\n\");\n    }\n    if (op === EIGEN || op === EIGENVAL) {\n      push(p1);\n      copy_tensor();\n      p2 = pop();\n      for (i = q1 = 0, ref8 = EIG_N; 0 <= ref8 ? q1 < ref8 : q1 > ref8; i = 0 <= ref8 ? ++q1 : --q1) {\n        for (j = r1 = 0, ref9 = EIG_N; 0 <= ref9 ? r1 < ref9 : r1 > ref9; j = 0 <= ref9 ? ++r1 : --r1) {\n          push_double(EIG_yydd[EIG_N * i + j]);\n          p2.tensor.elem[EIG_N * i + j] = pop();\n        }\n      }\n    }\n    if (op === EIGEN || op === EIGENVEC) {\n      push(p1);\n      copy_tensor();\n      p3 = pop();\n      results = [];\n      for (i = s1 = 0, ref10 = EIG_N; 0 <= ref10 ? s1 < ref10 : s1 > ref10; i = 0 <= ref10 ? ++s1 : --s1) {\n        results.push((function() {\n          var ref11, results1, t1;\n          results1 = [];\n          for (j = t1 = 0, ref11 = EIG_N; 0 <= ref11 ? t1 < ref11 : t1 > ref11; j = 0 <= ref11 ? ++t1 : --t1) {\n            push_double(EIG_yyqq[EIG_N * i + j]);\n            results1.push(p3.tensor.elem[EIG_N * i + j] = pop());\n          }\n          return results1;\n        })());\n      }\n      return results;\n    }\n  };\n\n  step = function() {\n    var count, i, i1, j, o, ref, ref1, ref2;\n    i = 0;\n    j = 0;\n    count = 0;\n    for (i = o = 0, ref = EIG_N - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = ref1 = i + 1, ref2 = EIG_N; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (EIG_yydd[EIG_N * i + j] !== 0.0) {\n          step2(i, j);\n          count++;\n        }\n      }\n    }\n    return count;\n  };\n\n  step2 = function(p, q) {\n    var c, cc, i1, j1, k, o, ref, ref1, ref2, s, ss, t, theta;\n    k = 0;\n    t = 0.0;\n    theta = 0.0;\n    c = 0.0;\n    cc = 0.0;\n    s = 0.0;\n    ss = 0.0;\n    theta = 0.5 * (EIG_yydd[EIG_N * p + p] - EIG_yydd[EIG_N * q + q]) / EIG_yydd[EIG_N * p + q];\n    t = 1.0 / (Math.abs(theta) + Math.sqrt(theta * theta + 1.0));\n    if (theta < 0.0) {\n      t = -t;\n    }\n    c = 1.0 / Math.sqrt(t * t + 1.0);\n    s = t * c;\n    for (k = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; k = 0 <= ref ? ++o : --o) {\n      cc = EIG_yydd[EIG_N * p + k];\n      ss = EIG_yydd[EIG_N * q + k];\n      EIG_yydd[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yydd[EIG_N * q + k] = c * ss - s * cc;\n    }\n    for (k = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      cc = EIG_yydd[EIG_N * k + p];\n      ss = EIG_yydd[EIG_N * k + q];\n      EIG_yydd[EIG_N * k + p] = c * cc + s * ss;\n      EIG_yydd[EIG_N * k + q] = c * ss - s * cc;\n    }\n    for (k = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      cc = EIG_yyqq[EIG_N * p + k];\n      ss = EIG_yyqq[EIG_N * q + k];\n      EIG_yyqq[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yyqq[EIG_N * q + k] = c * ss - s * cc;\n    }\n    EIG_yydd[EIG_N * p + q] = 0.0;\n    return EIG_yydd[EIG_N * q + p] = 0.0;\n  };\n\n\n  /* erf =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Authors\n  -------\n  philippe.billet@noos.fr\n  \n  Parameters\n  ----------\n  x\n  \n  General description\n  -------------------\n  Error function erf(x).\n  erf(-x)=erf(x)\n   */\n\n  Eval_erf = function() {\n    push(cadr(p1));\n    Eval();\n    return yerf();\n  };\n\n  yerf = function() {\n    save();\n    yyerf();\n    return restore();\n  };\n\n  yyerf = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (isdouble(p1)) {\n      d = 1.0 - erfc(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(ERF);\n      push(p1);\n      negate();\n      list(2);\n      negate();\n      return;\n    }\n    push_symbol(ERF);\n    push(p1);\n    list(2);\n  };\n\n  Eval_erfc = function() {\n    push(cadr(p1));\n    Eval();\n    return yerfc();\n  };\n\n  yerfc = function() {\n    save();\n    yyerfc();\n    return restore();\n  };\n\n  yyerfc = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (isdouble(p1)) {\n      d = erfc(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n    push_symbol(ERFC);\n    push(p1);\n    list(2);\n  };\n\n  erfc = function(x) {\n    var ans, t, z;\n    if (x === 0) {\n      return 1.0;\n    }\n    t = 0.0;\n    z = 0.0;\n    ans = 0.0;\n    z = Math.abs(x);\n    t = 1.0 / (1.0 + 0.5 * z);\n    ans = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n    if (x >= 0.0) {\n      return ans;\n    } else {\n      return 2.0 - ans;\n    }\n  };\n\n  Eval = function() {\n    var willEvaluateAsFloats;\n    check_esc_flag();\n    save();\n    p1 = pop();\n    if (p1 == null) {\n      debugger;\n    }\n    if (!evaluatingAsFloats && isfloating(p1)) {\n      willEvaluateAsFloats = true;\n      evaluatingAsFloats++;\n    }\n    switch (p1.k) {\n      case CONS:\n        Eval_cons();\n        break;\n      case NUM:\n        if (evaluatingAsFloats) {\n          push_double(convert_rational_to_double(p1));\n        } else {\n          push(p1);\n        }\n        break;\n      case DOUBLE:\n      case STR:\n        push(p1);\n        break;\n      case TENSOR:\n        Eval_tensor();\n        break;\n      case SYM:\n        Eval_sym();\n        break;\n      default:\n        stop(\"atom?\");\n    }\n    if (willEvaluateAsFloats) {\n      evaluatingAsFloats--;\n    }\n    return restore();\n  };\n\n  Eval_sym = function() {\n    var cycleString, i, o, positionIfSymbolAlreadyBeingEvaluated, ref, ref1;\n    if (iskeyword(p1)) {\n      push(p1);\n      push(symbol(LAST));\n      list(2);\n      Eval();\n      return;\n    } else if (p1 === symbol(PI) && evaluatingAsFloats) {\n      push_double(Math.PI);\n      return;\n    }\n    p2 = get_binding(p1);\n    if (DEBUG) {\n      console.log(\"looked up: \" + p1 + \" which contains: \" + p2);\n    }\n    push(p2);\n    if (p1 !== p2) {\n      positionIfSymbolAlreadyBeingEvaluated = chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1);\n      if (positionIfSymbolAlreadyBeingEvaluated !== -1) {\n        cycleString = \"\";\n        for (i = o = ref = positionIfSymbolAlreadyBeingEvaluated, ref1 = chainOfUserSymbolsNotFunctionsBeingEvaluated.length; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n          cycleString += chainOfUserSymbolsNotFunctionsBeingEvaluated[i].printname + \" -> \";\n        }\n        cycleString += p1.printname;\n        stop(\"recursive evaluation of symbols: \" + cycleString);\n        return;\n      }\n      chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1);\n      Eval();\n      return chainOfUserSymbolsNotFunctionsBeingEvaluated.pop();\n    }\n  };\n\n  Eval_cons = function() {\n    var cons_head;\n    cons_head = car(p1);\n    if (car(cons_head) === symbol(EVAL)) {\n      Eval_user_function();\n      return;\n    }\n    if (!issymbol(cons_head)) {\n      stop(\"cons?\");\n    }\n    switch (symnum(cons_head)) {\n      case ABS:\n        return Eval_abs();\n      case ADD:\n        return Eval_add();\n      case ADJ:\n        return Eval_adj();\n      case AND:\n        return Eval_and();\n      case ARCCOS:\n        return Eval_arccos();\n      case ARCCOSH:\n        return Eval_arccosh();\n      case ARCSIN:\n        return Eval_arcsin();\n      case ARCSINH:\n        return Eval_arcsinh();\n      case ARCTAN:\n        return Eval_arctan();\n      case ARCTANH:\n        return Eval_arctanh();\n      case ARG:\n        return Eval_arg();\n      case ATOMIZE:\n        return Eval_atomize();\n      case BESSELJ:\n        return Eval_besselj();\n      case BESSELY:\n        return Eval_bessely();\n      case BINDING:\n        return Eval_binding();\n      case BINOMIAL:\n        return Eval_binomial();\n      case CEILING:\n        return Eval_ceiling();\n      case CHECK:\n        return Eval_check();\n      case CHOOSE:\n        return Eval_choose();\n      case CIRCEXP:\n        return Eval_circexp();\n      case CLEAR:\n        return Eval_clear();\n      case CLEARALL:\n        return Eval_clearall();\n      case CLEARPATTERNS:\n        return Eval_clearpatterns();\n      case CLOCK:\n        return Eval_clock();\n      case COEFF:\n        return Eval_coeff();\n      case COFACTOR:\n        return Eval_cofactor();\n      case CONDENSE:\n        return Eval_condense();\n      case CONJ:\n        return Eval_conj();\n      case CONTRACT:\n        return Eval_contract();\n      case COS:\n        return Eval_cos();\n      case COSH:\n        return Eval_cosh();\n      case DECOMP:\n        return Eval_decomp();\n      case DEGREE:\n        return Eval_degree();\n      case DEFINT:\n        return Eval_defint();\n      case DENOMINATOR:\n        return Eval_denominator();\n      case DERIVATIVE:\n        return Eval_derivative();\n      case DET:\n        return Eval_det();\n      case DIM:\n        return Eval_dim();\n      case DIRAC:\n        return Eval_dirac();\n      case DIVISORS:\n        return Eval_divisors();\n      case DO:\n        return Eval_do();\n      case DOT:\n        return Eval_inner();\n      case DRAW:\n        return Eval_draw();\n      case DSOLVE:\n        return Eval_dsolve();\n      case EIGEN:\n        return Eval_eigen();\n      case EIGENVAL:\n        return Eval_eigenval();\n      case EIGENVEC:\n        return Eval_eigenvec();\n      case ERF:\n        return Eval_erf();\n      case ERFC:\n        return Eval_erfc();\n      case EVAL:\n        return Eval_Eval();\n      case EXP:\n        return Eval_exp();\n      case EXPAND:\n        return Eval_expand();\n      case EXPCOS:\n        return Eval_expcos();\n      case EXPSIN:\n        return Eval_expsin();\n      case FACTOR:\n        return Eval_factor();\n      case FACTORIAL:\n        return Eval_factorial();\n      case FACTORPOLY:\n        return Eval_factorpoly();\n      case FILTER:\n        return Eval_filter();\n      case FLOATF:\n        return Eval_float();\n      case APPROXRATIO:\n        return Eval_approxratio();\n      case FLOOR:\n        return Eval_floor();\n      case FOR:\n        return Eval_for();\n      case FUNCTION:\n        return Eval_function_reference();\n      case GAMMA:\n        return Eval_gamma();\n      case GCD:\n        return Eval_gcd();\n      case HERMITE:\n        return Eval_hermite();\n      case HILBERT:\n        return Eval_hilbert();\n      case IMAG:\n        return Eval_imag();\n      case INDEX:\n        return Eval_index();\n      case INNER:\n        return Eval_inner();\n      case INTEGRAL:\n        return Eval_integral();\n      case INV:\n        return Eval_inv();\n      case INVG:\n        return Eval_invg();\n      case ISINTEGER:\n        return Eval_isinteger();\n      case ISPRIME:\n        return Eval_isprime();\n      case LAGUERRE:\n        return Eval_laguerre();\n      case LCM:\n        return Eval_lcm();\n      case LEADING:\n        return Eval_leading();\n      case LEGENDRE:\n        return Eval_legendre();\n      case LOG:\n        return Eval_log();\n      case LOOKUP:\n        return Eval_lookup();\n      case MOD:\n        return Eval_mod();\n      case MULTIPLY:\n        return Eval_multiply();\n      case NOT:\n        return Eval_not();\n      case NROOTS:\n        return Eval_nroots();\n      case NUMBER:\n        return Eval_number();\n      case NUMERATOR:\n        return Eval_numerator();\n      case OPERATOR:\n        return Eval_operator();\n      case OR:\n        return Eval_or();\n      case OUTER:\n        return Eval_outer();\n      case PATTERN:\n        return Eval_pattern();\n      case PATTERNSINFO:\n        return Eval_patternsinfo();\n      case POLAR:\n        return Eval_polar();\n      case POWER:\n        return Eval_power();\n      case PRIME:\n        return Eval_prime();\n      case PRINT:\n        return Eval_print();\n      case PRINT2DASCII:\n        return Eval_print2dascii();\n      case PRINTFULL:\n        return Eval_printcomputer();\n      case PRINTLATEX:\n        return Eval_printlatex();\n      case PRINTLIST:\n        return Eval_printlist();\n      case PRINTPLAIN:\n        return Eval_printhuman();\n      case PRODUCT:\n        return Eval_product();\n      case QUOTE:\n        return Eval_quote();\n      case QUOTIENT:\n        return Eval_quotient();\n      case RANK:\n        return Eval_rank();\n      case RATIONALIZE:\n        return Eval_rationalize();\n      case REAL:\n        return Eval_real();\n      case ROUND:\n        return Eval_round();\n      case YYRECT:\n        return Eval_rect();\n      case ROOTS:\n        return Eval_roots();\n      case SETQ:\n        return Eval_setq();\n      case SGN:\n        return Eval_sgn();\n      case SILENTPATTERN:\n        return Eval_silentpattern();\n      case SIMPLIFY:\n        return Eval_simplify();\n      case SIN:\n        return Eval_sin();\n      case SINH:\n        return Eval_sinh();\n      case SHAPE:\n        return Eval_shape();\n      case SQRT:\n        return Eval_sqrt();\n      case STOP:\n        return Eval_stop();\n      case SUBST:\n        return Eval_subst();\n      case SUM:\n        return Eval_sum();\n      case SYMBOLSINFO:\n        return Eval_symbolsinfo();\n      case TAN:\n        return Eval_tan();\n      case TANH:\n        return Eval_tanh();\n      case TAYLOR:\n        return Eval_taylor();\n      case TEST:\n        return Eval_test();\n      case TESTEQ:\n        return Eval_testeq();\n      case TESTGE:\n        return Eval_testge();\n      case TESTGT:\n        return Eval_testgt();\n      case TESTLE:\n        return Eval_testle();\n      case TESTLT:\n        return Eval_testlt();\n      case TRANSPOSE:\n        return Eval_transpose();\n      case UNIT:\n        return Eval_unit();\n      case ZERO:\n        return Eval_zero();\n      default:\n        return Eval_user_function();\n    }\n  };\n\n  Eval_binding = function() {\n    return push(get_binding(cadr(p1)));\n  };\n\n\n  /* check =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  p\n  \n  General description\n  -------------------\n  Returns whether the predicate p is true/false or unknown:\n  0 if false, 1 if true or remains unevaluated if unknown.\n  Note that if \"check\" is passed an assignment, it turns it into a test,\n  i.e. check(a = b) is turned into check(a==b) \n  so \"a\" is not assigned anything.\n  Like in many programming languages, \"check\" also gives truthyness/falsyness\n  for numeric values. In which case, \"true\" is returned for non-zero values.\n  Potential improvements: \"check\" can't evaluate strings yet.\n   */\n\n  Eval_check = function() {\n    var checkResult;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n    if (checkResult == null) {\n      return push(p1);\n    } else {\n      return push_integer(checkResult);\n    }\n  };\n\n  Eval_det = function() {\n    push(cadr(p1));\n    Eval();\n    return det();\n  };\n\n\n  /* dim =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  m,n\n  \n  General description\n  -------------------\n  Returns the cardinality of the nth index of tensor \"m\".\n   */\n\n  Eval_dim = function() {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    if (iscons(cddr(p1))) {\n      push(caddr(p1));\n      Eval();\n      n = pop_integer();\n    } else {\n      n = 1;\n    }\n    if (!istensor(p2)) {\n      return push_integer(1);\n    } else if (n < 1 || n > p2.tensor.ndim) {\n      return push(p1);\n    } else {\n      return push_integer(p2.tensor.dim[n - 1]);\n    }\n  };\n\n  Eval_divisors = function() {\n    push(cadr(p1));\n    Eval();\n    return divisors();\n  };\n\n\n  /* do =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  Evaluates each argument from left to right. Returns the result of the last argument.\n   */\n\n  Eval_do = function() {\n    var results;\n    push(car(p1));\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      pop();\n      push(car(p1));\n      Eval();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  Eval_dsolve = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    return dsolve();\n  };\n\n  Eval_Eval = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      push(cadr(p1));\n      Eval();\n      subst();\n      p1 = cddr(p1);\n    }\n    return Eval();\n  };\n\n  Eval_exp = function() {\n    push(cadr(p1));\n    Eval();\n    return exponential();\n  };\n\n  Eval_factorial = function() {\n    push(cadr(p1));\n    Eval();\n    return factorial();\n  };\n\n  Eval_factorpoly = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    factorpoly();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factorpoly();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  Eval_hermite = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return hermite();\n  };\n\n  Eval_hilbert = function() {\n    push(cadr(p1));\n    Eval();\n    return hilbert();\n  };\n\n  Eval_index = function() {\n    var h, orig, theTensor;\n    h = tos;\n    orig = p1;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    theTensor = stack[tos - 1];\n    if (isNumericAtom(theTensor)) {\n      stop(\"trying to access a scalar as a tensor\");\n    }\n    if (!istensor(theTensor)) {\n      moveTos(h);\n      push(orig);\n      return;\n    }\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      if (!isintegerorintegerfloat(stack[tos - 1])) {\n        moveTos(h);\n        push(orig);\n        return;\n      }\n      p1 = cdr(p1);\n    }\n    return index_function(tos - h);\n  };\n\n  Eval_inv = function() {\n    push(cadr(p1));\n    Eval();\n    return inv();\n  };\n\n  Eval_invg = function() {\n    push(cadr(p1));\n    Eval();\n    return invg();\n  };\n\n  Eval_isinteger = function() {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (isrational(p1)) {\n      if (isinteger(p1)) {\n        push(one);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    if (isdouble(p1)) {\n      n = Math.floor(p1.d);\n      if (n === p1.d) {\n        push(one);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    push_symbol(ISINTEGER);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_number = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (p1.k === NUM || p1.k === DOUBLE) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_operator = function() {\n    var h;\n    h = tos;\n    push_symbol(OPERATOR);\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p1 = cdr(p1);\n    }\n    return list(tos - h);\n  };\n\n  Eval_quote = function() {\n    return push(cadr(p1));\n  };\n\n  Eval_rank = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (istensor(p1)) {\n      return push_integer(p1.tensor.ndim);\n    } else {\n      return push(zero);\n    }\n  };\n\n  Eval_setq = function() {\n    if (caadr(p1) === symbol(INDEX)) {\n      setq_indexed();\n      return;\n    }\n    if (iscons(cadr(p1))) {\n      define_user_function();\n      return;\n    }\n    if (!issymbol(cadr(p1))) {\n      stop(\"symbol assignment: error in symbol\");\n    }\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    set_binding(cadr(p1), p2);\n    return push(symbol(NIL));\n  };\n\n  setq_indexed = function() {\n    var h;\n    p4 = cadadr(p1);\n    console.log(\"p4: \" + p4);\n    if (!issymbol(p4)) {\n      stop(\"indexed assignment: expected a symbol name\");\n    }\n    h = tos;\n    push(caddr(p1));\n    Eval();\n    p2 = cdadr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      p2 = cdr(p2);\n    }\n    set_component(tos - h);\n    p3 = pop();\n    set_binding(p4, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_sqrt = function() {\n    push(cadr(p1));\n    Eval();\n    push_rational(1, 2);\n    return power();\n  };\n\n  Eval_stop = function() {\n    return stop(\"user stop\");\n  };\n\n  Eval_subst = function() {\n    push(cadddr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadr(p1));\n    Eval();\n    subst();\n    return Eval();\n  };\n\n  Eval_unit = function() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    n = pop_integer();\n    if (isNaN(n)) {\n      push(p1);\n      return;\n    }\n    if (n < 1) {\n      push(p1);\n      return;\n    }\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[n * i + i] = one;\n    }\n    check_tensor_dimensions(p1);\n    return push(p1);\n  };\n\n  Eval_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  Eval_predicate = function() {\n    save();\n    p1 = top();\n    if (car(p1) === symbol(SETQ)) {\n      pop();\n      push_symbol(TESTEQ);\n      push(cadr(p1));\n      push(caddr(p1));\n      list(3);\n    }\n    Eval();\n    return restore();\n  };\n\n  Eval_expand = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    return expand();\n  };\n\n  expand = function() {\n    var prev_expanding;\n    save();\n    p9 = pop();\n    p5 = pop();\n    if (istensor(p5)) {\n      expand_tensor();\n      restore();\n      return;\n    }\n    if (car(p5) === symbol(ADD)) {\n      push_integer(0);\n      p1 = cdr(p5);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p9);\n        expand();\n        add();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    push(p5);\n    numerator();\n    p3 = pop();\n    push(p5);\n    denominator();\n    p2 = pop();\n    remove_negative_exponents();\n    push(p3);\n    push(p2);\n    push(p9);\n    if (isone(p3) || isone(p2)) {\n      if (!ispolyexpandedform(p2, p9) || isone(p2)) {\n        pop();\n        pop();\n        pop();\n        push(p5);\n        restore();\n        return;\n      }\n    }\n    divpoly();\n    p7 = pop();\n    push(p3);\n    push(p2);\n    push(p7);\n    multiply();\n    subtract();\n    p3 = pop();\n    if (isZeroAtomOrTensor(p3)) {\n      push(p7);\n      restore();\n      return;\n    }\n    push(p2);\n    push(p9);\n    factorpoly();\n    p2 = pop();\n    expand_get_C();\n    expand_get_B();\n    expand_get_A();\n    if (istensor(p4)) {\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      inv();\n      expanding = prev_expanding;\n      push(p3);\n      inner();\n      push(p2);\n      inner();\n    } else {\n      push(p3);\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p2);\n      multiply();\n    }\n    push(p7);\n    add();\n    return restore();\n  };\n\n  expand_tensor = function() {\n    var i, o, ref;\n    i = 0;\n    push(p5);\n    copy_tensor();\n    p5 = pop();\n    for (i = o = 0, ref = p5.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p5.tensor.elem[i]);\n      push(p9);\n      expand();\n      p5.tensor.elem[i] = pop();\n    }\n    return push(p5);\n  };\n\n  remove_negative_exponents = function() {\n    var h, i, j, k, n, o, ref;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    n = 0;\n    h = tos;\n    factors(p2);\n    factors(p3);\n    n = tos - h;\n    j = 0;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1 = stack[h + i];\n      if (car(p1) !== symbol(POWER)) {\n        continue;\n      }\n      if (cadr(p1) !== p9) {\n        continue;\n      }\n      push(caddr(p1));\n      k = pop_integer();\n      if (isNaN(k)) {\n        continue;\n      }\n      if (k < j) {\n        j = k;\n      }\n    }\n    moveTos(h);\n    if (j === 0) {\n      return;\n    }\n    push(p2);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    p2 = pop();\n    push(p3);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    return p3 = pop();\n  };\n\n  expand_get_C = function() {\n    var a, h, i, i1, j, n, o, prev_expanding, ref, ref1;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    h = tos;\n    if (car(p2) === symbol(MULTIPLY)) {\n      p1 = cdr(p2);\n      while (iscons(p1)) {\n        p5 = car(p1);\n        expand_get_CF();\n        p1 = cdr(p1);\n      }\n    } else {\n      p5 = p2;\n      expand_get_CF();\n    }\n    n = tos - h;\n    if (n === 1) {\n      p4 = pop();\n      return;\n    }\n    p4 = alloc_tensor(n * n);\n    p4.tensor.ndim = 2;\n    p4.tensor.dim[0] = n;\n    p4.tensor.dim[1] = n;\n    a = h;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(stack[a + j]);\n        push(p9);\n        push_integer(i);\n        power();\n        prev_expanding = expanding;\n        expanding = 1;\n        divide();\n        expanding = prev_expanding;\n        push(p9);\n        filter();\n        p4.tensor.elem[n * i + j] = pop();\n      }\n    }\n    return moveTos(tos - n);\n  };\n\n  expand_get_CF = function() {\n    var d, i, j, n, o, prev_expanding, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    if (!Find(p5, p9)) {\n      return;\n    }\n    prev_expanding = expanding;\n    expanding = 1;\n    trivial_divide();\n    expanding = prev_expanding;\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p6 = cadr(p5);\n    } else {\n      n = 1;\n      p6 = p5;\n    }\n    push(p6);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      results.push((function() {\n        var i1, ref1, results1;\n        results1 = [];\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p8);\n          push(p6);\n          push_integer(i);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          expanding = prev_expanding;\n          push(p9);\n          push_integer(j);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          results1.push(expanding = prev_expanding);\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  trivial_divide = function() {\n    var h;\n    h = 0;\n    if (car(p2) === symbol(MULTIPLY)) {\n      h = tos;\n      p0 = cdr(p2);\n      while (iscons(p0)) {\n        if (!equal(car(p0), p5)) {\n          push(car(p0));\n          Eval();\n        }\n        p0 = cdr(p0);\n      }\n      multiply_all(tos - h);\n    } else {\n      push_integer(1);\n    }\n    return p8 = pop();\n  };\n\n  expand_get_B = function() {\n    var i, n, o, prev_expanding, ref;\n    i = 0;\n    n = 0;\n    if (!istensor(p4)) {\n      return;\n    }\n    n = p4.tensor.dim[0];\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p3);\n      push(p9);\n      push_integer(i);\n      power();\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p9);\n      filter();\n      p8.tensor.elem[i] = pop();\n    }\n    return p3 = p8;\n  };\n\n  expand_get_A = function() {\n    var h, i, n, o, ref;\n    h = 0;\n    i = 0;\n    n = 0;\n    if (!istensor(p4)) {\n      push(p2);\n      reciprocate();\n      p2 = pop();\n      return;\n    }\n    h = tos;\n    if (car(p2) === symbol(MULTIPLY)) {\n      p8 = cdr(p2);\n      while (iscons(p8)) {\n        p5 = car(p8);\n        expand_get_AF();\n        p8 = cdr(p8);\n      }\n    } else {\n      p5 = p2;\n      expand_get_AF();\n    }\n    n = tos - h;\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p8.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    return p2 = p8;\n  };\n\n  expand_get_AF = function() {\n    var d, i, j, n, o, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 1;\n    if (!Find(p5, p9)) {\n      return;\n    }\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p5 = cadr(p5);\n    }\n    push(p5);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n    for (i = o = ref = n; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      results.push((function() {\n        var i1, ref1, results1;\n        results1 = [];\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p5);\n          push_integer(i);\n          power();\n          reciprocate();\n          push(p9);\n          push_integer(j);\n          power();\n          results1.push(multiply());\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  Eval_expcos = function() {\n    push(cadr(p1));\n    Eval();\n    return expcos();\n  };\n\n  expcos = function() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    add();\n    return restore();\n  };\n\n  Eval_expsin = function() {\n    push(cadr(p1));\n    Eval();\n    return expsin();\n  };\n\n  expsin = function() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    subtract();\n    return restore();\n  };\n\n  Eval_factor = function() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    factor();\n    p1 = cdddr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factor_again();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  factor_again = function() {\n    var h, n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        factor_term();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      factor_term();\n    }\n    n = tos - h;\n    if (n > 1) {\n      multiply_all_noexpand(n);\n    }\n    return restore();\n  };\n\n  factor_term = function() {\n    save();\n    factorpoly();\n    p1 = pop();\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  factor = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isinteger(p1)) {\n      push(p1);\n      factor_number();\n    } else {\n      push(p1);\n      push(p2);\n      factorpoly();\n    }\n    return restore();\n  };\n\n  factor_small_number = function() {\n    var d, expo, i, n, o, ref;\n    i = 0;\n    save();\n    n = pop_integer();\n    if (isNaN(n)) {\n      stop(\"number too big to factor\");\n    }\n    if (n < 0) {\n      n = -n;\n    }\n    for (i = o = 0, ref = MAXPRIMETAB; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      d = primetab[i];\n      if (d > n / d) {\n        break;\n      }\n      expo = 0;\n      while (n % d === 0) {\n        n /= d;\n        expo++;\n      }\n      if (expo) {\n        push_integer(d);\n        push_integer(expo);\n      }\n    }\n    if (n > 1) {\n      push_integer(n);\n      push_integer(1);\n    }\n    return restore();\n  };\n\n  factorial = function() {\n    var n;\n    n = 0;\n    save();\n    p1 = pop();\n    push(p1);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(FACTORIAL);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    bignum_factorial(n);\n    return restore();\n  };\n\n  simplifyfactorials = function() {\n    var x;\n    x = 0;\n    save();\n    x = expanding;\n    expanding = 0;\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      push(zero);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        simplifyfactorials();\n        add();\n        p1 = cdr(p1);\n      }\n      expanding = x;\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      sfac_product();\n      expanding = x;\n      restore();\n      return;\n    }\n    push(p1);\n    expanding = x;\n    return restore();\n  };\n\n  sfac_product = function() {\n    var i, i1, j, j1, n, o, ref, ref1, ref2, ref3, s;\n    i = 0;\n    j = 0;\n    n = 0;\n    s = tos;\n    p1 = cdr(p1);\n    n = 0;\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      n++;\n    }\n    for (i = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n      for (j = i1 = ref1 = i + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (stack[s + j] === symbol(NIL)) {\n          continue;\n        }\n        sfac_product_f(s, i, j);\n      }\n    }\n    push(one);\n    for (i = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n      push(stack[s + i]);\n      multiply();\n    }\n    p1 = pop();\n    moveTos(tos - n);\n    return push(p1);\n  };\n\n  sfac_product_f = function(s, a, b) {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    p1 = stack[s + a];\n    p2 = stack[s + b];\n    if (ispower(p1)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n    if (ispower(p2)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n    if (isfactorial(p1) && isfactorial(p2)) {\n      push(p3);\n      push(p4);\n      add();\n      yyexpand();\n      n = pop_integer();\n      if (n !== 0) {\n        return;\n      }\n      push(cadr(p1));\n      push(cadr(p2));\n      subtract();\n      yyexpand();\n      n = pop_integer();\n      if (n === 0 || isNaN(n)) {\n        return;\n      }\n      if (n < 0) {\n        n = -n;\n        p5 = p1;\n        p1 = p2;\n        p2 = p5;\n        p5 = p3;\n        p3 = p4;\n        p4 = p5;\n      }\n      push(one);\n      for (i = o = 1, ref = n; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        push(cadr(p2));\n        push_integer(i);\n        add();\n        push(p3);\n        power();\n        multiply();\n      }\n      stack[s + a] = pop();\n      return stack[s + b] = symbol(NIL);\n    }\n  };\n\n  polycoeff = 0;\n\n  factpoly_expo = 0;\n\n  factorpoly = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (!Find(p1, p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (!ispolyexpandedform(p1, p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (!issymbol(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n    push(p1);\n    push(p2);\n    yyfactorpoly();\n    return restore();\n  };\n\n  yyfactorpoly = function() {\n    var checkingTheDivision, dividend, foundComplexRoot, foundRealRoot, h, i, i1, j1, l1, o, prev_expanding, previousFactorisation, ref, ref1, ref2, ref3, remainingPoly, whichRootsAreWeFinding;\n    h = 0;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    if (isfloating(p1)) {\n      stop(\"floating point numbers in polynomial\");\n    }\n    polycoeff = tos;\n    push(p1);\n    push(p2);\n    factpoly_expo = coeff() - 1;\n    rationalize_coefficients(h);\n    whichRootsAreWeFinding = \"real\";\n    remainingPoly = null;\n    while (factpoly_expo > 0) {\n      if (isZeroAtomOrTensor(stack[polycoeff + 0])) {\n        push_integer(1);\n        p4 = pop();\n        push_integer(0);\n        p5 = pop();\n      } else {\n        if (whichRootsAreWeFinding === \"real\") {\n          foundRealRoot = get_factor_from_real_root();\n        } else if (whichRootsAreWeFinding === \"complex\") {\n          foundComplexRoot = get_factor_from_complex_root(remainingPoly);\n        }\n      }\n      if (whichRootsAreWeFinding === \"real\") {\n        if (foundRealRoot === 0) {\n          whichRootsAreWeFinding = \"complex\";\n          continue;\n        } else {\n          push(p4);\n          push(p2);\n          multiply();\n          push(p5);\n          add();\n          p8 = pop();\n          if (DEBUG) {\n            console.log(\"success\\nFACTOR=\" + p8);\n          }\n\n          /*\n          if (isnegativeterm(p4))\n            push(p8)\n            negate()\n            p8 = pop()\n            push(p7)\n            negate_noexpand()\n            p7 = pop()\n           */\n          push(p7);\n          push(p8);\n          multiply_noexpand();\n          p7 = pop();\n          yydivpoly();\n          while (factpoly_expo && isZeroAtomOrTensor(stack[polycoeff + factpoly_expo])) {\n            factpoly_expo--;\n          }\n          push(zero);\n          for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            push(stack[polycoeff + i]);\n            push(p2);\n            push_integer(i);\n            power();\n            multiply();\n            add();\n          }\n          remainingPoly = pop();\n        }\n      } else if (whichRootsAreWeFinding === \"complex\") {\n        if (foundComplexRoot === 0) {\n          break;\n        } else {\n          push(p4);\n          push(p2);\n          subtract();\n          push(p4);\n          conjugate();\n          push(p2);\n          subtract();\n          multiply();\n          p8 = pop();\n          if (DEBUG) {\n            console.log(\"success\\nFACTOR=\" + p8);\n          }\n\n          /*\n          if (isnegativeterm(p4))\n            push(p8)\n            negate()\n            p8 = pop()\n            push(p7)\n            negate_noexpand()\n            p7 = pop()\n           */\n          push(p7);\n          previousFactorisation = pop();\n          push(p7);\n          push(p8);\n          multiply_noexpand();\n          p7 = pop();\n          if (remainingPoly == null) {\n            push(zero);\n            for (i = i1 = 0, ref1 = factpoly_expo; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n              push(stack[polycoeff + i]);\n              push(p2);\n              push_integer(i);\n              power();\n              multiply();\n              add();\n            }\n            remainingPoly = pop();\n          }\n          dividend = remainingPoly;\n          push(dividend);\n          push(p8);\n          push(p2);\n          divpoly();\n          remainingPoly = pop();\n          push(remainingPoly);\n          push(p8);\n          multiply();\n          checkingTheDivision = pop();\n          if (!equal(checkingTheDivision, dividend)) {\n            if (DEBUG) {\n              console.log(\"we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting\");\n            }\n            if (DEBUG) {\n              console.log(\"so just returning previousFactorisation times dividend: \" + previousFactorisation + \" * \" + dividend);\n            }\n            push(previousFactorisation);\n            push(dividend);\n            prev_expanding = expanding;\n            expanding = 0;\n            yycondense();\n            expanding = prev_expanding;\n            multiply_noexpand();\n            p7 = pop();\n            stack[h] = p7;\n            moveTos(h + 1);\n            restore();\n            return;\n          }\n\n          /*\n          if compare_numbers(startingDegree, remainingDegree)\n             * ok even if we found a complex root that\n             * together with the conjugate generates a poly in Z,\n             * that doesn't mean that the division would end up in Z.\n             * Example: 1+x^2+x^4+x^6 has +i and -i as one of its roots\n             * so a factor is 1+x^2 ( = (x+i)*(x-i))\n             * BUT\n           */\n          for (i = j1 = 0, ref2 = factpoly_expo; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n            pop();\n          }\n          push(remainingPoly);\n          push(p2);\n          coeff();\n          factpoly_expo -= 2;\n        }\n      }\n    }\n    push(zero);\n    for (i = l1 = 0, ref3 = factpoly_expo; 0 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[polycoeff + i]);\n      push(p2);\n      push_integer(i);\n      power();\n      multiply();\n      add();\n    }\n    p1 = pop();\n    if (DEBUG) {\n      console.log(\"POLY=\" + p1);\n    }\n    push(p1);\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    p1 = pop();\n    if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff + factpoly_expo])) {\n      push(p1);\n      negate();\n      p1 = pop();\n      push(p7);\n      negate_noexpand();\n      p7 = pop();\n    }\n    push(p7);\n    push(p1);\n    multiply_noexpand();\n    p7 = pop();\n    if (DEBUG) {\n      console.log(\"RESULT=\" + p7);\n    }\n    stack[h] = p7;\n    moveTos(h + 1);\n    return restore();\n  };\n\n  rationalize_coefficients = function(h) {\n    var i, i1, o, ref, ref1, ref2, ref3;\n    i = 0;\n    p7 = one;\n    for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      push(stack[i]);\n      denominator();\n      push(p7);\n      lcm();\n      p7 = pop();\n    }\n    for (i = i1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      push(p7);\n      push(stack[i]);\n      multiply();\n      stack[i] = pop();\n    }\n    push(p7);\n    reciprocate();\n    p7 = pop();\n    if (DEBUG) {\n      return console.log(\"rationalize_coefficients result\");\n    }\n  };\n\n  get_factor_from_real_root = function() {\n    var a0, an, h, i, i1, j, j1, l1, m1, na0, nan, o, ref, ref1, ref2, ref3, ref4, rootsTries_i, rootsTries_j;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n    if (DEBUG) {\n      push(zero);\n      for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(stack[polycoeff + i]);\n        push(p2);\n        push_integer(i);\n        power();\n        multiply();\n        add();\n      }\n      p1 = pop();\n      console.log(\"POLY=\" + p1);\n    }\n    h = tos;\n    an = tos;\n    push(stack[polycoeff + factpoly_expo]);\n    divisors_onstack();\n    nan = tos - an;\n    a0 = tos;\n    push(stack[polycoeff + 0]);\n    divisors_onstack();\n    na0 = tos - a0;\n    if (DEBUG) {\n      console.log(\"divisors of base term\");\n      for (i = i1 = 0, ref1 = na0; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        console.log(\", \" + stack[a0 + i]);\n      }\n      console.log(\"divisors of leading term\");\n      for (i = j1 = 0, ref2 = nan; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        console.log(\", \" + stack[an + i]);\n      }\n    }\n    for (rootsTries_i = l1 = 0, ref3 = nan; 0 <= ref3 ? l1 < ref3 : l1 > ref3; rootsTries_i = 0 <= ref3 ? ++l1 : --l1) {\n      for (rootsTries_j = m1 = 0, ref4 = na0; 0 <= ref4 ? m1 < ref4 : m1 > ref4; rootsTries_j = 0 <= ref4 ? ++m1 : --m1) {\n        p4 = stack[an + rootsTries_i];\n        p5 = stack[a0 + rootsTries_j];\n        push(p5);\n        push(p4);\n        divide();\n        negate();\n        p3 = pop();\n        Evalpoly();\n        if (DEBUG) {\n          console.log(\"try A=\" + p4);\n          console.log(\", B=\" + p5);\n          console.log(\", root \" + p2);\n          console.log(\"=-B/A=\" + p3);\n          console.log(\", POLY(\" + p3);\n          console.log(\")=\" + p6);\n        }\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n          return 1;\n        }\n        push(p5);\n        negate();\n        p5 = pop();\n        push(p3);\n        negate();\n        p3 = pop();\n        Evalpoly();\n        if (DEBUG) {\n          console.log(\"try A=\" + p4);\n          console.log(\", B=\" + p5);\n          console.log(\", root \" + p2);\n          console.log(\"=-B/A=\" + p3);\n          console.log(\", POLY(\" + p3);\n          console.log(\")=\" + p6);\n        }\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n          return 1;\n        }\n      }\n    }\n    moveTos(h);\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root returning 0\");\n    }\n    return 0;\n  };\n\n  get_factor_from_complex_root = function(remainingPoly) {\n    var a0, an, h, i, i1, j, na0, nan, o, rootsTries_i, rootsTries_j;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n    if (factpoly_expo <= 2) {\n      if (DEBUG) {\n        console.log(\"no more factoring via complex roots to be found in polynomial of degree <= 2\");\n      }\n      return 0;\n    }\n    p1 = remainingPoly;\n    if (DEBUG) {\n      console.log(\"complex root finding for POLY=\" + p1);\n    }\n    h = tos;\n    an = tos;\n    push_integer(-1);\n    push_rational(2, 3);\n    power();\n    rect();\n    p4 = pop();\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + p4);\n    }\n    push(p4);\n    p3 = pop();\n    push(p3);\n    Evalpoly();\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + p6);\n    }\n    if (isZeroAtomOrTensor(p6)) {\n      moveTos(h);\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n      return 1;\n    }\n    push_integer(1);\n    push_rational(2, 3);\n    power();\n    rect();\n    p4 = pop();\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + p4);\n    }\n    push(p4);\n    p3 = pop();\n    push(p3);\n    Evalpoly();\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + p6);\n    }\n    if (isZeroAtomOrTensor(p6)) {\n      moveTos(h);\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n      return 1;\n    }\n    for (rootsTries_i = o = -10; o <= 10; rootsTries_i = ++o) {\n      for (rootsTries_j = i1 = 1; i1 <= 5; rootsTries_j = ++i1) {\n        push_integer(rootsTries_i);\n        push_integer(rootsTries_j);\n        push(imaginaryunit);\n        multiply();\n        add();\n        rect();\n        p4 = pop();\n        push(p4);\n        p3 = pop();\n        push(p3);\n        Evalpoly();\n        if (isZeroAtomOrTensor(p6)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"found complex root: \" + p6);\n          }\n          return 1;\n        }\n      }\n    }\n    moveTos(h);\n    if (DEBUG) {\n      console.log(\"get_factor_from_complex_root returning 0\");\n    }\n    return 0;\n  };\n\n  yydivpoly = function() {\n    var i, o, ref;\n    i = 0;\n    p6 = zero;\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      push(stack[polycoeff + i]);\n      stack[polycoeff + i] = p6;\n      push(p4);\n      divide();\n      p6 = pop();\n      push(stack[polycoeff + i - 1]);\n      push(p6);\n      push(p5);\n      multiply();\n      subtract();\n      stack[polycoeff + i - 1] = pop();\n    }\n    stack[polycoeff + 0] = p6;\n    if (DEBUG) {\n      return console.log(\"yydivpoly Q:\");\n    }\n  };\n\n  Evalpoly = function() {\n    var i, o, ref;\n    i = 0;\n    push(zero);\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o <= 0 : o >= 0; i = ref <= 0 ? ++o : --o) {\n      push(p3);\n      multiply();\n      push(stack[polycoeff + i]);\n      if (DEBUG) {\n        console.log(\"Evalpoly top of stack:\");\n        console.log(print_list(stack[tos - i]));\n      }\n      add();\n    }\n    return p6 = pop();\n  };\n\n  factors = function(p) {\n    var h;\n    h = tos;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        push_term_factors(car(p));\n        p = cdr(p);\n      }\n    } else {\n      push_term_factors(p);\n    }\n    return tos - h;\n  };\n\n  push_term_factors = function(p) {\n    var results;\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return push(p);\n    }\n  };\n\n\n  /*\n  Remove terms that involve a given symbol or expression. For example...\n  \n    filter(x^2 + x + 1, x)    =>  1\n  \n    filter(x^2 + x + 1, x^2)  =>  x + 1\n   */\n\n  Eval_filter = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      filter();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n\n  /*\n   For example...\n  \n    push(F)\n    push(X)\n    filter()\n    F = pop()\n   */\n\n  filter = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    filter_main();\n    return restore();\n  };\n\n  filter_main = function() {\n    if (car(p1) === symbol(ADD)) {\n      return filter_sum();\n    } else if (istensor(p1)) {\n      return filter_tensor();\n    } else if (Find(p1, p2)) {\n      return push_integer(0);\n    } else {\n      return push(p1);\n    }\n  };\n\n  filter_sum = function() {\n    var results;\n    push_integer(0);\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      filter();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  filter_tensor = function() {\n    var i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    n = p1.tensor.nelem;\n    p3 = alloc_tensor(n);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      filter();\n      p3.tensor.elem[i] = pop();\n    }\n    return push(p3);\n  };\n\n  Eval_float = function() {\n    evaluatingAsFloats++;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    return evaluatingAsFloats--;\n  };\n\n  checkFloatHasWorkedOutCompletely = function(nodeToCheck) {\n    var numberOfEs, numberOfMults, numberOfPIs, numberOfPowers, numberOfSums;\n    numberOfPowers = countOccurrencesOfSymbol(symbol(POWER), nodeToCheck);\n    numberOfPIs = countOccurrencesOfSymbol(symbol(PI), nodeToCheck);\n    numberOfEs = countOccurrencesOfSymbol(symbol(E), nodeToCheck);\n    numberOfMults = countOccurrencesOfSymbol(symbol(MULTIPLY), nodeToCheck);\n    numberOfSums = countOccurrencesOfSymbol(symbol(ADD), nodeToCheck);\n    if (DEBUG) {\n      console.log(\"     ... numberOfPowers: \" + numberOfPowers);\n      console.log(\"     ... numberOfPIs: \" + numberOfPIs);\n      console.log(\"     ... numberOfEs: \" + numberOfEs);\n      console.log(\"     ... numberOfMults: \" + numberOfMults);\n      console.log(\"     ... numberOfSums: \" + numberOfSums);\n    }\n    if (numberOfPowers > 1 || numberOfPIs > 0 || numberOfEs > 0 || numberOfMults > 1 || numberOfSums > 1) {\n      return stop(\"float: some unevalued parts in \" + nodeToCheck);\n    }\n  };\n\n  zzfloat = function() {\n    save();\n    evaluatingAsFloats++;\n    Eval();\n    yyfloat();\n    Eval();\n    evaluatingAsFloats--;\n    return restore();\n  };\n\n  yyfloat = function() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    evaluatingAsFloats++;\n    save();\n    p1 = pop();\n    if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        push(car(p1));\n        yyfloat();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        yyfloat();\n        p1.tensor.elem[i] = pop();\n      }\n      push(p1);\n    } else if (p1.k === NUM) {\n      push(p1);\n      bignum_float();\n    } else if (p1 === symbol(PI)) {\n      push_double(Math.PI);\n    } else if (p1 === symbol(E)) {\n      push_double(Math.E);\n    } else {\n      push(p1);\n    }\n    restore();\n    return evaluatingAsFloats--;\n  };\n\n  Eval_floor = function() {\n    push(cadr(p1));\n    Eval();\n    return yfloor();\n  };\n\n  yfloor = function() {\n    save();\n    yyfloor();\n    return restore();\n  };\n\n  yyfloor = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(FLOOR);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.floor(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n    if (isnegativenumber(p1)) {\n      push_integer(-1);\n      return add();\n    }\n  };\n\n\n  /*\n  x=0\n  y=2\n  for(do(x=sqrt(2+x),y=2*y/x),k,1,9)\n  float(y)\n  \n  X: k\n  B: 1...9\n  \n  1st parameter is the body\n  2nd parameter is the variable to loop with\n  3rd and 4th are the limits\n   */\n\n  Eval_for = function() {\n    var i, j, k, loopingVariable, o, ref, ref1;\n    i = 0;\n    j = 0;\n    k = 0;\n    loopingVariable = caddr(p1);\n    if (!issymbol(loopingVariable)) {\n      stop(\"for: 2nd arg should be the variable to loop over\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    p4 = get_binding(loopingVariable);\n    for (i = o = ref = j, ref1 = k; ref <= ref1 ? o <= ref1 : o >= ref1; i = ref <= ref1 ? ++o : --o) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(loopingVariable, p5);\n      push(cadr(p1));\n      Eval();\n      pop();\n    }\n    set_binding(loopingVariable, p4);\n    return push_symbol(NIL);\n  };\n\n  Eval_gamma = function() {\n    push(cadr(p1));\n    Eval();\n    return gamma();\n  };\n\n  gamma = function() {\n    save();\n    gammaf();\n    return restore();\n  };\n\n  gammaf = function() {\n    p1 = pop();\n    if (isrational(p1) && MEQUAL(p1.q.a, 1) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_rational(1, 2);\n      power();\n      return;\n    }\n    if (isrational(p1) && MEQUAL(p1.q.a, 3) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_rational(1, 2);\n      power();\n      push_rational(1, 2);\n      multiply();\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_integer(-1);\n      multiply();\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push(p1);\n      multiply();\n      sine();\n      push(p1);\n      multiply();\n      push(p1);\n      negate();\n      gamma();\n      multiply();\n      divide();\n      return;\n    }\n    if (car(p1) === symbol(ADD)) {\n      gamma_of_sum();\n      return;\n    }\n    push_symbol(GAMMA);\n    push(p1);\n    list(2);\n  };\n\n  gamma_of_sum = function() {\n    p3 = cdr(p1);\n    if (isrational(car(p3)) && MEQUAL(car(p3).q.a, 1) && MEQUAL(car(p3).q.b, 1)) {\n      push(cadr(p3));\n      push(cadr(p3));\n      gamma();\n      return multiply();\n    } else {\n      if (isrational(car(p3)) && MEQUAL(car(p3).q.a, -1) && MEQUAL(car(p3).q.b, 1)) {\n        push(cadr(p3));\n        gamma();\n        push(cadr(p3));\n        push_integer(-1);\n        add();\n        return divide();\n      } else {\n        push_symbol(GAMMA);\n        push(p1);\n        list(2);\n      }\n    }\n  };\n\n  Eval_gcd = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      gcd();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  gcd = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    gcd_main();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  gcd_main = function() {\n    var polyVar;\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    if (equal(p1, p2)) {\n      push(p1);\n      return;\n    }\n    if (isrational(p1) && isrational(p2)) {\n      push(p1);\n      push(p2);\n      gcd_numbers();\n      return;\n    }\n    if ((polyVar = areunivarpolysfactoredorexpandedform(p1, p2))) {\n      gcd_polys(polyVar);\n      return;\n    }\n    if (car(p1) === symbol(ADD) && car(p2) === symbol(ADD)) {\n      gcd_sum_sum();\n      return;\n    }\n    if (car(p1) === symbol(ADD)) {\n      gcd_sum(p1);\n      p1 = pop();\n    }\n    if (car(p2) === symbol(ADD)) {\n      gcd_sum(p2);\n      p2 = pop();\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      gcd_sum_product();\n      return;\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      gcd_product_sum();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n    return gcd_powers_with_same_base();\n  };\n\n  areunivarpolysfactoredorexpandedform = function(p1, p2) {\n    var polyVar;\n    if (polyVar = isunivarpolyfactoredorexpandedform(p1)) {\n      if (isunivarpolyfactoredorexpandedform(p2, polyVar)) {\n        return polyVar;\n      }\n    }\n    return false;\n  };\n\n  gcd_polys = function(polyVar) {\n    push(p1);\n    push(polyVar);\n    factorpoly();\n    p1 = pop();\n    push(p2);\n    push(polyVar);\n    factorpoly();\n    p2 = pop();\n    if (DEBUG) {\n      console.log(\"factored polys:\");\n    }\n    if (DEBUG) {\n      console.log(\"p1:\" + p1.toString());\n    }\n    if (DEBUG) {\n      console.log(\"p2:\" + p2.toString());\n    }\n    if (car(p1) === symbol(MULTIPLY) || car(p2) === symbol(MULTIPLY)) {\n      if (car(p1) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push(one);\n        list(3);\n        p1 = pop();\n      }\n      if (car(p2) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p2);\n        push(one);\n        list(3);\n        p2 = pop();\n      }\n    }\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n    gcd_powers_with_same_base();\n    return true;\n  };\n\n  gcd_product_product = function() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n    while (iscons(p3)) {\n      p4 = cdr(p2);\n      while (iscons(p4)) {\n        push(car(p3));\n        push(car(p4));\n        gcd();\n        multiply();\n        p4 = cdr(p4);\n      }\n      results.push(p3 = cdr(p3));\n    }\n    return results;\n  };\n\n  gcd_powers_with_same_base = function() {\n    if (car(p1) === symbol(POWER)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n    if (car(p2) === symbol(POWER)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n    if (!equal(p1, p2)) {\n      push(one);\n      return;\n    }\n    if (isNumericAtom(p3) && isNumericAtom(p4)) {\n      push(p1);\n      if (lessp(p3, p4)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n      power();\n      return;\n    }\n    push(p3);\n    push(p4);\n    divide();\n    p5 = pop();\n    if (isNumericAtom(p5)) {\n      push(p1);\n      if (car(p3) === symbol(MULTIPLY) && isNumericAtom(cadr(p3))) {\n        p5 = cadr(p3);\n      } else {\n        p5 = one;\n      }\n      if (car(p4) === symbol(MULTIPLY) && isNumericAtom(cadr(p4))) {\n        p6 = cadr(p4);\n      } else {\n        p6 = one;\n      }\n      if (lessp(p5, p6)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n      power();\n      return;\n    }\n    push(p3);\n    push(p4);\n    subtract();\n    p5 = pop();\n    if (!isNumericAtom(p5)) {\n      push(one);\n      return;\n    }\n    push(p1);\n    if (isnegativenumber(p5)) {\n      push(p3);\n    } else {\n      push(p4);\n    }\n    return power();\n  };\n\n  gcd_sum_sum = function() {\n    if (length(p1) !== length(p2)) {\n      push(one);\n      return;\n    }\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n    p3 = pop();\n    p4 = cdr(p2);\n    push(car(p4));\n    p4 = cdr(p4);\n    while (iscons(p4)) {\n      push(car(p4));\n      gcd();\n      p4 = cdr(p4);\n    }\n    p4 = pop();\n    push(p1);\n    push(p3);\n    divide();\n    p5 = pop();\n    push(p2);\n    push(p4);\n    divide();\n    p6 = pop();\n    if (equal(p5, p6)) {\n      push(p5);\n      push(p3);\n      push(p4);\n      gcd();\n      return multiply();\n    } else {\n      return push(one);\n    }\n  };\n\n  gcd_sum = function(p) {\n    var results;\n    p = cdr(p);\n    push(car(p));\n    p = cdr(p);\n    results = [];\n    while (iscons(p)) {\n      push(car(p));\n      gcd();\n      results.push(p = cdr(p));\n    }\n    return results;\n  };\n\n  gcd_sum_product = function() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n    while (iscons(p3)) {\n      push(car(p3));\n      push(p2);\n      gcd();\n      multiply();\n      results.push(p3 = cdr(p3));\n    }\n    return results;\n  };\n\n  gcd_product_sum = function() {\n    var results;\n    push(one);\n    p4 = cdr(p2);\n    results = [];\n    while (iscons(p4)) {\n      push(p1);\n      push(car(p4));\n      gcd();\n      multiply();\n      results.push(p4 = cdr(p4));\n    }\n    return results;\n  };\n\n  guess = function() {\n    var p;\n    p = pop();\n    push(p);\n    if (Find(p, symbol(SYMBOL_X))) {\n      return push_symbol(SYMBOL_X);\n    } else if (Find(p, symbol(SYMBOL_Y))) {\n      return push_symbol(SYMBOL_Y);\n    } else if (Find(p, symbol(SYMBOL_Z))) {\n      return push_symbol(SYMBOL_Z);\n    } else if (Find(p, symbol(SYMBOL_T))) {\n      return push_symbol(SYMBOL_T);\n    } else if (Find(p, symbol(SYMBOL_S))) {\n      return push_symbol(SYMBOL_S);\n    } else {\n      return push_symbol(SYMBOL_X);\n    }\n  };\n\n  hermite = function() {\n    save();\n    yyhermite();\n    return restore();\n  };\n\n  yyhermite = function() {\n    var n;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(HERMITE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    if (issymbol(p1)) {\n      return yyhermite2(n);\n    } else {\n      p3 = p1;\n      p1 = symbol(SECRETX);\n      yyhermite2(n);\n      p1 = p3;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      return Eval();\n    }\n  };\n\n  yyhermite2 = function(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p4 = pop();\n    results = [];\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p4;\n      p4 = pop();\n      push(p1);\n      push(p4);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(2);\n      results.push(multiply());\n    }\n    return results;\n  };\n\n  hilbert = function() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p2 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 2) {\n      push_symbol(HILBERT);\n      push(p2);\n      list(2);\n      restore();\n      return;\n    }\n    push_zero_matrix(n, n);\n    p1 = pop();\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push_integer(i + j + 1);\n        inverse();\n        p1.tensor.elem[i * n + j] = pop();\n      }\n    }\n    push(p1);\n    return restore();\n  };\n\n\n  /*\n   Returns the coefficient of the imaginary part of complex z\n  \n    z    imag(z)\n    -    -------\n  \n    a + i b    b\n  \n    exp(i a)  sin(a)\n   */\n\n  DEBUG_IMAG = false;\n\n  Eval_imag = function() {\n    push(cadr(p1));\n    Eval();\n    return imag();\n  };\n\n  imag = function() {\n    save();\n    rect();\n    p1 = pop();\n    if (DEBUG_IMAG) {\n      console.log(\"IMAGE of \" + p1);\n    }\n    push(p1);\n    push(p1);\n    conjugate();\n    if (DEBUG_IMAG) {\n      console.log(\" image: conjugate result: \" + stack[tos - 1]);\n    }\n    subtract();\n    push_integer(2);\n    divide();\n    if (DEBUG_IMAG) {\n      console.log(\" image: 1st divide result: \" + stack[tos - 1]);\n    }\n    push(imaginaryunit);\n    divide();\n    if (DEBUG_IMAG) {\n      console.log(\" image: 2nd divide result: \" + stack[tos - 1]);\n    }\n    return restore();\n  };\n\n  index_function = function(n) {\n    var i, i1, j1, k, l1, m, m1, ndim, nelem, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    save();\n    s = tos - n;\n    p1 = stack[s];\n    ndim = p1.tensor.ndim;\n    m = n - 1;\n    if (m > ndim) {\n      stop(\"too many indices for tensor\");\n    }\n    k = 0;\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 1]);\n      t = pop_integer();\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"index out of range\");\n      }\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n    if (ndim === m) {\n      moveTos(tos - n);\n      push(p1.tensor.elem[k]);\n      restore();\n      return;\n    }\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n    nelem = 1;\n    for (i = j1 = ref3 = m, ref4 = ndim; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; i = ref3 <= ref4 ? ++j1 : --j1) {\n      nelem *= p1.tensor.dim[i];\n    }\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - m;\n    for (i = l1 = ref5 = m, ref6 = ndim; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n      p2.tensor.dim[i - m] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref7 = nelem; 0 <= ref7 ? m1 < ref7 : m1 > ref7; i = 0 <= ref7 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[k + i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  set_component = function(n) {\n    var i, i1, j1, k, l1, m, m1, n1, ndim, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    t = 0;\n    save();\n    if (n < 3) {\n      stop(\"error in indexed assign\");\n    }\n    s = tos - n;\n    p2 = stack[s];\n    p1 = stack[s + 1];\n    if (!istensor(p1)) {\n      stop(\"error in indexed assign: assigning to something that is not a tensor\");\n    }\n    ndim = p1.tensor.ndim;\n    m = n - 2;\n    if (m > ndim) {\n      stop(\"error in indexed assign\");\n    }\n    k = 0;\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 2]);\n      t = pop_integer();\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"error in indexed assign\\n\");\n      }\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = j1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = l1 = 0, ref4 = p1.tensor.nelem; 0 <= ref4 ? l1 < ref4 : l1 > ref4; i = 0 <= ref4 ? ++l1 : --l1) {\n      p3.tensor.elem[i] = p1.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p3);\n    p1 = p3;\n    if (ndim === m) {\n      if (istensor(p2)) {\n        stop(\"error in indexed assign\");\n      }\n      p1.tensor.elem[k] = p2;\n      check_tensor_dimensions(p1);\n      moveTos(tos - n);\n      push(p1);\n      restore();\n      return;\n    }\n    if (!istensor(p2)) {\n      stop(\"error in indexed assign\");\n    }\n    if (ndim - m !== p2.tensor.ndim) {\n      stop(\"error in indexed assign\");\n    }\n    for (i = m1 = 0, ref5 = p2.tensor.ndim; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      if (p1.tensor.dim[m + i] !== p2.tensor.dim[i]) {\n        stop(\"error in indexed assign\");\n      }\n    }\n    for (i = n1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? n1 < ref6 : n1 > ref6; i = 0 <= ref6 ? ++n1 : --n1) {\n      p1.tensor.elem[k + i] = p2.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p1);\n    return restore();\n  };\n\n\n  /* dot =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  \n  The inner (or dot) operator gives products of vectors,\n  matrices, and tensors.\n  \n  Note that for Algebrite, the elements of a vector/matrix\n  can only be scalars. This allows for example to flesh out\n  matrix multiplication using the usual multiplication.\n  So for example block-representations are not allowed.\n  \n  There is an aweful lot of confusion between sw packages on\n  what dot and inner do.\n  \n  First off, the \"dot\" operator is different from the\n  mathematical notion of dot product, which can be\n  slightly confusing.\n  \n  The mathematical notion of dot product is here:\n    http://mathworld.wolfram.com/DotProduct.html\n  \n  However, \"dot\" does that and a bunch of other things,\n  i.e. in Algebrite\n  dot/inner does what the dot of Mathematica does, i.e.:\n  \n  scalar product of vectors:\n  \n    inner((a, b, c), (x, y, z))\n    > a x + b y + c z\n  \n  products of matrices and vectors:\n  \n    inner(((a, b), (c,d)), (x, y))\n    > (a x + b y,c x + d y)\n  \n    inner((x, y), ((a, b), (c,d)))\n    > (a x + c y,b x + d y)\n  \n    inner((x, y), ((a, b), (c,d)), (r, s))\n    > a r x + b s x + c r y + d s y\n  \n  matrix product:\n  \n    inner(((a,b),(c,d)),((r,s),(t,u)))\n    > ((a r + b t,a s + b u),(c r + d t,c s + d u))\n  \n  the \"dot/inner\" operator is associative and\n  distributive but not commutative.\n  \n  In Mathematica, Inner is a generalisation of Dot where\n  the user can specify the multiplication and the addition\n  operators.\n  But here in Algebrite they do the same thing.\n  \n   https://reference.wolfram.com/language/ref/Dot.html\n   https://reference.wolfram.com/language/ref/Inner.html\n  \n   http://uk.mathworks.com/help/matlab/ref/dot.html\n   http://uk.mathworks.com/help/matlab/ref/mtimes.html\n   */\n\n  Eval_inner = function() {\n    var difference, i, i1, j1, l1, moretheArguments, o, operands, ref, ref1, ref2, ref3, refinedOperands, results, secondArgument, shift, theArguments;\n    theArguments = [];\n    theArguments.push(car(cdr(p1)));\n    secondArgument = car(cdr(cdr(p1)));\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    moretheArguments = cdr(cdr(p1));\n    while (moretheArguments !== symbol(NIL)) {\n      theArguments.push(car(moretheArguments));\n      moretheArguments = cdr(moretheArguments);\n    }\n    if (theArguments.length > 2) {\n      push_symbol(INNER);\n      push(theArguments[theArguments.length - 2]);\n      push(theArguments[theArguments.length - 1]);\n      list(3);\n      for (i = o = 2, ref = theArguments.length; 2 <= ref ? o < ref : o > ref; i = 2 <= ref ? ++o : --o) {\n        push_symbol(INNER);\n        swap();\n        push(theArguments[theArguments.length - i - 1]);\n        swap();\n        list(3);\n      }\n      p1 = pop();\n      Eval_inner();\n      return;\n    }\n    operands = [];\n    get_innerprod_factors(p1, operands);\n    refinedOperands = [];\n    for (i = i1 = 0, ref1 = operands.length; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (operands[i] === symbol(SYMBOL_IDENTITY_MATRIX)) {\n        continue;\n      } else {\n        refinedOperands.push(operands[i]);\n      }\n    }\n    operands = refinedOperands;\n    refinedOperands = [];\n    if (operands.length > 1) {\n      shift = 0;\n      for (i = j1 = 0, ref2 = operands.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        if ((i + shift + 1) <= (operands.length - 1)) {\n          if (!(isNumericAtomOrTensor(operands[i + shift]) || isNumericAtomOrTensor(operands[i + shift + 1]))) {\n            push(operands[i + shift]);\n            Eval();\n            inv();\n            push(operands[i + shift + 1]);\n            Eval();\n            subtract();\n            difference = pop();\n            if (isZeroAtomOrTensor(difference)) {\n              shift += 1;\n            } else {\n              refinedOperands.push(operands[i + shift]);\n            }\n          } else {\n            refinedOperands.push(operands[i + shift]);\n          }\n        } else {\n          break;\n        }\n        if (i + shift === operands.length - 2) {\n          refinedOperands.push(operands[operands.length - 1]);\n        }\n        if (i + shift >= operands.length - 1) {\n          break;\n        }\n      }\n      operands = refinedOperands;\n    }\n    push(symbol(INNER));\n    if (operands.length > 0) {\n      for (i = l1 = 0, ref3 = operands.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        push(operands[i]);\n      }\n    } else {\n      pop();\n      push(symbol(SYMBOL_IDENTITY_MATRIX));\n      return;\n    }\n    list(operands.length + 1);\n    p1 = pop();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      inner();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  inner = function() {\n    var arg1, arg2, arg3, subtractionResult;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isnegativeterm(p2) && isnegativeterm(p1)) {\n      push(p2);\n      negate();\n      p2 = pop();\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    if (isinnerordot(p1)) {\n      arg1 = car(cdr(p1));\n      arg2 = car(cdr(cdr(p1)));\n      arg3 = p2;\n      p1 = arg1;\n      push(arg2);\n      push(arg3);\n      inner();\n      p2 = pop();\n    }\n    if (p1 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p2);\n      restore();\n      return;\n    } else if (p2 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (istensor(p1) && istensor(p2)) {\n      inner_f();\n    } else {\n      if (!(isNumericAtomOrTensor(p1) || isNumericAtomOrTensor(p2))) {\n        push(p1);\n        push(p2);\n        inv();\n        subtract();\n        subtractionResult = pop();\n        if (isZeroAtomOrTensor(subtractionResult)) {\n          push_symbol(SYMBOL_IDENTITY_MATRIX);\n          restore();\n          return;\n        }\n      }\n      if (expanding && isadd(p1)) {\n        p1 = cdr(p1);\n        push(zero);\n        while (iscons(p1)) {\n          push(car(p1));\n          push(p2);\n          inner();\n          add();\n          p1 = cdr(p1);\n        }\n        restore();\n        return;\n      }\n      if (expanding && isadd(p2)) {\n        p2 = cdr(p2);\n        push(zero);\n        while (iscons(p2)) {\n          push(p1);\n          push(car(p2));\n          inner();\n          add();\n          p2 = cdr(p2);\n        }\n        restore();\n        return;\n      }\n      push(p1);\n      push(p2);\n      if (istensor(p1) && isNumericAtom(p2)) {\n        tensor_times_scalar();\n      } else if (isNumericAtom(p1) && istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        if (isNumericAtom(p1) || isNumericAtom(p2)) {\n          multiply();\n        } else {\n          pop();\n          pop();\n          push_symbol(INNER);\n          push(p1);\n          push(p2);\n          list(3);\n          restore();\n          return;\n        }\n      }\n    }\n    return restore();\n  };\n\n  inner_f = function() {\n    var a, ak, b, bk, c, i, i1, j, j1, k, l1, m1, n, n1, ndim, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    n = p1.tensor.dim[p1.tensor.ndim - 1];\n    if (n !== p2.tensor.dim[0]) {\n      debugger;\n      stop(\"inner: tensor dimension check\");\n    }\n    ndim = p1.tensor.ndim + p2.tensor.ndim - 2;\n    if (ndim > MAXDIM) {\n      stop(\"inner: rank of result exceeds maximum\");\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    ak = 1;\n    for (i = o = 0, ref = p1.tensor.ndim - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      ak *= p1.tensor.dim[i];\n    }\n    bk = 1;\n    for (i = i1 = 1, ref1 = p2.tensor.ndim; 1 <= ref1 ? i1 < ref1 : i1 > ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      bk *= p2.tensor.dim[i];\n    }\n    p3 = alloc_tensor(ak * bk);\n    c = p3.tensor.elem;\n    for (i = j1 = 0, ref2 = ak; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n        if (isZeroAtomOrTensor(a[i * n + j])) {\n          continue;\n        }\n        for (k = m1 = 0, ref4 = bk; 0 <= ref4 ? m1 < ref4 : m1 > ref4; k = 0 <= ref4 ? ++m1 : --m1) {\n          push(a[i * n + j]);\n          push(b[j * bk + k]);\n          multiply();\n          push(c[i * bk + k]);\n          add();\n          c[i * bk + k] = pop();\n        }\n      }\n    }\n    if (ndim === 0) {\n      return push(p3.tensor.elem[0]);\n    } else {\n      p3.tensor.ndim = ndim;\n      j = 0;\n      for (i = n1 = 0, ref5 = p1.tensor.ndim - 1; 0 <= ref5 ? n1 < ref5 : n1 > ref5; i = 0 <= ref5 ? ++n1 : --n1) {\n        p3.tensor.dim[i] = p1.tensor.dim[i];\n      }\n      j = p1.tensor.ndim - 1;\n      for (i = o1 = 0, ref6 = p2.tensor.ndim - 1; 0 <= ref6 ? o1 < ref6 : o1 > ref6; i = 0 <= ref6 ? ++o1 : --o1) {\n        p3.tensor.dim[j + i] = p2.tensor.dim[i + 1];\n      }\n      return push(p3);\n    }\n  };\n\n  get_innerprod_factors = function(tree, factors_accumulator) {\n    if (!iscons(tree)) {\n      add_factor_to_accumulator(tree, factors_accumulator);\n      return;\n    }\n    if (cdr(tree) === symbol(NIL)) {\n      tree = get_innerprod_factors(car(tree), factors_accumulator);\n      return;\n    }\n    if (isinnerordot(tree)) {\n      get_innerprod_factors(car(cdr(tree)), factors_accumulator);\n      get_innerprod_factors(cdr(cdr(tree)), factors_accumulator);\n      return;\n    }\n    return add_factor_to_accumulator(tree, factors_accumulator);\n  };\n\n  add_factor_to_accumulator = function(tree, factors_accumulator) {\n    if (tree !== symbol(NIL)) {\n      return factors_accumulator.push(tree);\n    }\n  };\n\n\n  /*\n   Table of integrals\n  \n  The symbol f is just a dummy symbol for creating a list f(A,B,C,C,...) where\n  \n    A  is the template expression\n  \n    B  is the result expression\n  \n    C  is an optional list of conditional expressions\n   */\n\n  itab = [\"f(a,a*x)\", \"f(1/x,log(x))\", \"f(x^a,x^(a+1)/(a+1))\", \"f(x^(-2),-x^(-1))\", \"f(x^(-1/2),2*x^(1/2))\", \"f(x^(1/2),2/3*x^(3/2))\", \"f(x,x^2/2)\", \"f(x^2,x^3/3)\", \"f(exp(a*x),1/a*exp(a*x))\", \"f(exp(a*x+b),1/a*exp(a*x+b))\", \"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\", \"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\", \"f(log(a*x),x*log(a*x)-x)\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\", \"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/(a+b*x),1/b*log(a+b*x))\", \"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\", \"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\", \"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\", \"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\", \"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\", \"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\", \"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\", \"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\", \"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\", \"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\", \"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\", \"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\", \"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\", \"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\", \"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\", \"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\", \"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\", \"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\", \"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\", \"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\", \"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\", \"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\", \"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\", \"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\", \"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\", \"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\", \"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\", \"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\", \"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\", \"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\", \"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\", \"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\", \"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\", \"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\", \"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\", \"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\", \"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\", \"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\", \"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\", \"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\", \"f(sin(a*x),-cos(a*x)/a)\", \"f(cos(a*x),sin(a*x)/a)\", \"f(tan(a*x),-log(cos(a*x))/a)\", \"f(1/tan(a*x),log(sin(a*x))/a)\", \"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\", \"f(1/sin(a*x),log(tan(a*x/2))/a)\", \"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\", \"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", \"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\", \"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", \"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\", \"f(1/cos(a*x)^2,tan(a*x)/a)\", \"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\", \"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\", \"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\", \"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\", \"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\", \"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\", \"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\", \"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\", \"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\", \"f(sin(a+b*x),-cos(a+b*x)/b)\", \"f(cos(a+b*x),sin(a+b*x)/b)\", \"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\", \"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\", \"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\", \"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\", \"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\", \"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\", \"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\", \"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\", \"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\", \"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\", \"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\", \"f(1/x*1/(a+log(x)),log(a+log(x)))\", \"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\", \"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\", \"f(sinh(x),cosh(x))\", \"f(cosh(x),sinh(x))\", \"f(tanh(x),log(cosh(x)))\", \"f(x*sinh(x),x*cosh(x)-sinh(x))\", \"f(x*cosh(x),x*sinh(x)-cosh(x))\", \"f(sinh(x)^2,sinh(2*x)/4-x/2)\", \"f(tanh(x)^2,x-tanh(x))\", \"f(cosh(x)^2,sinh(2*x)/4+x/2)\", \"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\", \"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\", \"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\", \"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\", \"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\", \"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\", \"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\", \"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\", \"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\", \"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\", 0];\n\n  Eval_integral = function() {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n    while (1) {\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n        if (isNaN(n)) {\n          stop(\"nth integral: check n\");\n        }\n      } else {\n        n = 1;\n      }\n      push(p3);\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          integral();\n        }\n      } else {\n        n = -n;\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          derivative();\n        }\n      }\n      p3 = pop();\n      if (p5 === symbol(NIL)) {\n        break;\n      }\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n        if (p5 === symbol(NIL)) {\n          break;\n        }\n        if (isNumericAtom(p5)) {\n          doNothing = 1;\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop();\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n      }\n    }\n    return push(p3);\n  };\n\n  integral = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      integral_of_sum();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      integral_of_product();\n    } else {\n      integral_of_form();\n    }\n    p1 = pop();\n    if (Find(p1, symbol(INTEGRAL))) {\n      stop(\"integral: sorry, could not find a solution\");\n    }\n    push(p1);\n    simplify();\n    Eval();\n    return restore();\n  };\n\n  integral_of_sum = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    push(p2);\n    integral();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      integral();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  integral_of_product = function() {\n    push(p1);\n    push(p2);\n    partition();\n    p1 = pop();\n    integral_of_form();\n    return multiply();\n  };\n\n  integral_of_form = function() {\n    var hc, tab;\n    hc = italu_hashcode(p1, p2).toFixed(6);\n    tab = hashed_itab[hc];\n    if (!tab) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    push(p1);\n    push(p2);\n    transform(tab, false);\n    p3 = pop();\n    if (p3 === symbol(NIL)) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(p3);\n    }\n  };\n\n  hashcode_values = {\n    'x': 0.95532,\n    'constexp': 1.43762,\n    'constant': 1.14416593629414332,\n    'constbase': 1.20364122304218824,\n    'sin': 1.73305482518303221,\n    'arcsin': 1.6483368529465804,\n    'cos': 1.058672123686340116,\n    'arccos': 1.8405225918106694,\n    'tan': 1.12249437762925064,\n    'arctan': 1.1297397925394962,\n    'sinh': 1.8176164926060078,\n    'cosh': 1.9404934661708022,\n    'tanh': 1.6421307715103121,\n    'log': 1.47744370135492387,\n    'erf': 1.0825269225702916\n  };\n\n  italu_hashcode = function(u, x) {\n    var half;\n    if (issymbol(u)) {\n      if (equal(u, x)) {\n        return hashcode_values.x;\n      } else {\n        return hashcode_values.constant;\n      }\n    } else if (iscons(u)) {\n      switch (symnum(car(u))) {\n        case ADD:\n          return hash_addition(cdr(u), x);\n        case MULTIPLY:\n          return hash_multiplication(cdr(u), x);\n        case POWER:\n          return hash_power(cadr(u), caddr(u), x);\n        case EXP:\n          return hash_power(symbol(E), cadr(u), x);\n        case SQRT:\n          push_double(0.5);\n          half = pop();\n          return hash_power(cadr(u), half, x);\n        default:\n          return hash_function(u, x);\n      }\n    }\n    return hashcode_values.constant;\n  };\n\n  hash_function = function(u, x) {\n    var arg_hash, base, name;\n    if (!Find(cadr(u), x)) {\n      return hashcode_values.constant;\n    }\n    name = car(u);\n    arg_hash = italu_hashcode(cadr(u), x);\n    base = hashcode_values[name.printname];\n    if (!base) {\n      throw new Error('Unsupported function ' + name.printname);\n    }\n    return Math.pow(base, arg_hash);\n  };\n\n  hash_addition = function(terms, x) {\n    var k, sum, term, term_hash, term_set, v;\n    term_set = {};\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      term_hash = 0;\n      if (Find(term, x)) {\n        term_hash = italu_hashcode(term, x);\n      } else {\n        term_hash = hashcode_values.constant;\n      }\n      term_set[term_hash.toFixed(6)] = true;\n    }\n    sum = 0;\n    for (k in term_set) {\n      if (!hasProp.call(term_set, k)) continue;\n      v = term_set[k];\n      sum = sum + parseFloat(k, 10);\n    }\n    return sum;\n  };\n\n  hash_multiplication = function(terms, x) {\n    var product, term;\n    product = 1;\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      if (Find(term, x)) {\n        product = product * italu_hashcode(term, x);\n      }\n    }\n    return product;\n  };\n\n  hash_power = function(base, power, x) {\n    var base_hash, exp_hash;\n    base_hash = hashcode_values.constant;\n    exp_hash = hashcode_values.constexp;\n    if (Find(base, x)) {\n      base_hash = italu_hashcode(base, x);\n    }\n    if (Find(power, x)) {\n      exp_hash = italu_hashcode(power, x);\n    } else {\n      if (base_hash === hashcode_values.constant) {\n        return hashcode_values.constant;\n      }\n      if (isminusone(power)) {\n        exp_hash = -1;\n      } else if (isoneovertwo(power)) {\n        exp_hash = 0.5;\n      } else if (isminusoneovertwo(power)) {\n        exp_hash = -0.5;\n      } else if (equalq(power, 2, 1)) {\n        exp_hash = 2;\n      } else if (equalq(power, -2, 1)) {\n        exp_hash = -2;\n      }\n    }\n    return Math.pow(base_hash, exp_hash);\n  };\n\n  make_hashed_itab = function() {\n    var f, h, key, len, o, s, tab, u;\n    tab = {};\n    for (o = 0, len = itab.length; o < len; o++) {\n      s = itab[o];\n      if (!s) {\n        break;\n      }\n      scan_meta(s);\n      f = pop();\n      u = cadr(f);\n      h = italu_hashcode(u, symbol(METAX));\n      key = h.toFixed(6);\n      if (!tab[key]) {\n        tab[key] = [];\n      }\n      tab[key].push(s);\n    }\n    console.log('hashed_itab = ' + JSON.stringify(tab, null, 2));\n    return tab;\n  };\n\n  $.make_hashed_itab = make_hashed_itab;\n\n  hashed_itab = {\n    \"1.144166\": [\"f(a,a*x)\"],\n    \"1.046770\": [\"f(1/x,log(x))\"],\n    \"0.936400\": [\"f(x^a,x^(a+1)/(a+1))\"],\n    \"1.095727\": [\"f(x^(-2),-x^(-1))\"],\n    \"1.023118\": [\"f(x^(-1/2),2*x^(1/2))\"],\n    \"0.977405\": [\"f(x^(1/2),2/3*x^(3/2))\"],\n    \"0.955320\": [\"f(x,x^2/2)\"],\n    \"0.912636\": [\"f(x^2,x^3/3)\"],\n    \"1.137302\": [\"f(exp(a*x),1/a*exp(a*x))\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\"],\n    \"1.326774\": [\"f(exp(a*x+b),1/a*exp(a*x+b))\"],\n    \"1.080259\": [\"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\"],\n    \"1.260228\": [\"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\"],\n    \"1.451902\": [\"f(log(a*x),x*log(a*x)-x)\"],\n    \"0.486192\": [\"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.697274\": [\"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\"],\n    \"0.476307\": [\"f(1/(a+b*x),1/b*log(a+b*x))\"],\n    \"0.226868\": [\"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\"],\n    \"2.904531\": [\"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\"],\n    \"0.455026\": [\"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\"],\n    \"0.216732\": [\"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\"],\n    \"0.434695\": [\"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\"],\n    \"0.207048\": [\"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\"],\n    \"2.650781\": [\"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\"],\n    \"0.498584\": [\"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\"],\n    \"0.237479\": [\"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\"],\n    \"3.040375\": [\"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\"],\n    \"0.521902\": [\"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\"],\n    \"0.446014\": [\"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\"],\n    \"0.248586\": [\"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\"],\n    \"0.464469\": [\"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\"],\n    \"0.443716\": [\"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\"],\n    \"0.236382\": [\"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\"],\n    \"0.508931\": [\"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\"],\n    \"0.532733\": [\"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\"],\n    \"0.480638\": [\"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\"],\n    \"0.438648\": [\"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\"],\n    \"0.459164\": [\"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.450070\": [\"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\"],\n    \"1.448960\": [\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\"],\n    \"1.384221\": [\"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\"],\n    \"1.322374\": [\"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\"],\n    \"1.516728\": [\"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.587665\": [\"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"0.690150\": [\"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\"],\n    \"0.659314\": [\"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\"],\n    \"0.629856\": [\"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\"],\n    \"0.722428\": [\"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\"],\n    \"0.756216\": [\"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.434156\": [\"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\"],\n    \"0.729886\": [\"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"1.501230\": [\"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"0.666120\": [\"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\"],\n    \"1.370077\": [\"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\"],\n    \"1.730087\": [\"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\"],\n    \"0.578006\": [\"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\"],\n    \"0.552180\": [\"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\"],\n    \"1.652787\": [\"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\"],\n    \"1.308862\": [\"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\"],\n    \"1.342944\": [\"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\"],\n    \"0.636358\": [\"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"0.652928\": [\"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\"],\n    \"0.764022\": [\"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\"],\n    \"1.578940\": [\"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\"],\n    \"1.620055\": [\"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\"],\n    \"0.332117\": [\"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\"],\n    \"1.571443\": [\"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"1.690994\": [\"f(sin(a*x),-cos(a*x)/a)\"],\n    \"1.055979\": [\"f(cos(a*x),sin(a*x)/a)\"],\n    \"1.116714\": [\"f(tan(a*x),-log(cos(a*x))/a)\"],\n    \"0.895484\": [\"f(1/tan(a*x),log(sin(a*x))/a)\"],\n    \"0.946989\": [\"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\"],\n    \"0.591368\": [\"f(1/sin(a*x),log(tan(a*x/2))/a)\"],\n    \"2.859462\": [\"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\"],\n    \"2.128050\": [\"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"1.115091\": [\"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\"],\n    \"1.081452\": [\"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"0.349716\": [\"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\"],\n    \"0.896788\": [\"f(1/cos(a*x)^2,tan(a*x)/a)\"],\n    \"1.785654\": [\"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\"],\n    \"3.188560\": [\"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\"],\n    \"1.516463\": [\"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\"],\n    \"2.707879\": [\"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\"],\n    \"0.369293\": [\"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\"],\n    \"0.560019\": [\"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\"],\n    \"0.530332\": [\"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\"],\n    \"0.331177\": [\"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\"],\n    \"0.313621\": [\"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\"],\n    \"3.172365\": [\"f(sin(a+b*x),-cos(a+b*x)/b)\"],\n    \"1.127162\": [\"f(cos(a+b*x),sin(a+b*x)/b)\"],\n    \"0.352714\": [\"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\"],\n    \"0.454515\": [\"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\"],\n    \"1.615441\": [\"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\"],\n    \"1.543263\": [\"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\"],\n    \"1.008798\": [\"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\"],\n    \"0.963724\": [\"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\"],\n    \"1.611938\": [\"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\"],\n    \"1.791033\": [\"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\"],\n    \"1.123599\": [\"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\"],\n    \"1.387031\": [\"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\"],\n    \"1.325058\": [\"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\"],\n    \"2.108018\": [\"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\"],\n    \"0.403214\": [\"f(1/x*1/(a+log(x)),log(a+log(x)))\"],\n    \"2.269268\": [\"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\"],\n    \"2.486498\": [\"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\"],\n    \"1.769733\": [\"f(sinh(x),cosh(x))\"],\n    \"1.883858\": [\"f(cosh(x),sinh(x))\"],\n    \"1.606140\": [\"f(tanh(x),log(cosh(x)))\"],\n    \"1.690661\": [\"f(x*sinh(x),x*cosh(x)-sinh(x))\"],\n    \"1.799688\": [\"f(x*cosh(x),x*sinh(x)-cosh(x))\"],\n    \"3.131954\": [\"f(sinh(x)^2,sinh(2*x)/4-x/2)\"],\n    \"2.579685\": [\"f(tanh(x)^2,x-tanh(x))\"],\n    \"3.548923\": [\"f(cosh(x)^2,sinh(2*x)/4+x/2)\"],\n    \"1.058866\": [\"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\"],\n    \"1.235270\": [\"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\"],\n    \"1.130783\": [\"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\"],\n    \"1.078698\": [\"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\"],\n    \"2.573650\": [\"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\"],\n    \"2.640666\": [\"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\"],\n    \"1.086487\": [\"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\"],\n    \"1.267493\": [\"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\"],\n    \"1.037943\": [\"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.210862\": [\"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.064970\": [\"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\"],\n    \"1.242392\": [\"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\"]\n  };\n\n  INV_check_arg = function() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  inv = function() {\n    var accumulator, eachEntry, i, n, o, ref;\n    i = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    if (isinv(p1)) {\n      push(car(cdr(p1)));\n      restore();\n      return;\n    }\n    if (isidentitymatrix(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n      while (iscons(p1)) {\n        accumulator.push(car(p1));\n        p1 = cdr(p1);\n      }\n      for (eachEntry = o = ref = accumulator.length - 1; ref <= 0 ? o <= 0 : o >= 0; eachEntry = ref <= 0 ? ++o : --o) {\n        push(accumulator[eachEntry]);\n        inv();\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n      restore();\n      return;\n    }\n    if (INV_check_arg() === 0) {\n      push_symbol(INV);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    if (isNumericAtomOrTensor(p1)) {\n      yyinvg();\n    } else {\n      push(p1);\n      adj();\n      push(p1);\n      det();\n      p2 = pop();\n      if (isZeroAtomOrTensor(p2)) {\n        stop(\"inverse of singular matrix\");\n      }\n      push(p2);\n      divide();\n    }\n    return restore();\n  };\n\n  invg = function() {\n    save();\n    p1 = pop();\n    if (INV_check_arg() === 0) {\n      push_symbol(INVG);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    yyinvg();\n    return restore();\n  };\n\n  yyinvg = function() {\n    var h, i, i1, j, j1, l1, n, o, ref, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    h = tos;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i === j) {\n          push(one);\n        } else {\n          push(zero);\n        }\n      }\n    }\n    for (i = j1 = 0, ref2 = n * n; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      push(p1.tensor.elem[i]);\n    }\n    INV_decomp(n);\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n    for (i = l1 = 0, ref3 = n * n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(tos - 2 * n * n);\n    return push(p1);\n  };\n\n  INV_decomp = function(n) {\n    var a, d, i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4, results, u;\n    a = 0;\n    d = 0;\n    i = 0;\n    j = 0;\n    u = 0;\n    a = tos - n * n;\n    u = a - n * n;\n    results = [];\n    for (d = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      if (equal(stack[a + n * d + d], zero)) {\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(stack[a + n * i + d], zero)) {\n            break;\n          }\n        }\n        if (i === n) {\n          stop(\"inverse of singular matrix\");\n        }\n        for (j = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; j = 0 <= ref3 ? ++j1 : --j1) {\n          p2 = stack[a + n * d + j];\n          stack[a + n * d + j] = stack[a + n * i + j];\n          stack[a + n * i + j] = p2;\n          p2 = stack[u + n * d + j];\n          stack[u + n * d + j] = stack[u + n * i + j];\n          stack[u + n * i + j] = p2;\n        }\n      }\n      p2 = stack[a + n * d + d];\n      for (j = l1 = 0, ref4 = n; 0 <= ref4 ? l1 < ref4 : l1 > ref4; j = 0 <= ref4 ? ++l1 : --l1) {\n        if (j > d) {\n          push(stack[a + n * d + j]);\n          push(p2);\n          divide();\n          stack[a + n * d + j] = pop();\n        }\n        push(stack[u + n * d + j]);\n        push(p2);\n        divide();\n        stack[u + n * d + j] = pop();\n      }\n      results.push((function() {\n        var m1, ref5, results1;\n        results1 = [];\n        for (i = m1 = 0, ref5 = n; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n          if (i === d) {\n            continue;\n          }\n          p2 = stack[a + n * i + d];\n          results1.push((function() {\n            var n1, ref6, results2;\n            results2 = [];\n            for (j = n1 = 0, ref6 = n; 0 <= ref6 ? n1 < ref6 : n1 > ref6; j = 0 <= ref6 ? ++n1 : --n1) {\n              if (j > d) {\n                push(stack[a + n * i + j]);\n                push(stack[a + n * d + j]);\n                push(p2);\n                multiply();\n                subtract();\n                stack[a + n * i + j] = pop();\n              }\n              push(stack[u + n * i + j]);\n              push(stack[u + n * d + j]);\n              push(p2);\n              multiply();\n              subtract();\n              results2.push(stack[u + n * i + j] = pop());\n            }\n            return results2;\n          })());\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  DEBUG_IS = false;\n\n  isZeroAtom = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MZERO(p.q.a)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === 0.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isZeroTensor = function(p) {\n    var i, o, ref;\n    if (p.k !== TENSOR) {\n      return 0;\n    }\n    for (i = o = 0, ref = p.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isZeroAtomOrTensor(p.tensor.elem[i])) {\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  isZeroAtomOrTensor = function(p) {\n    return isZeroAtom(p) || isZeroTensor(p);\n  };\n\n  isZeroLikeOrNonZeroLikeOrUndetermined = function(valueOrPredicate) {\n    var evalledArgument;\n    push(valueOrPredicate);\n    Eval_predicate();\n    evalledArgument = pop();\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n    push(evalledArgument);\n    zzfloat();\n    evalledArgument = pop();\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n    if (Find(evalledArgument, imaginaryunit)) {\n      push(evalledArgument);\n      absValFloat();\n      Eval_predicate();\n      evalledArgument = pop();\n      if (isZeroAtomOrTensor(evalledArgument)) {\n        return 0;\n      }\n      if (isNumericAtomOrTensor(evalledArgument)) {\n        return 1;\n      }\n    }\n    return null;\n  };\n\n  isnegativenumber = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === -1) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d < 0.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  ispositivenumber = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === 1) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d > 0.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isplustwo = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 2) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === 2.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isplusone = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === 1.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isminusone = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, -1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === -1.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isone = function(p) {\n    return isplusone(p) || isminusone(p);\n  };\n\n  isinteger = function(p) {\n    if (p.k === NUM && MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isintegerorintegerfloat = function(p) {\n    if (p.k === DOUBLE) {\n      if (p.d === Math.round(p.d)) {\n        return 1;\n      }\n      return 0;\n    }\n    return isinteger(p);\n  };\n\n  isnonnegativeinteger = function(p) {\n    if (isrational(p) && MEQUAL(p.q.b, 1) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isposint = function(p) {\n    if (isinteger(p) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isunivarpolyfactoredorexpandedform = function(p, x) {\n    if (x == null) {\n      push(p);\n      guess();\n      x = pop();\n      pop();\n    }\n    if (ispolyfactoredorexpandedform(p, x) && (Find(p, symbol(SYMBOL_X)) + Find(p, symbol(SYMBOL_Y)) + Find(p, symbol(SYMBOL_Z)) === 1)) {\n      return x;\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyfactoredorexpandedform = function(p, x) {\n    return ispolyfactoredorexpandedform_factor(p, x);\n  };\n\n  ispolyfactoredorexpandedform_factor = function(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (DEBUG) {\n          console.log(\"ispolyfactoredorexpandedform_factor testing \" + car(p));\n        }\n        if (!ispolyfactoredorexpandedform_power(car(p), x)) {\n          if (DEBUG) {\n            console.log(\"... tested negative:\" + car(p));\n          }\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyfactoredorexpandedform_power(p, x);\n    }\n  };\n\n  ispolyfactoredorexpandedform_power = function(p, x) {\n    if (car(p) === symbol(POWER)) {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power (isposint(caddr(p)) \" + (isposint(caddr(p)), DEBUG ? console.log(\"ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) \" + ispolyexpandedform_expr(cadr(p), x)) : void 0));\n      }\n      return isposint(caddr(p)) && ispolyexpandedform_expr(cadr(p), x);\n    } else {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power not a power, testing if this is exp form: \" + p);\n      }\n      return ispolyexpandedform_expr(p, x);\n    }\n  };\n\n  ispolyexpandedform = function(p, x) {\n    if (Find(p, x)) {\n      return ispolyexpandedform_expr(p, x);\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyexpandedform_expr = function(p, x) {\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (!ispolyexpandedform_term(car(p), x)) {\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyexpandedform_term(p, x);\n    }\n  };\n\n  ispolyexpandedform_term = function(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (!ispolyexpandedform_factor(car(p), x)) {\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyexpandedform_factor(p, x);\n    }\n  };\n\n  ispolyexpandedform_factor = function(p, x) {\n    if (equal(p, x)) {\n      return 1;\n    }\n    if (car(p) === symbol(POWER) && equal(cadr(p), x)) {\n      if (isposint(caddr(p))) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n    if (Find(p, x)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  isnegativeterm = function(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    } else if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  hasNegativeRationalExponent = function(p) {\n    if (car(p) === symbol(POWER) && isrational(car(cdr(cdr(p)))) && isnegativenumber(car(cdr(p)))) {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has imaginary component\");\n      }\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has NO imaginary component\");\n      }\n      return 0;\n    }\n  };\n\n  isimaginarynumberdouble = function(p) {\n    if ((car(p) === symbol(MULTIPLY) && length(p) === 3 && isdouble(cadr(p)) && hasNegativeRationalExponent(caddr(p))) || equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isimaginarynumber = function(p) {\n    if ((car(p) === symbol(MULTIPLY) && length(p) === 3 && isNumericAtom(cadr(p)) && equal(caddr(p), imaginaryunit)) || equal(p, imaginaryunit) || hasNegativeRationalExponent(caddr(p))) {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" isn't an imaginary number\");\n      }\n      return 0;\n    }\n  };\n\n  iscomplexnumberdouble = function(p) {\n    if ((car(p) === symbol(ADD) && length(p) === 3 && isdouble(cadr(p)) && isimaginarynumberdouble(caddr(p))) || isimaginarynumberdouble(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  iscomplexnumber = function(p) {\n    if (DEBUG_IS) {\n      debugger;\n    }\n    if ((car(p) === symbol(ADD) && length(p) === 3 && isNumericAtom(cadr(p)) && isimaginarynumber(caddr(p))) || isimaginarynumber(p)) {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 1;\n    } else {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 0;\n    }\n  };\n\n  iseveninteger = function(p) {\n    if (isinteger(p) && p.q.a.isEven()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isnegative = function(p) {\n    if (car(p) === symbol(ADD) && isnegativeterm(cadr(p))) {\n      return 1;\n    } else if (isnegativeterm(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  issymbolic = function(p) {\n    if (issymbol(p)) {\n      return 1;\n    } else {\n      while (iscons(p)) {\n        if (issymbolic(car(p))) {\n          return 1;\n        }\n        p = cdr(p);\n      }\n      return 0;\n    }\n  };\n\n  isintegerfactor = function(p) {\n    if (isinteger(p) || car(p) === symbol(POWER) && isinteger(cadr(p)) && isinteger(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isNumberOneOverSomething = function(p) {\n    if (isfraction(p) && MEQUAL(p.q.a.abs(), 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isoneover = function(p) {\n    if (car(p) === symbol(POWER) && isminusone(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isfraction = function(p) {\n    if (p.k === NUM && !MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  equaln = function(p, n) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, n) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === n) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  equalq = function(p, a, b) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, a) && MEQUAL(p.q.b, b)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === a / b) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isoneovertwo = function(p) {\n    if (equalq(p, 1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isminusoneovertwo = function(p) {\n    if (equalq(p, -1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isoneoversqrttwo = function(p) {\n    if (car(p) === symbol(POWER) && equaln(cadr(p), 2) && equalq(caddr(p), -1, 2)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isminusoneoversqrttwo = function(p) {\n    if (car(p) === symbol(MULTIPLY) && equaln(cadr(p), -1) && isoneoversqrttwo(caddr(p)) && length(p) === 3) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isfloating = function(p) {\n    if (p.k === DOUBLE || p === symbol(FLOATF)) {\n      return 1;\n    }\n    while (iscons(p)) {\n      if (isfloating(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  isimaginaryunit = function(p) {\n    if (equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isquarterturn = function(p) {\n    var minussign, n;\n    n = 0;\n    minussign = 0;\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n    if (equal(cadr(p), imaginaryunit)) {\n      if (caddr(p) !== symbol(PI)) {\n        return 0;\n      }\n      if (length(p) !== 3) {\n        return 0;\n      }\n      return 2;\n    }\n    if (!isNumericAtom(cadr(p))) {\n      return 0;\n    }\n    if (!equal(caddr(p), imaginaryunit)) {\n      return 0;\n    }\n    if (cadddr(p) !== symbol(PI)) {\n      return 0;\n    }\n    if (length(p) !== 4) {\n      return 0;\n    }\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    if (isNaN(n)) {\n      return 0;\n    }\n    if (n < 1) {\n      minussign = 1;\n      n = -n;\n    }\n    switch (n % 4) {\n      case 0:\n        n = 1;\n        break;\n      case 1:\n        if (minussign) {\n          n = 4;\n        } else {\n          n = 3;\n        }\n        break;\n      case 2:\n        n = 2;\n        break;\n      case 3:\n        if (minussign) {\n          n = 3;\n        } else {\n          n = 4;\n        }\n    }\n    return n;\n  };\n\n  isnpi = function(p) {\n    var doNothing, n;\n    n = 0;\n    if (p === symbol(PI)) {\n      return 2;\n    }\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && caddr(p) === symbol(PI) && length(p) === 3) {\n      doNothing = 0;\n    } else {\n      return 0;\n    }\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    if (isNaN(n)) {\n      return 0;\n    }\n    if (n < 0) {\n      n = 4 - (-n) % 4;\n    } else {\n      n = 1 + (n - 1) % 4;\n    }\n    return n;\n  };\n\n  $.isZeroAtomOrTensor = isZeroAtomOrTensor;\n\n  $.isnegativenumber = isnegativenumber;\n\n  $.isplusone = isplusone;\n\n  $.isminusone = isminusone;\n\n  $.isinteger = isinteger;\n\n  $.isnonnegativeinteger = isnonnegativeinteger;\n\n  $.isposint = isposint;\n\n  $.isnegativeterm = isnegativeterm;\n\n  $.isimaginarynumber = isimaginarynumber;\n\n  $.iscomplexnumber = iscomplexnumber;\n\n  $.iseveninteger = iseveninteger;\n\n  $.isnegative = isnegative;\n\n  $.issymbolic = issymbolic;\n\n  $.isintegerfactor = isintegerfactor;\n\n  $.isoneover = isoneover;\n\n  $.isfraction = isfraction;\n\n  $.isoneoversqrttwo = isoneoversqrttwo;\n\n  $.isminusoneoversqrttwo = isminusoneoversqrttwo;\n\n  $.isfloating = isfloating;\n\n  $.isimaginaryunit = isimaginaryunit;\n\n  $.isquarterturn = isquarterturn;\n\n  $.isnpi = isnpi;\n\n  Eval_isprime = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (isnonnegativeinteger(p1) && mprime(p1.q.a)) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n\n  /*\n   Laguerre function\n  \n  Example\n  \n    laguerre(x,3)\n  \n  Result\n  \n       1   3    3   2\n    - --- x  + --- x  - 3 x + 1\n       6        2\n  \n  The computation uses the following recurrence relation.\n  \n    L(x,0,k) = 1\n  \n    L(x,1,k) = -x + k + 1\n  \n    n*L(x,n,k) = (2*(n-1)+1-x+k)*L(x,n-1,k) - (n-1+k)*L(x,n-2,k)\n  \n  In the \"for\" loop i = n-1 so the recurrence relation becomes\n  \n    (i+1)*L(x,n,k) = (2*i+1-x+k)*L(x,n-1,k) - (i+k)*L(x,n-2,k)\n   */\n\n  Eval_laguerre = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n    return laguerre();\n  };\n\n  laguerre = function() {\n    var n;\n    n = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(LAGUERRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      restore();\n      return;\n    }\n    if (issymbol(p1)) {\n      laguerre2(n);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      laguerre2(n);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n    return restore();\n  };\n\n  laguerre2 = function(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n    results = [];\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      subtract();\n      push(p3);\n      add();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p3);\n      add();\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      results.push(divide());\n    }\n    return results;\n  };\n\n  Eval_lcm = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      lcm();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  lcm = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    yylcm();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yylcm = function() {\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    gcd();\n    push(p1);\n    divide();\n    push(p2);\n    divide();\n    return inverse();\n  };\n\n\n  /*\n   Return the leading coefficient of a polynomial.\n  \n  Example\n  \n    leading(5x^2+x+1,x)\n  \n  Result\n  \n    5\n  \n  The result is undefined if P is not a polynomial.\n   */\n\n  Eval_leading = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    return leading();\n  };\n\n  leading = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    degree();\n    p3 = pop();\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    filter();\n    return restore();\n  };\n\n\n  /*\n   Legendre function\n  \n  Example\n  \n    legendre(x,3,0)\n  \n  Result\n  \n     5   3    3\n    --- x  - --- x\n     2        2\n  \n  The computation uses the following recurrence relation.\n  \n    P(x,0) = 1\n  \n    P(x,1) = x\n  \n    n*P(x,n) = (2*(n-1)+1)*x*P(x,n-1) - (n-1)*P(x,n-2)\n  \n  In the \"for\" loop we have i = n-1 so the recurrence relation becomes\n  \n    (i+1)*P(x,n) = (2*i+1)*x*P(x,n-1) - i*P(x,n-2)\n  \n  For m > 0\n  \n    P(x,n,m) = (-1)^m * (1-x^2)^(m/2) * d^m/dx^m P(x,n)\n   */\n\n  Eval_legendre = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n    return legendre();\n  };\n\n  legendre = function() {\n    save();\n    __legendre();\n    return restore();\n  };\n\n  __legendre = function() {\n    var m, n;\n    m = 0;\n    n = 0;\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    push(p3);\n    m = pop_integer();\n    if (n < 0 || isNaN(n) || m < 0 || isNaN(m)) {\n      push_symbol(LEGENDRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      return;\n    }\n    if (issymbol(p1)) {\n      __legendre2(n, m);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      __legendre2(n, m);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n    return __legendre3(m);\n  };\n\n  __legendre2 = function(n, m) {\n    var i, i1, o, ref, ref1, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      multiply();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      divide();\n    }\n    results = [];\n    for (i = i1 = 0, ref1 = m; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1);\n      results.push(derivative());\n    }\n    return results;\n  };\n\n  __legendre3 = function(m) {\n    if (m === 0) {\n      return;\n    }\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      sine();\n      square();\n    } else if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      cosine();\n      square();\n    } else {\n      push_integer(1);\n      push(p1);\n      square();\n      subtract();\n    }\n    push_integer(m);\n    push_rational(1, 2);\n    multiply();\n    power();\n    multiply();\n    if (m % 2) {\n      return negate();\n    }\n  };\n\n  list = function(n) {\n    var listIterator, o, ref, results;\n    listIterator = 0;\n    push(symbol(NIL));\n    results = [];\n    for (listIterator = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; listIterator = 0 <= ref ? ++o : --o) {\n      results.push(cons());\n    }\n    return results;\n  };\n\n  Eval_log = function() {\n    push(cadr(p1));\n    Eval();\n    return logarithm();\n  };\n\n  logarithm = function() {\n    save();\n    yylog();\n    return restore();\n  };\n\n  yylog = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (p1 === symbol(E)) {\n      push_integer(1);\n      return;\n    }\n    if (equaln(p1, 1)) {\n      push_integer(0);\n      return;\n    }\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      logarithm();\n      push(imaginaryunit);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      multiply();\n      add();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.log(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isfraction(p1)) {\n      push(p1);\n      numerator();\n      logarithm();\n      push(p1);\n      denominator();\n      logarithm();\n      subtract();\n      return;\n    }\n    if (car(p1) === symbol(POWER)) {\n      push(caddr(p1));\n      push(cadr(p1));\n      logarithm();\n      multiply();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        logarithm();\n        add();\n        p1 = cdr(p1);\n      }\n      return;\n    }\n    push_symbol(LOG);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_lookup = function() {\n    p1 = cadr(p1);\n    if (!iscons(p1) && cadr(p1).k === SYM) {\n      p1 = get_binding(p1);\n    }\n    return push(p1);\n  };\n\n  madd = function(a, b) {\n    return a.add(b);\n  };\n\n  msub = function(a, b) {\n    return a.subtract(b);\n  };\n\n  addf = function(a, b) {\n    return a.add(b);\n  };\n\n  subf = function(a, b) {\n    return a.subtract(b);\n  };\n\n  ucmp = function(a, b) {\n    return a.compareAbs(b);\n  };\n\n  mgcd = function(u, v) {\n    return bigInt.gcd(u, v);\n  };\n\n  new_string = function(s) {\n    save();\n    p1 = new U();\n    p1.k = STR;\n    p1.str = s;\n    push(p1);\n    return restore();\n  };\n\n  out_of_memory = function() {\n    return stop(\"out of memory\");\n  };\n\n  push_zero_matrix = function(i, j) {\n    push(alloc_tensor(i * j));\n    stack[tos - 1].tensor.ndim = 2;\n    stack[tos - 1].tensor.dim[0] = i;\n    return stack[tos - 1].tensor.dim[1] = j;\n  };\n\n  push_identity_matrix = function(n) {\n    var i, o, ref;\n    push_zero_matrix(n, n);\n    i = 0;\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[tos - 1].tensor.elem[i * n + i] = one;\n    }\n    return check_tensor_dimensions(stack[tos - 1]);\n  };\n\n  push_cars = function(p) {\n    var results;\n    results = [];\n    while (iscons(p)) {\n      push(car(p));\n      results.push(p = cdr(p));\n    }\n    return results;\n  };\n\n  peek = function() {\n    save();\n    p1 = pop();\n    push(p1);\n    return restore();\n  };\n\n  equal = function(p1, p2) {\n    if (cmp_expr(p1, p2) === 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  lessp = function(p1, p2) {\n    if (cmp_expr(p1, p2) < 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  sign = function(n) {\n    if (n < 0) {\n      return -1;\n    } else if (n > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  cmp_expr = function(p1, p2) {\n    var n;\n    n = 0;\n    if (p1 === p2) {\n      return 0;\n    }\n    if (p1 === symbol(NIL)) {\n      return -1;\n    }\n    if (p2 === symbol(NIL)) {\n      return 1;\n    }\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      return sign(compare_numbers(p1, p2));\n    }\n    if (isNumericAtom(p1)) {\n      return -1;\n    }\n    if (isNumericAtom(p2)) {\n      return 1;\n    }\n    if (isstr(p1) && isstr(p2)) {\n      return sign(strcmp(p1.str, p2.str));\n    }\n    if (isstr(p1)) {\n      return -1;\n    }\n    if (isstr(p2)) {\n      return 1;\n    }\n    if (issymbol(p1) && issymbol(p2)) {\n      return sign(strcmp(get_printname(p1), get_printname(p2)));\n    }\n    if (issymbol(p1)) {\n      return -1;\n    }\n    if (issymbol(p2)) {\n      return 1;\n    }\n    if (istensor(p1) && istensor(p2)) {\n      return compare_tensors(p1, p2);\n    }\n    if (istensor(p1)) {\n      return -1;\n    }\n    if (istensor(p2)) {\n      return 1;\n    }\n    while (iscons(p1) && iscons(p2)) {\n      n = cmp_expr(car(p1), car(p2));\n      if (n !== 0) {\n        return n;\n      }\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n    if (iscons(p2)) {\n      return -1;\n    }\n    if (iscons(p1)) {\n      return 1;\n    }\n    return 0;\n  };\n\n  length = function(p) {\n    var n;\n    n = 0;\n    while (iscons(p)) {\n      p = cdr(p);\n      n++;\n    }\n    return n;\n  };\n\n  unique = function(p) {\n    save();\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    unique_f(p);\n    if (p2 !== symbol(NIL)) {\n      p1 = symbol(NIL);\n    }\n    p = p1;\n    restore();\n    return p;\n  };\n\n  unique_f = function(p) {\n    if (isstr(p)) {\n      if (p1 === symbol(NIL)) {\n        p1 = p;\n      } else if (p !== p1) {\n        p2 = p;\n      }\n      return;\n    }\n    while (iscons(p)) {\n      unique_f(car(p));\n      if (p2 !== symbol(NIL)) {\n        return;\n      }\n      p = cdr(p);\n    }\n  };\n\n  ssqrt = function() {\n    push_rational(1, 2);\n    return power();\n  };\n\n  yyexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  exponential = function() {\n    push_symbol(E);\n    swap();\n    return power();\n  };\n\n  square = function() {\n    push_integer(2);\n    return power();\n  };\n\n  sort_stack = function(n) {\n    var h, subsetOfStack;\n    h = tos - n;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    return stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n  };\n\n  $.equal = equal;\n\n  $.length = length;\n\n  mmul = function(a, b) {\n    return a.multiply(b);\n  };\n\n  mdiv = function(a, b) {\n    return a.divide(b);\n  };\n\n\n  /*\n  static void\n  addf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # can be signed or unsigned \n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] + b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n  \n  // a = a - b\n  \n  static void\n  subf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # must be signed\n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] - b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n  \n  // a = b * c\n  \n  // 0xffffffff + 0xffffffff * 0xffffffff == 0xffffffff00000000\n  \n  static void\n  mulf(unsigned int *a, unsigned int *b, int len, unsigned int c)\n  {\n    int i\n    unsigned long long t = 0; # must be unsigned\n    for (i = 0; i < len; i++) {\n      t += (unsigned long long) b[i] * c\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n    a[i] = (unsigned int) t\n  }\n   */\n\n  mmod = function(a, b) {\n    return a.mod(b);\n  };\n\n  mdivrem = function(a, b) {\n    var toReturn;\n    toReturn = a.divmod(b);\n    return [toReturn.quotient, toReturn.remainder];\n  };\n\n  Eval_mod = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return mod();\n  };\n\n  mod = function() {\n    var n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"mod function: divide by zero\");\n    }\n    if (!isNumericAtom(p1) || !isNumericAtom(p2)) {\n      push_symbol(MOD);\n      push(p1);\n      push(p2);\n      list(3);\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      push(p1);\n      n = pop_integer();\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n      push_integer(n);\n      p1 = pop();\n    }\n    if (isdouble(p2)) {\n      push(p2);\n      n = pop_integer();\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n      push_integer(n);\n      p2 = pop();\n    }\n    if (!isinteger(p1) || !isinteger(p2)) {\n      stop(\"mod function: integer arguments expected\");\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mmod(p1.q.a, p2.q.a);\n    p3.q.b = mint(1);\n    push(p3);\n    return restore();\n  };\n\n  mpow = function(a, n) {\n    return a.pow(n);\n  };\n\n  mprime = function(n) {\n    return n.isProbablePrime();\n  };\n\n  mroot = function(n, index) {\n    var i, j, k, o, ref, x, y;\n    n = n.abs();\n    i = 0;\n    j = 0;\n    k = 0;\n    if (index === 0) {\n      stop(\"root index is zero\");\n    }\n    k = 0;\n    while (n.shiftRight(k) > 0) {\n      k++;\n    }\n    if (k === 0) {\n      return mint(0);\n    }\n    k = Math.floor((k - 1) / index);\n    j = Math.floor(k / 32 + 1);\n    x = bigInt(j);\n    for (i = o = 0, ref = j; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      x = x.and(bigInt(1).shiftLeft(i).not());\n    }\n    while (k >= 0) {\n      x = x.or(bigInt(1).shiftLeft(k));\n      y = mpow(x, index);\n      switch (mcmp(y, n)) {\n        case 0:\n          return x;\n        case 1:\n          x = x.and(bigInt(1).shiftLeft(k).not());\n      }\n      k--;\n    }\n    return 0;\n  };\n\n  Eval_multiply = function() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      multiply();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  multiply = function() {\n    if (esc_flag) {\n      stop(\"escape key stop\");\n    }\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply_numbers();\n    } else {\n      save();\n      yymultiply();\n      return restore();\n    }\n  };\n\n  yymultiply = function() {\n    var h, i, n, o, ref, ref1;\n    h = 0;\n    i = 0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    if (isZeroAtom(p1) || isZeroAtom(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        multiply();\n        add();\n        p1 = cdr(p1);\n      }\n      return;\n    }\n    if (expanding && isadd(p2)) {\n      p2 = cdr(p2);\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      while (iscons(p2)) {\n        push(p1);\n        push(car(p2));\n        multiply();\n        add();\n        p2 = cdr(p2);\n      }\n      return;\n    }\n    if (!istensor(p1) && istensor(p2)) {\n      push(p1);\n      push(p2);\n      scalar_times_tensor();\n      return;\n    }\n    if (istensor(p1) && !istensor(p2)) {\n      push(p1);\n      push(p2);\n      tensor_times_scalar();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n    } else {\n      push(p1);\n      list(1);\n      p1 = pop();\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n    } else {\n      push(p2);\n      list(1);\n      p2 = pop();\n    }\n    if (isNumericAtom(car(p1)) && isNumericAtom(car(p2))) {\n      push(car(p1));\n      push(car(p2));\n      multiply_numbers();\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    } else if (isNumericAtom(car(p1))) {\n      push(car(p1));\n      p1 = cdr(p1);\n    } else if (isNumericAtom(car(p2))) {\n      push(car(p2));\n      p2 = cdr(p2);\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n    }\n    parse_p1();\n    parse_p2();\n    while (iscons(p1) && iscons(p2)) {\n      if (caar(p1) === symbol(OPERATOR) && caar(p2) === symbol(OPERATOR)) {\n        push_symbol(OPERATOR);\n        push(cdar(p1));\n        push(cdar(p2));\n        append();\n        cons();\n        p1 = cdr(p1);\n        p2 = cdr(p2);\n        parse_p1();\n        parse_p2();\n        continue;\n      }\n      switch (cmp_expr(p3, p4)) {\n        case -1:\n          push(car(p1));\n          p1 = cdr(p1);\n          parse_p1();\n          break;\n        case 1:\n          push(car(p2));\n          p2 = cdr(p2);\n          parse_p2();\n          break;\n        case 0:\n          combine_factors(h);\n          p1 = cdr(p1);\n          p2 = cdr(p2);\n          parse_p1();\n          parse_p2();\n          break;\n        default:\n          stop(\"internal error 2\");\n      }\n    }\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n    while (iscons(p2)) {\n      push(car(p2));\n      p2 = cdr(p2);\n    }\n    __normalize_radical_factors(h);\n    if (expanding) {\n      for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n        if (isadd(stack[i])) {\n          multiply_all(tos - h);\n          return;\n        }\n      }\n    }\n    n = tos - h;\n    if (n === 1) {\n      return;\n    }\n    if (isrational(stack[h]) && equaln(stack[h], 1)) {\n      if (n === 2) {\n        p7 = pop();\n        pop();\n        push(p7);\n      } else {\n        stack[h] = symbol(MULTIPLY);\n        list(n);\n      }\n      return;\n    }\n    list(n);\n    p7 = pop();\n    push_symbol(MULTIPLY);\n    push(p7);\n    return cons();\n  };\n\n  parse_p1 = function() {\n    p3 = car(p1);\n    p5 = evaluatingAsFloats ? one_as_double : one;\n    if (car(p3) === symbol(POWER)) {\n      p5 = caddr(p3);\n      return p3 = cadr(p3);\n    }\n  };\n\n  parse_p2 = function() {\n    p4 = car(p2);\n    p6 = evaluatingAsFloats ? one_as_double : one;\n    if (car(p4) === symbol(POWER)) {\n      p6 = caddr(p4);\n      return p4 = cadr(p4);\n    }\n  };\n\n  combine_factors = function(h) {\n    push(p4);\n    push(p5);\n    push(p6);\n    add();\n    power();\n    p7 = pop();\n    if (isNumericAtom(p7)) {\n      push(stack[h]);\n      push(p7);\n      multiply_numbers();\n      return stack[h] = pop();\n    } else if (car(p7) === symbol(MULTIPLY)) {\n      if (isNumericAtom(cadr(p7)) && cdddr(p7) === symbol(NIL)) {\n        push(stack[h]);\n        push(cadr(p7));\n        multiply_numbers();\n        stack[h] = pop();\n        return push(caddr(p7));\n      } else {\n        return push(p7);\n      }\n    } else {\n      return push(p7);\n    }\n  };\n\n  gp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, -6, -7, -8, -3, -4, -5, 13, 14, 15, -16, 9, 10, 11, -12], [0, 0, 6, -1, -11, 10, -2, -15, 14, 12, -5, 4, -9, 16, -8, 7, -13], [0, 0, 7, 11, -1, -9, 15, -2, -13, 5, 12, -3, -10, 8, 16, -6, -14], [0, 0, 8, -10, 9, -1, -14, 13, -2, -4, 3, 12, -11, -7, 6, 16, -15], [0, 0, 3, 2, 15, -14, 1, 11, -10, 16, -8, 7, 13, 12, -5, 4, 9], [0, 0, 4, -15, 2, 13, -11, 1, 9, 8, 16, -6, 14, 5, 12, -3, 10], [0, 0, 5, 14, -13, 2, 10, -9, 1, -7, 6, 16, 15, -4, 3, 12, 11], [0, 0, 13, 12, -5, 4, 16, -8, 7, -1, -11, 10, -3, -2, -15, 14, -6], [0, 0, 14, 5, 12, -3, 8, 16, -6, 11, -1, -9, -4, 15, -2, -13, -7], [0, 0, 15, -4, 3, 12, -7, 6, 16, -10, 9, -1, -5, -14, 13, -2, -8], [0, 0, 16, -9, -10, -11, -13, -14, -15, -3, -4, -5, 1, -6, -7, -8, 2], [0, 0, 9, -16, 8, -7, -12, 5, -4, -2, -15, 14, 6, -1, -11, 10, 3], [0, 0, 10, -8, -16, 6, -5, -12, 3, 15, -2, -13, 7, 11, -1, -9, 4], [0, 0, 11, 7, -6, -16, 4, -3, -12, -14, 13, -2, 8, -10, 9, -1, 5], [0, 0, 12, 13, 14, 15, 9, 10, 11, -6, -7, -8, -2, -3, -4, -5, -1]];\n\n  combine_gammas = function(h) {\n    var n;\n    n = gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)];\n    if (n < 0) {\n      n = -n;\n      push(stack[h]);\n      negate();\n      stack[h] = pop();\n    }\n    if (n > 1) {\n      return push(_gamma[n]);\n    }\n  };\n\n  multiply_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply();\n    return expanding = prev_expanding;\n  };\n\n  multiply_all = function(n) {\n    var h, i, o, ref;\n    i = 0;\n    if (n === 1) {\n      return;\n    }\n    if (n === 0) {\n      push(evaluatingAsFloats ? one_as_double : one);\n      return;\n    }\n    h = tos - n;\n    push(stack[h]);\n    for (i = o = 1, ref = n; 1 <= ref ? o < ref : o > ref; i = 1 <= ref ? ++o : --o) {\n      push(stack[h + i]);\n      multiply();\n    }\n    stack[h] = pop();\n    return moveTos(h + 1);\n  };\n\n  multiply_all_noexpand = function(n) {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply_all(n);\n    return expanding = prev_expanding;\n  };\n\n  divide = function() {\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return divide_numbers();\n    } else {\n      inverse();\n      return multiply();\n    }\n  };\n\n  inverse = function() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return invert_number();\n    } else {\n      push_integer(-1);\n      return power();\n    }\n  };\n\n  reciprocate = function() {\n    return inverse();\n  };\n\n  negate = function() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return negate_number();\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(-1.0);\n      } else {\n        push_integer(-1);\n      }\n      return multiply();\n    }\n  };\n\n  negate_expand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  negate_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  __normalize_radical_factors = function(h) {\n    var i, i1, j1, o, ref, ref1, ref2, ref3, ref4, ref5;\n    i = 0;\n    if (isplusone(stack[h]) || isminusone(stack[h]) || isdouble(stack[h])) {\n      return;\n    }\n    for (i = o = ref = h + 1, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      if (__is_radical_number(stack[i])) {\n        break;\n      }\n    }\n    if (i === tos) {\n      return;\n    }\n    save();\n    push(stack[h]);\n    mp_numerator();\n    p1 = pop();\n    for (i = i1 = ref2 = h + 1, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      if (isplusone(p1) || isminusone(p1)) {\n        break;\n      }\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n      if (!isnegativenumber(p4)) {\n        continue;\n      }\n      push(p1);\n      push(p3);\n      divide();\n      p5 = pop();\n      if (!isinteger(p5)) {\n        continue;\n      }\n      p1 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(evaluatingAsFloats ? one_as_double : one);\n      push(p4);\n      add();\n      list(3);\n      stack[i] = pop();\n    }\n    push(stack[h]);\n    mp_denominator();\n    p2 = pop();\n    for (i = j1 = ref4 = h + 1, ref5 = tos; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; i = ref4 <= ref5 ? ++j1 : --j1) {\n      if (isplusone(p2)) {\n        break;\n      }\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n      if (isnegativenumber(p4)) {\n        continue;\n      }\n      push(p2);\n      push(p3);\n      divide();\n      p5 = pop();\n      if (!isinteger(p5)) {\n        continue;\n      }\n      p2 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(p4);\n      push(one);\n      subtract();\n      if (dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication) {\n        if (isinteger(p3) && !isinteger(stack[tos - 1]) && isnegativenumber(stack[tos - 1])) {\n          pop();\n          pop();\n          pop();\n          push(p1);\n          push(p3);\n          divide();\n          p1 = pop();\n          break;\n        }\n      }\n      list(3);\n      stack[i] = pop();\n    }\n    push(p1);\n    push(p2);\n    divide();\n    stack[h] = pop();\n    return restore();\n  };\n\n  __is_radical_number = function(p) {\n    if (car(p) === symbol(POWER) && isNumericAtom(cadr(p)) && isNumericAtom(caddr(p)) && !isminusone(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  NROOTS_YMAX = 101;\n\n  NROOTS_DELTA = 1.0e-6;\n\n  NROOTS_EPSILON = 1.0e-9;\n\n  NROOTS_ABS = function(z) {\n    return Math.sqrt(z.r * z.r + z.i * z.i);\n  };\n\n  theRandom = 0.0;\n\n  NROOTS_RANDOM = function() {\n    return 4.0 * Math.random() - 2.0;\n  };\n\n  numericRootOfPolynomial = (function() {\n    function numericRootOfPolynomial() {}\n\n    numericRootOfPolynomial.prototype.r = 0.0;\n\n    numericRootOfPolynomial.prototype.i = 0.0;\n\n    return numericRootOfPolynomial;\n\n  })();\n\n  nroots_a = new numericRootOfPolynomial();\n\n  nroots_b = new numericRootOfPolynomial();\n\n  nroots_x = new numericRootOfPolynomial();\n\n  nroots_y = new numericRootOfPolynomial();\n\n  nroots_fa = new numericRootOfPolynomial();\n\n  nroots_fb = new numericRootOfPolynomial();\n\n  nroots_dx = new numericRootOfPolynomial();\n\n  nroots_df = new numericRootOfPolynomial();\n\n  nroots_c = [];\n\n  for (initNRoots = o = 0, ref = NROOTS_YMAX; 0 <= ref ? o < ref : o > ref; initNRoots = 0 <= ref ? ++o : --o) {\n    nroots_c[initNRoots] = new numericRootOfPolynomial();\n  }\n\n  Eval_nroots = function() {\n    var h, i, i1, j1, k, l1, n, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    p2 = pop();\n    p1 = pop();\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"nroots: polynomial?\");\n    }\n    h = tos;\n    push(p1);\n    push(p2);\n    n = coeff();\n    if (n > NROOTS_YMAX) {\n      stop(\"nroots: degree?\");\n    }\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(stack[h + i]);\n      real();\n      yyfloat();\n      Eval();\n      p1 = pop();\n      push(stack[h + i]);\n      imag();\n      yyfloat();\n      Eval();\n      p2 = pop();\n      if (!isdouble(p1) || !isdouble(p2)) {\n        stop(\"nroots: coefficients?\");\n      }\n      nroots_c[i].r = p1.d;\n      nroots_c[i].i = p2.d;\n    }\n    moveTos(h);\n    monic(n);\n    for (k = j1 = ref2 = n; j1 > 1; k = j1 += -1) {\n      findroot(k);\n      if (Math.abs(nroots_a.r) < NROOTS_DELTA) {\n        nroots_a.r = 0.0;\n      }\n      if (Math.abs(nroots_a.i) < NROOTS_DELTA) {\n        nroots_a.i = 0.0;\n      }\n      push_double(nroots_a.r);\n      push_double(nroots_a.i);\n      push(imaginaryunit);\n      multiply();\n      add();\n      NROOTS_divpoly(k);\n    }\n    n = tos - h;\n    if (n > 1) {\n      sort_stack(n);\n      p1 = alloc_tensor(n);\n      p1.tensor.ndim = 1;\n      p1.tensor.dim[0] = n;\n      for (i = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        p1.tensor.elem[i] = stack[h + i];\n      }\n      moveTos(h);\n      return push(p1);\n    }\n  };\n\n  monic = function(n) {\n    var i1, k, ref1, t;\n    k = 0;\n    t = 0.0;\n    nroots_y.r = nroots_c[n - 1].r;\n    nroots_y.i = nroots_c[n - 1].i;\n    t = nroots_y.r * nroots_y.r + nroots_y.i * nroots_y.i;\n    for (k = i1 = 0, ref1 = n - 1; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      nroots_c[k].r = (nroots_c[k].r * nroots_y.r + nroots_c[k].i * nroots_y.i) / t;\n      nroots_c[k].i = (nroots_c[k].i * nroots_y.r - nroots_c[k].r * nroots_y.i) / t;\n    }\n    nroots_c[n - 1].r = 1.0;\n    return nroots_c[n - 1].i = 0.0;\n  };\n\n  findroot = function(n) {\n    var i1, j, j1, k, nrabs, t;\n    j = 0;\n    k = 0;\n    t = 0.0;\n    if (NROOTS_ABS(nroots_c[0]) < NROOTS_DELTA) {\n      nroots_a.r = 0.0;\n      nroots_a.i = 0.0;\n      return;\n    }\n    for (j = i1 = 0; i1 < 100; j = ++i1) {\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      compute_fa(n);\n      nroots_b.r = nroots_a.r;\n      nroots_b.i = nroots_a.i;\n      nroots_fb.r = nroots_fa.r;\n      nroots_fb.i = nroots_fa.i;\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      for (k = j1 = 0; j1 < 1000; k = ++j1) {\n        compute_fa(n);\n        nrabs = NROOTS_ABS(nroots_fa);\n        if (DEBUG) {\n          console.log(\"nrabs: \" + nrabs);\n        }\n        if (nrabs < NROOTS_EPSILON) {\n          return;\n        }\n        if (NROOTS_ABS(nroots_fa) < NROOTS_ABS(nroots_fb)) {\n          nroots_x.r = nroots_a.r;\n          nroots_x.i = nroots_a.i;\n          nroots_a.r = nroots_b.r;\n          nroots_a.i = nroots_b.i;\n          nroots_b.r = nroots_x.r;\n          nroots_b.i = nroots_x.i;\n          nroots_x.r = nroots_fa.r;\n          nroots_x.i = nroots_fa.i;\n          nroots_fa.r = nroots_fb.r;\n          nroots_fa.i = nroots_fb.i;\n          nroots_fb.r = nroots_x.r;\n          nroots_fb.i = nroots_x.i;\n        }\n        nroots_dx.r = nroots_b.r - nroots_a.r;\n        nroots_dx.i = nroots_b.i - nroots_a.i;\n        nroots_df.r = nroots_fb.r - nroots_fa.r;\n        nroots_df.i = nroots_fb.i - nroots_fa.i;\n        t = nroots_df.r * nroots_df.r + nroots_df.i * nroots_df.i;\n        if (t === 0.0) {\n          break;\n        }\n        nroots_y.r = (nroots_dx.r * nroots_df.r + nroots_dx.i * nroots_df.i) / t;\n        nroots_y.i = (nroots_dx.i * nroots_df.r - nroots_dx.r * nroots_df.i) / t;\n        nroots_a.r = nroots_b.r - (nroots_y.r * nroots_fb.r - nroots_y.i * nroots_fb.i);\n        nroots_a.i = nroots_b.i - (nroots_y.r * nroots_fb.i + nroots_y.i * nroots_fb.r);\n      }\n    }\n    return stop(\"nroots: convergence error\");\n  };\n\n  compute_fa = function(n) {\n    var i1, k, ref1, results, t;\n    k = 0;\n    t = 0.0;\n    nroots_x.r = nroots_a.r;\n    nroots_x.i = nroots_a.i;\n    nroots_fa.r = nroots_c[0].r + nroots_c[1].r * nroots_x.r - nroots_c[1].i * nroots_x.i;\n    nroots_fa.i = nroots_c[0].i + nroots_c[1].r * nroots_x.i + nroots_c[1].i * nroots_x.r;\n    results = [];\n    for (k = i1 = 2, ref1 = n; 2 <= ref1 ? i1 < ref1 : i1 > ref1; k = 2 <= ref1 ? ++i1 : --i1) {\n      t = nroots_a.r * nroots_x.r - nroots_a.i * nroots_x.i;\n      nroots_x.i = nroots_a.r * nroots_x.i + nroots_a.i * nroots_x.r;\n      nroots_x.r = t;\n      nroots_fa.r += nroots_c[k].r * nroots_x.r - nroots_c[k].i * nroots_x.i;\n      results.push(nroots_fa.i += nroots_c[k].r * nroots_x.i + nroots_c[k].i * nroots_x.r);\n    }\n    return results;\n  };\n\n  NROOTS_divpoly = function(n) {\n    var i1, j1, k, ref1, ref2, results;\n    k = 0;\n    for (k = i1 = ref1 = n - 1; ref1 <= 0 ? i1 < 0 : i1 > 0; k = ref1 <= 0 ? ++i1 : --i1) {\n      nroots_c[k - 1].r += nroots_c[k].r * nroots_a.r - nroots_c[k].i * nroots_a.i;\n      nroots_c[k - 1].i += nroots_c[k].i * nroots_a.r + nroots_c[k].r * nroots_a.i;\n    }\n    if (NROOTS_ABS(nroots_c[0]) > NROOTS_DELTA) {\n      stop(\"nroots: residual error\");\n    }\n    results = [];\n    for (k = j1 = 0, ref2 = n - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      nroots_c[k].r = nroots_c[k + 1].r;\n      results.push(nroots_c[k].i = nroots_c[k + 1].i);\n    }\n    return results;\n  };\n\n  Eval_numerator = function() {\n    push(cadr(p1));\n    Eval();\n    return numerator();\n  };\n\n  numerator = function() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        numerator();\n        theArgument = cdr(theArgument);\n      }\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_numerator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      return push(one);\n    } else {\n      return push(theArgument);\n    }\n  };\n\n  Eval_outer = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      outer();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  outer = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (istensor(p1) && istensor(p2)) {\n      yyouter();\n    } else {\n      push(p1);\n      push(p2);\n      if (istensor(p1)) {\n        tensor_times_scalar();\n      } else if (istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        multiply();\n      }\n    }\n    return restore();\n  };\n\n  yyouter = function() {\n    var i, i1, j, j1, k, l1, m1, ndim, nelem, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    k = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n    if (ndim > MAXDIM) {\n      stop(\"outer: rank of result exceeds maximum\");\n    }\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = i1 = 0, ref1 = p1.tensor.ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    j = i;\n    for (i = j1 = 0, ref2 = p2.tensor.ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      p3.tensor.dim[j + i] = p2.tensor.dim[i];\n    }\n    k = 0;\n    for (i = l1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      for (j = m1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2.tensor.elem[j]);\n        multiply();\n        p3.tensor.elem[k++] = pop();\n      }\n    }\n    return push(p3);\n  };\n\n\n  /*\n   Partition a term\n  \n    Input stack:\n  \n      term (factor or product of factors)\n  \n      free variable\n  \n    Output stack:\n  \n      constant expression\n  \n      variable expression\n   */\n\n  partition = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push_integer(1);\n    p3 = pop();\n    p4 = p3;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      if (Find(car(p1), p2)) {\n        push(p4);\n        push(car(p1));\n        multiply();\n        p4 = pop();\n      } else {\n        push(p3);\n        push(car(p1));\n        multiply();\n        p3 = pop();\n      }\n      p1 = cdr(p1);\n    }\n    push(p3);\n    push(p4);\n    return restore();\n  };\n\n\n  /*\n    Add a pattern i.e. a substitution rule.\n    Substitution rule needs a template as first argument\n    and what to transform it to as second argument.\n    Optional third argument is a boolean test which\n    adds conditions to when the rule is applied.\n   */\n\n  Eval_silentpattern = function() {\n    Eval_pattern();\n    pop();\n    return push_symbol(NIL);\n  };\n\n  Eval_pattern = function() {\n    var firstArgument, patternPosition, secondArgument, stringKey, thirdArgument;\n    if (!iscons(cdr(p1))) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    firstArgument = car(cdr(p1));\n    secondArgument = car(cdr(cdr(p1)));\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    if (!iscons(cdr(cdr(p1)))) {\n      thirdArgument = symbol(NIL);\n    } else {\n      thirdArgument = car(cdr(cdr(cdr(p1))));\n    }\n    if (equal(firstArgument, secondArgument)) {\n      stop(\"recursive pattern\");\n    }\n    stringKey = \"template: \" + print_list(firstArgument);\n    stringKey += \" tests: \" + print_list(thirdArgument);\n    if (DEBUG) {\n      console.log(\"pattern stringkey: \" + stringKey);\n    }\n    patternPosition = userSimplificationsInStringForm.indexOf(stringKey);\n    if (patternPosition === -1) {\n      userSimplificationsInStringForm.push(stringKey);\n      userSimplificationsInListForm.push(cdr(p1));\n    } else {\n      if (DEBUG) {\n        console.log(\"pattern already exists, replacing. \" + cdr(p1));\n      }\n      userSimplificationsInStringForm[patternPosition] = stringKey;\n      userSimplificationsInListForm[patternPosition] = cdr(p1);\n    }\n    push_symbol(PATTERN);\n    push(cdr(p1));\n    return list(2);\n  };\n\n\n  /*\n    Clear all patterns\n   */\n\n  do_clearPatterns = function() {\n    userSimplificationsInListForm = [];\n    return userSimplificationsInStringForm = [];\n  };\n\n  Eval_clearpatterns = function() {\n    do_clearPatterns();\n    return push_symbol(NIL);\n  };\n\n  Eval_patternsinfo = function() {\n    var patternsinfoToBePrinted;\n    patternsinfoToBePrinted = patternsinfo();\n    if (patternsinfoToBePrinted !== \"\") {\n      return new_string(patternsinfoToBePrinted);\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  patternsinfo = function() {\n    var i, i1, len, patternsinfoToBePrinted;\n    patternsinfoToBePrinted = \"\";\n    for (i1 = 0, len = userSimplificationsInListForm.length; i1 < len; i1++) {\n      i = userSimplificationsInListForm[i1];\n      patternsinfoToBePrinted += userSimplificationsInListForm + \"\\n\";\n    }\n    return patternsinfoToBePrinted;\n  };\n\n\n  /*\n  Convert complex z to polar form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n  \n    polar(z) = abs(z) * exp(i * arg(z))\n   */\n\n  Eval_polar = function() {\n    push(cadr(p1));\n    Eval();\n    return polar();\n  };\n\n  polar = function() {\n    evaluatingPolar++;\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n    push(imaginaryunit);\n    push(p1);\n    arg();\n    multiply();\n    exponential();\n    multiply();\n    evaluatingPolar--;\n    return restore();\n  };\n\n  n_factor_number = 0;\n\n  factor_number = function() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n    if (equaln(p1, 0) || equaln(p1, 1) || equaln(p1, -1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    n_factor_number = p1.q.a;\n    h = tos;\n    factor_a();\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      cons();\n    }\n    return restore();\n  };\n\n  factor_a = function() {\n    var i1, k;\n    k = 0;\n    if (n_factor_number.isNegative()) {\n      n_factor_number = setSignTo(n_factor_number, 1);\n      push_integer(-1);\n    }\n    for (k = i1 = 0; i1 < 10000; k = ++i1) {\n      try_kth_prime(k);\n      if (n_factor_number.compare(1) === 0) {\n        return;\n      }\n    }\n    return factor_b();\n  };\n\n  try_kth_prime = function(k) {\n    var count, d, q, r, ref1;\n    count = 0;\n    d = mint(primetab[k]);\n    count = 0;\n    while (1) {\n      if (n_factor_number.compare(1) === 0) {\n        if (count) {\n          push_factor(d, count);\n        }\n        return;\n      }\n      ref1 = mdivrem(n_factor_number, d), q = ref1[0], r = ref1[1];\n      if (r.isZero()) {\n        count++;\n        n_factor_number = q;\n      } else {\n        break;\n      }\n    }\n    if (count) {\n      push_factor(d, count);\n    }\n    if (mcmp(q, d) === -1) {\n      push_factor(n_factor_number, 1);\n      return n_factor_number = mint(1);\n    }\n  };\n\n  factor_b = function() {\n    var bigint_one, g, k, l, t, x, xprime;\n    k = 0;\n    l = 0;\n    bigint_one = mint(1);\n    x = mint(5);\n    xprime = mint(2);\n    k = 1;\n    l = 1;\n    while (1) {\n      if (mprime(n_factor_number)) {\n        push_factor(n_factor_number, 1);\n        return 0;\n      }\n      while (1) {\n        if (esc_flag) {\n          stop(\"esc\");\n        }\n        t = msub(xprime, x);\n        t = setSignTo(t, 1);\n        g = mgcd(t, n_factor_number);\n        if (MEQUAL(g, 1)) {\n          if (--k === 0) {\n            xprime = x;\n            l *= 2;\n            k = l;\n          }\n          t = mmul(x, x);\n          x = madd(t, bigint_one);\n          t = mmod(x, n_factor_number);\n          x = t;\n          continue;\n        }\n        push_factor(g, 1);\n        if (mcmp(g, n_factor_number) === 0) {\n          return -1;\n        }\n        t = mdiv(n_factor_number, g);\n        n_factor_number = t;\n        t = mmod(x, n_factor_number);\n        x = t;\n        t = mmod(xprime, n_factor_number);\n        xprime = t;\n        break;\n      }\n    }\n  };\n\n  push_factor = function(d, count) {\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = d;\n    p1.q.b = mint(1);\n    push(p1);\n    if (count > 1) {\n      push_symbol(POWER);\n      swap();\n      p1 = new U();\n      p1.k = NUM;\n      p1.q.a = mint(count);\n      p1.q.b = mint(1);\n      push(p1);\n      return list(3);\n    }\n  };\n\n\n  /* Power function\n  \n    Input:    push  Base\n  \n        push  Exponent\n  \n    Output:    Result on stack\n   */\n\n  DEBUG_POWER = false;\n\n  Eval_power = function() {\n    if (DEBUG_POWER) {\n      debugger;\n    }\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return power();\n  };\n\n  power = function() {\n    save();\n    yypower();\n    return restore();\n  };\n\n  yypower = function() {\n    var b_isEven_and_c_isItsInverse, hopefullySimplified, inputBase, inputExp, isThisOne, is_a_moreThanZero, n;\n    if (DEBUG_POWER) {\n      debugger;\n    }\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    inputExp = p2;\n    inputBase = p1;\n    if (DEBUG_POWER) {\n      console.log(\"POWER: \" + p1 + \" ^ \" + p2);\n    }\n    if (equal(p1, one) || isZeroAtomOrTensor(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (equal(p2, one)) {\n      push(p1);\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isminusone(p1) && isminusone(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n      negate();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isminusone(p1) && (isoneovertwo(p2))) {\n      push(imaginaryunit);\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isminusone(p1) && isminusoneovertwo(p2)) {\n      push(imaginaryunit);\n      negate();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isminusone(p1) && !isdouble(p1) && isrational(p2) && !isinteger(p2) && ispositivenumber(p2) && !evaluatingAsFloats) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: -1 ^ rational\");\n      }\n      if (DEBUG_POWER) {\n        console.log(\" trick: p2.q.a , p2.q.b \" + p2.q.a + \" , \" + p2.q.b);\n      }\n      if (p2.q.a < p2.q.b) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n      } else {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push_symbol(POWER);\n        push(p1);\n        push_rational(p2.q.a.mod(p2.q.b), p2.q.b);\n        list(3);\n        list(3);\n        if (DEBUG_POWER) {\n          console.log(\" trick applied : \" + stack[tos - 1]);\n        }\n      }\n      rect();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isrational(p1) && isrational(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: isrational(p1) && isrational(p2)\");\n      }\n      push(p1);\n      push(p2);\n      qpow();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: both base and exponent are either rational or double \");\n      }\n      if (DEBUG_POWER) {\n        console.log(\"POWER - isNumericAtom(p1) && isNumericAtom(p2)\");\n      }\n      push(p1);\n      push(p2);\n      dpow();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (istensor(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: istensor(p1) \");\n      }\n      power_tensor();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (car(p1) === symbol(ABS) && iseveninteger(p2) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: even power of absolute of real value \");\n      }\n      push(cadr(p1));\n      push(p2);\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (p1 === symbol(E) && car(p2) === symbol(LOG)) {\n      push(cadr(p2));\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (p1 === symbol(E) && isdouble(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: p1 == symbol(E) && isdouble(p2) \");\n      }\n      push_double(Math.exp(p2.d));\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (p1 === symbol(E) && Find(p2, imaginaryunit) !== 0 && Find(p2, symbol(PI)) !== 0 && !evaluatingPolar) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      if (DEBUG_POWER) {\n        console.log(\"   power: turning complex exponential to rect: \" + stack[tos - 1]);\n      }\n      rect();\n      hopefullySimplified = pop();\n      if (Find(hopefullySimplified, symbol(PI)) === 0) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: turned complex exponential to rect: \" + hopefullySimplified);\n        }\n        push(hopefullySimplified);\n        return;\n      }\n    }\n    if (car(p1) === symbol(MULTIPLY) && isinteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) \");\n      }\n      p1 = cdr(p1);\n      push(car(p1));\n      push(p2);\n      power();\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        power();\n        multiply();\n        p1 = cdr(p1);\n      }\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    is_a_moreThanZero = false;\n    if (isNumericAtom(cadr(p1))) {\n      is_a_moreThanZero = sign(compare_numbers(cadr(p1), zero));\n    }\n    if (car(p1) === symbol(POWER) && (isinteger(p2) || is_a_moreThanZero)) {\n      push(cadr(p1));\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    b_isEven_and_c_isItsInverse = false;\n    if (iseveninteger(caddr(p1))) {\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      isThisOne = pop();\n      if (isone(isThisOne)) {\n        b_isEven_and_c_isItsInverse = true;\n      }\n    }\n    if (car(p1) === symbol(POWER) && b_isEven_and_c_isItsInverse) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse \");\n      }\n      push(cadr(p1));\n      abs();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (expanding && isadd(p1) && isNumericAtom(p2)) {\n      push(p2);\n      n = pop_integer();\n      if (n > 1 && !isNaN(n)) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: expanding && isadd(p1) && isNumericAtom(p2) \");\n        }\n        power_sum(n);\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n    }\n    if (trigmode === 1 && car(p1) === symbol(SIN) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) \");\n      }\n      push_integer(1);\n      push(cadr(p1));\n      cosine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (trigmode === 2 && car(p1) === symbol(COS) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) \");\n      }\n      push_integer(1);\n      push(cadr(p1));\n      sine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (iscomplexnumber(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\" power - handling the case (a + ib) ^ n\");\n      }\n      if (isinteger(p2)) {\n        push(p1);\n        conjugate();\n        p3 = pop();\n        push(p3);\n        push(p3);\n        push(p1);\n        multiply();\n        divide();\n        if (!isone(p2)) {\n          push(p2);\n          negate();\n          power();\n        }\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n      if (isNumericAtom(p2)) {\n        push(p1);\n        abs();\n        push(p2);\n        power();\n        push_integer(-1);\n        push(p1);\n        arg();\n        push(p2);\n        multiply();\n        if (evaluatingAsFloats || (iscomplexnumberdouble(p1) && isdouble(p2))) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n        divide();\n        power();\n        multiply();\n        if (avoidCalculatingPowersIntoArctans) {\n          if (Find(stack[tos - 1], symbol(ARCTAN))) {\n            pop();\n            push_symbol(POWER);\n            push(p1);\n            push(p2);\n            list(3);\n          }\n        }\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n    }\n    if (simplify_polar()) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: using simplify_polar\");\n      }\n      return;\n    }\n    if (DEBUG_POWER) {\n      console.log(\"   power: nothing can be done \");\n    }\n    push_symbol(POWER);\n    push(p1);\n    push(p2);\n    list(3);\n    if (DEBUG_POWER) {\n      return console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n    }\n  };\n\n  power_sum = function(n) {\n    var a, i, i1, j, j1, k, l1, ref1, ref2, ref3;\n    a = [];\n    i = 0;\n    j = 0;\n    k = 0;\n    k = length(p1) - 1;\n    push_frame(k * (n + 1));\n    p1 = cdr(p1);\n    for (i = i1 = 0, ref1 = k; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      for (j = j1 = 0, ref2 = n; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n        push(car(p1));\n        push_integer(j);\n        power();\n        stack[frame + i * (n + 1) + j] = pop();\n      }\n      p1 = cdr(p1);\n    }\n    push_integer(n);\n    factorial();\n    p1 = pop();\n    for (i = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      a[i] = 0;\n    }\n    push(zero);\n    multinomial_sum(k, n, a, 0, n);\n    return pop_frame(k * (n + 1));\n  };\n\n  multinomial_sum = function(k, n, a, i, m) {\n    var i1, j, j1, l1, ref1, ref2, ref3;\n    j = 0;\n    if (i < k - 1) {\n      for (j = i1 = 0, ref1 = m; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        a[i] = j;\n        multinomial_sum(k, n, a, i + 1, m - j);\n      }\n      return;\n    }\n    a[i] = m;\n    push(p1);\n    for (j = j1 = 0, ref2 = k; 0 <= ref2 ? j1 < ref2 : j1 > ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n      push_integer(a[j]);\n      factorial();\n      divide();\n    }\n    for (j = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[frame + j * (n + 1) + a[j]]);\n      multiply();\n    }\n    return add();\n  };\n\n  simplify_polar = function() {\n    var doNothing, n;\n    n = 0;\n    n = isquarterturn(p2);\n    switch (n) {\n      case 0:\n        doNothing = 1;\n        break;\n      case 1:\n        push_integer(1);\n        return 1;\n      case 2:\n        push_integer(-1);\n        return 1;\n      case 3:\n        push(imaginaryunit);\n        return 1;\n      case 4:\n        push(imaginaryunit);\n        negate();\n        return 1;\n    }\n    if (car(p2) === symbol(ADD)) {\n      p3 = cdr(p2);\n      while (iscons(p3)) {\n        n = isquarterturn(car(p3));\n        if (n) {\n          break;\n        }\n        p3 = cdr(p3);\n      }\n      switch (n) {\n        case 0:\n          return 0;\n        case 1:\n          push_integer(1);\n          break;\n        case 2:\n          push_integer(-1);\n          break;\n        case 3:\n          push(imaginaryunit);\n          break;\n        case 4:\n          push(imaginaryunit);\n          negate();\n      }\n      push(p2);\n      push(car(p3));\n      subtract();\n      exponential();\n      multiply();\n      return 1;\n    }\n    return 0;\n  };\n\n  Eval_prime = function() {\n    push(cadr(p1));\n    Eval();\n    return prime();\n  };\n\n  prime = function() {\n    var n;\n    n = 0;\n    n = pop_integer();\n    if (n < 1 || n > MAXPRIMETAB) {\n      stop(\"prime: Argument out of range.\");\n    }\n    n = primetab[n - 1];\n    return push_integer(n);\n  };\n\n  power_str = \"^\";\n\n  codeGen = false;\n\n  Eval_print = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), printMode);\n    return push(symbol(NIL));\n  };\n\n  Eval_print2dascii = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_2DASCII);\n    return push(symbol(NIL));\n  };\n\n  Eval_printcomputer = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_COMPUTER);\n    return push(symbol(NIL));\n  };\n\n  Eval_printlatex = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_LATEX);\n    return push(symbol(NIL));\n  };\n\n  Eval_printhuman = function() {\n    var original_test_flag;\n    original_test_flag = test_flag;\n    test_flag = 0;\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_HUMAN);\n    test_flag = original_test_flag;\n    return push(symbol(NIL));\n  };\n\n  Eval_printlist = function() {\n    var beenPrinted;\n    beenPrinted = _print(cdr(p1), PRINTMODE_LIST);\n    stringsEmittedByUserPrintouts += beenPrinted;\n    return push(symbol(NIL));\n  };\n\n  _print = function(p, passedPrintMode) {\n    var accumulator, origPrintMode;\n    accumulator = \"\";\n    while (iscons(p)) {\n      push(car(p));\n      Eval();\n      p2 = pop();\n\n      /*\n      if (issymbol(car(p)) && car(p) != p2)\n        push_symbol(SETQ);\n        push(car(p));\n        push(p2);\n        list(3);\n        p2 = pop();\n       */\n      origPrintMode = printMode;\n      if (passedPrintMode === PRINTMODE_COMPUTER) {\n        printMode = PRINTMODE_COMPUTER;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_FULL_PRINT);\n      } else if (passedPrintMode === PRINTMODE_HUMAN) {\n        printMode = PRINTMODE_HUMAN;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_PLAIN_PRINT);\n      } else if (passedPrintMode === PRINTMODE_2DASCII) {\n        printMode = PRINTMODE_2DASCII;\n        accumulator = print2dascii(p2);\n        rememberPrint(accumulator, LAST_2DASCII_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LATEX) {\n        printMode = PRINTMODE_LATEX;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_LATEX_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LIST) {\n        printMode = PRINTMODE_LIST;\n        accumulator = print_list(p2);\n        rememberPrint(accumulator, LAST_LIST_PRINT);\n      }\n      printMode = origPrintMode;\n      p = cdr(p);\n    }\n    if (DEBUG) {\n      console.log(\"emttedString from display: \" + stringsEmittedByUserPrintouts);\n    }\n    return accumulator;\n  };\n\n  rememberPrint = function(theString, theTypeOfPrint) {\n    var parsedString;\n    scan('\"' + theString + '\"');\n    parsedString = pop();\n    return set_binding(symbol(theTypeOfPrint), parsedString);\n  };\n\n  print_str = function(s) {\n    if (DEBUG) {\n      console.log(\"emttedString from print_str: \" + stringsEmittedByUserPrintouts);\n    }\n    return s;\n  };\n\n  print_char = function(c) {\n    return c;\n  };\n\n  collectLatexStringFromReturnValue = function(p) {\n    var origPrintMode, originalCodeGen, returnedString;\n    origPrintMode = printMode;\n    printMode = PRINTMODE_LATEX;\n    originalCodeGen = codeGen;\n    codeGen = false;\n    returnedString = print_expr(p);\n    returnedString = returnedString.replace(/_/g, \"\\\\_\");\n    printMode = origPrintMode;\n    codeGen = originalCodeGen;\n    if (DEBUG) {\n      console.log(\"emttedString from collectLatexStringFromReturnValue: \" + stringsEmittedByUserPrintouts);\n    }\n    return returnedString;\n  };\n\n  printline = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(p);\n    return accumulator;\n  };\n\n  print_base_of_denom = function(p1) {\n    var accumulator;\n    accumulator = \"\";\n    if (isfraction(p1) || car(p1) === symbol(ADD) || car(p1) === symbol(MULTIPLY) || car(p1) === symbol(POWER) || lessp(p1, zero)) {\n      accumulator += print_char('(');\n      accumulator += print_expr(p1);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p1);\n    }\n    return accumulator;\n  };\n\n  print_expo_of_denom = function(p2) {\n    var accumulator;\n    accumulator = \"\";\n    if (isfraction(p2) || car(p2) === symbol(ADD) || car(p2) === symbol(MULTIPLY) || car(p2) === symbol(POWER)) {\n      accumulator += print_char('(');\n      accumulator += print_expr(p2);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p2);\n    }\n    return accumulator;\n  };\n\n  print_denom = function(p, d) {\n    var accumulator;\n    accumulator = \"\";\n    save();\n    p1 = cadr(p);\n    p2 = caddr(p);\n    if (isminusone(p2)) {\n      accumulator += print_base_of_denom(p1);\n      restore();\n      return accumulator;\n    }\n    if (d === 1) {\n      accumulator += print_char('(');\n    }\n    push(p2);\n    negate();\n    p2 = pop();\n    accumulator += print_power(p1, p2);\n    if (d === 1) {\n      accumulator += print_char(')');\n    }\n    restore();\n    return accumulator;\n  };\n\n  print_a_over_b = function(p) {\n    var accumulator, d, doNothing, n;\n    accumulator = \"\";\n    flag = 0;\n    n = 0;\n    d = 0;\n    save();\n    n = 0;\n    d = 0;\n    p1 = cdr(p);\n    p2 = car(p1);\n    if (isrational(p2)) {\n      push(p2);\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(p2);\n      mp_denominator();\n      p4 = pop();\n      if (!isplusone(p3)) {\n        n++;\n      }\n      if (!isplusone(p4)) {\n        d++;\n      }\n      p1 = cdr(p1);\n    } else {\n      p3 = one;\n      p4 = one;\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (is_denominator(p2)) {\n        d++;\n      } else {\n        n++;\n      }\n      p1 = cdr(p1);\n    }\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('\\\\frac{');\n    }\n    if (n === 0) {\n      accumulator += print_char('1');\n    } else {\n      flag = 0;\n      p1 = cdr(p);\n      if (isrational(car(p1))) {\n        p1 = cdr(p1);\n      }\n      if (!isplusone(p3)) {\n        accumulator += print_factor(p3);\n        flag = 1;\n      }\n      while (iscons(p1)) {\n        p2 = car(p1);\n        if (is_denominator(p2)) {\n          doNothing = 1;\n        } else {\n          if (flag) {\n            accumulator += print_multiply_sign();\n          }\n          accumulator += print_factor(p2);\n          flag = 1;\n        }\n        p1 = cdr(p1);\n      }\n    }\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}{');\n    } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n      accumulator += print_str(\" / \");\n    } else {\n      accumulator += print_str(\"/\");\n    }\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char('(');\n    }\n    flag = 0;\n    p1 = cdr(p);\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n    if (!isplusone(p4)) {\n      accumulator += print_factor(p4);\n      flag = 1;\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (is_denominator(p2)) {\n        if (flag) {\n          accumulator += print_multiply_sign();\n        }\n        accumulator += print_denom(p2, d);\n        flag = 1;\n      }\n      p1 = cdr(p1);\n    }\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char(')');\n    }\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}');\n    }\n    restore();\n    return accumulator;\n  };\n\n  print_expr = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (isadd(p)) {\n      p = cdr(p);\n      if (sign_of_term(car(p)) === '-') {\n        accumulator += print_str(\"-\");\n      }\n      accumulator += print_term(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        if (sign_of_term(car(p)) === '+') {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" + \");\n          } else {\n            accumulator += print_str(\"+\");\n          }\n        } else {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" - \");\n          } else {\n            accumulator += print_str(\"-\");\n          }\n        }\n        accumulator += print_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (sign_of_term(p) === '-') {\n        accumulator += print_str(\"-\");\n      }\n      accumulator += print_term(p);\n    }\n    return accumulator;\n  };\n\n  sign_of_term = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && lessp(cadr(p), zero)) {\n      accumulator += '-';\n    } else if (isNumericAtom(p) && lessp(p, zero)) {\n      accumulator += '-';\n    } else {\n      accumulator += '+';\n    }\n    return accumulator;\n  };\n\n  print_term = function(p) {\n    var accumulator, denom, numberOneOverSomething, origAccumulator, previousFactorWasANumber;\n    accumulator = \"\";\n    if (car(p) === symbol(MULTIPLY) && any_denominators(p)) {\n      accumulator += print_a_over_b(p);\n      return accumulator;\n    }\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      if (isminusone(car(p))) {\n        p = cdr(p);\n      }\n      previousFactorWasANumber = false;\n      if (isNumericAtom(car(p))) {\n        previousFactorWasANumber = true;\n      }\n      numberOneOverSomething = false;\n      if (printMode === PRINTMODE_LATEX && iscons(cdr(p)) && isNumberOneOverSomething(car(p))) {\n        numberOneOverSomething = true;\n        denom = car(p).q.b.toString();\n      }\n      if (numberOneOverSomething) {\n        origAccumulator = accumulator;\n        accumulator = \"\";\n      } else {\n        accumulator += print_factor(car(p));\n      }\n      p = cdr(p);\n      while (iscons(p)) {\n        if (printMode === PRINTMODE_LATEX) {\n          if (previousFactorWasANumber) {\n            if (caar(p) === symbol(POWER)) {\n              if (isNumericAtom(car(cdr(car(p))))) {\n                if (!isfraction(car(cdr(cdr(car(p)))))) {\n                  accumulator += \" \\\\cdot \";\n                }\n              }\n            }\n          }\n        }\n        accumulator += print_multiply_sign();\n        accumulator += print_factor(car(p));\n        previousFactorWasANumber = false;\n        if (isNumericAtom(car(p))) {\n          previousFactorWasANumber = true;\n        }\n        p = cdr(p);\n      }\n      if (numberOneOverSomething) {\n        accumulator = origAccumulator + \"\\\\frac{\" + accumulator + \"}{\" + denom + \"}\";\n      }\n    } else {\n      accumulator += print_factor(p);\n    }\n    return accumulator;\n  };\n\n  print_subexpr = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_char('(');\n    accumulator += print_expr(p);\n    accumulator += print_char(')');\n    return accumulator;\n  };\n\n  print_factorial_function = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cadr(p);\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(p);\n    } else {\n      accumulator += print_expr(p);\n    }\n    accumulator += print_char('!');\n    return accumulator;\n  };\n\n  print_ABS_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\left |\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\right |\");\n    return accumulator;\n  };\n\n  print_BINOMIAL_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\binom{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"}{\");\n    accumulator += print_expr(caddr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_DOT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\cdot \");\n    accumulator += print_expr(caddr(p));\n    return accumulator;\n  };\n\n  print_DOT_codegen = function(p) {\n    var accumulator;\n    accumulator = \"dot(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \", \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SIN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.sin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_COS_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.cos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_TAN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.tan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCSIN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.asin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCCOS_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.acos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCTAN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.atan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SQRT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\sqrt{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n    accumulator += print_expr(cadr(p));\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^T\");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"transpose(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_UNIT_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"identity(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_INV_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n    accumulator += print_expr(cadr(p));\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^{-1}\");\n    return accumulator;\n  };\n\n  print_INV_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"inv(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_DEFINT_latex = function(p) {\n    var accumulator, functionBody, i, i1, numberOfIntegrals, originalIntegral, ref1, theIntegral, theVariable;\n    accumulator = \"\";\n    functionBody = car(cdr(p));\n    p = cdr(p);\n    originalIntegral = p;\n    numberOfIntegrals = 0;\n    while (iscons(cdr(cdr(p)))) {\n      numberOfIntegrals++;\n      theIntegral = cdr(cdr(p));\n      accumulator += print_str(\"\\\\int^{\");\n      accumulator += print_expr(car(cdr(theIntegral)));\n      accumulator += print_str(\"}_{\");\n      accumulator += print_expr(car(theIntegral));\n      accumulator += print_str(\"} \\\\! \");\n      p = cdr(theIntegral);\n    }\n    accumulator += print_expr(functionBody);\n    accumulator += print_str(\" \\\\,\");\n    p = originalIntegral;\n    for (i = i1 = 1, ref1 = numberOfIntegrals; 1 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      theVariable = cdr(p);\n      accumulator += print_str(\" \\\\mathrm{d} \");\n      accumulator += print_expr(car(theVariable));\n      if (i < numberOfIntegrals) {\n        accumulator += print_str(\" \\\\, \");\n      }\n      p = cdr(cdr(theVariable));\n    }\n    return accumulator;\n  };\n\n  print_tensor = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_tensor_inner(p, 0, 0)[1];\n    return accumulator;\n  };\n\n  print_tensor_inner = function(p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, ref3, retString;\n    accumulator = \"\";\n    accumulator += print_str(\"[\");\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        ref2 = print_tensor_inner(p, j + 1, k), k = ref2[0], retString = ref2[1];\n        accumulator += retString;\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n      }\n    } else {\n      for (i = j1 = 0, ref3 = p.tensor.dim[j]; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n        k++;\n      }\n    }\n    accumulator += print_str(\"]\");\n    return [k, accumulator];\n  };\n\n  print_tensor_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (p.tensor.ndim <= 2) {\n      accumulator += print_tensor_inner_latex(true, p, 0, 0)[1];\n    }\n    return accumulator;\n  };\n\n  print_tensor_inner_latex = function(firstLevel, p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, ref3, retString;\n    accumulator = \"\";\n    if (firstLevel) {\n      accumulator += \"\\\\begin{bmatrix} \";\n    }\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        ref2 = print_tensor_inner_latex(0, p, j + 1, k), k = ref2[0], retString = ref2[1];\n        accumulator += retString;\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" \\\\\\\\ \");\n        }\n      }\n    } else {\n      for (i = j1 = 0, ref3 = p.tensor.dim[j]; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" & \");\n        }\n        k++;\n      }\n    }\n    if (firstLevel) {\n      accumulator += \" \\\\end{bmatrix}\";\n    }\n    return [k, accumulator];\n  };\n\n  print_SUM_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\sum_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_SUM_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderSum = 0; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderSum += \" + print_expr(body) + \";\" + \" } \" + \" return holderSum;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_TEST_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\left\\\\{ \\\\begin{array}{ll}\";\n    p = cdr(p);\n    while (iscons(p)) {\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"{\";\n        accumulator += print_expr(car(p));\n        accumulator += \"} & otherwise \";\n        accumulator += \" \\\\\\\\\\\\\\\\\";\n        break;\n      }\n      accumulator += \"{\";\n      accumulator += print_expr(cadr(p));\n      accumulator += \"} & if & \";\n      accumulator += print_expr(car(p));\n      accumulator += \" \\\\\\\\\\\\\\\\\";\n      p = cddr(p);\n    }\n    accumulator = accumulator.substring(0, accumulator.length - 4);\n    return accumulator += \"\\\\end{array} \\\\right.\";\n  };\n\n  print_TEST_codegen = function(p) {\n    var accumulator, howManyIfs;\n    accumulator = \"(function(){\";\n    p = cdr(p);\n    howManyIfs = 0;\n    while (iscons(p)) {\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"else {\";\n        accumulator += \"return (\" + print_expr(car(p)) + \");\";\n        accumulator += \"}\";\n        break;\n      }\n      if (howManyIfs) {\n        accumulator += \" else \";\n      }\n      accumulator += \"if (\" + print_expr(car(p)) + \"){\";\n      accumulator += \"return (\" + print_expr(cadr(p)) + \");\";\n      accumulator += \"}\";\n      howManyIfs++;\n      p = cddr(p);\n    }\n    accumulator += \"})()\";\n    return accumulator;\n  };\n\n  print_TESTLT_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" < \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTLE_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\leq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGT_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" > \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGE_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\geq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTEQ_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" = \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_FOR_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   \" + print_expr(body) + \" } \" + \"})()\";\n    return accumulator;\n  };\n\n  print_DO_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n    while (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n    }\n    return accumulator;\n  };\n\n  print_SETQ_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \" = \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"; \";\n    return accumulator;\n  };\n\n  print_PRODUCT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\prod_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_PRODUCT_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderProduct = 1; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderProduct *= \" + print_expr(body) + \";\" + \" } \" + \" return holderProduct;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_base = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (isadd(cadr(p)) || caadr(p) === symbol(MULTIPLY) || caadr(p) === symbol(POWER) || isnegativenumber(cadr(p))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(cadr(p));\n      accumulator += print_str(')');\n    } else if (isNumericAtom(cadr(p)) && (lessp(cadr(p), zero) || isfraction(cadr(p)))) {\n      accumulator += print_str('(');\n      accumulator += print_factor(cadr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(cadr(p));\n    }\n    return accumulator;\n  };\n\n  print_exponent = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (iscons(caddr(p)) || isfraction(caddr(p)) || (isNumericAtom(caddr(p)) && lessp(caddr(p), zero))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(caddr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(caddr(p));\n    }\n    return accumulator;\n  };\n\n  print_power = function(base, exponent) {\n    var accumulator, denomExponent, newExponent, numExponent;\n    accumulator = \"\";\n    if (DEBUG) {\n      console.log(\"power base: \" + base + \" \" + \" exponent: \" + exponent);\n    }\n    if (isoneovertwo(exponent)) {\n      if (equaln(base, 2)) {\n        if (codeGen) {\n          accumulator += print_str(\"Math.SQRT2\");\n          return accumulator;\n        }\n      } else {\n        if (printMode === PRINTMODE_LATEX) {\n          accumulator += print_str(\"\\\\sqrt{\");\n          accumulator += print_expr(base);\n          accumulator += print_str(\"}\");\n          return accumulator;\n        } else if (codeGen) {\n          accumulator += print_str(\"Math.sqrt(\");\n          accumulator += print_expr(base);\n          accumulator += print_str(')');\n          return accumulator;\n        }\n      }\n    }\n    if ((equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)), 1)) && base === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.exp(\");\n        accumulator += print_expo_of_denom(exponent);\n        accumulator += print_str(')');\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"e^{\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(\"}\");\n      } else {\n        accumulator += print_str(\"exp(\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (codeGen) {\n      accumulator += print_str(\"Math.pow(\");\n      accumulator += print_base_of_denom(base);\n      accumulator += print_str(\", \");\n      accumulator += print_expo_of_denom(exponent);\n      accumulator += print_str(')');\n      return accumulator;\n    }\n    if ((equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)), 0)) || base.printname !== \"x\") {\n      if (base !== symbol(E)) {\n        if (isminusone(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_expr(base);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_expr(base);\n          }\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n          return accumulator;\n        }\n        if (isnegativeterm(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n          push(exponent);\n          push_integer(-1);\n          multiply();\n          newExponent = pop();\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_power(base, newExponent);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_power(base, newExponent);\n          }\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n          return accumulator;\n        }\n      }\n      if (isfraction(exponent) && printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\sqrt\");\n        push(exponent);\n        denominator();\n        denomExponent = pop();\n        if (!isplustwo(denomExponent)) {\n          accumulator += print_str(\"[\");\n          accumulator += print_expr(denomExponent);\n          accumulator += print_str(\"]\");\n        }\n        accumulator += print_str(\"{\");\n        push(exponent);\n        numerator();\n        numExponent = pop();\n        exponent = numExponent;\n        accumulator += print_power(base, exponent);\n        accumulator += print_str(\"}\");\n        return accumulator;\n      }\n    }\n    if (printMode === PRINTMODE_LATEX && isplusone(exponent)) {\n      accumulator += print_expr(base);\n    } else {\n      if (isadd(base) || isnegativenumber(base)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(base);\n        accumulator += print_str(')');\n      } else if (car(base) === symbol(MULTIPLY) || car(base) === symbol(POWER)) {\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str('(');\n        }\n        accumulator += print_factor(base, true);\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str(')');\n        }\n      } else if (isNumericAtom(base) && (lessp(base, zero) || isfraction(base))) {\n        accumulator += print_str('(');\n        accumulator += print_factor(base);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(base);\n      }\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(power_str);\n      } else {\n        accumulator += print_str(\"^\");\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        if (print_expr(exponent).length > 1) {\n          accumulator += print_str(\"{\");\n          accumulator += print_expr(exponent);\n          accumulator += print_str(\"}\");\n        } else {\n          accumulator += print_expr(exponent);\n        }\n      } else if (iscons(exponent) || isfraction(exponent) || (isNumericAtom(exponent) && lessp(exponent, zero))) {\n        accumulator += print_str('(');\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(exponent);\n      }\n    }\n    return accumulator;\n  };\n\n  print_index_function = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(car(p));\n    } else {\n      accumulator += print_expr(car(p));\n    }\n    accumulator += print_str('[');\n    p = cdr(p);\n    if (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        accumulator += print_str(',');\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    accumulator += print_str(']');\n    return accumulator;\n  };\n\n  print_factor = function(p, omitParens) {\n    var accumulator, base, exponent, fbody, parameters, returned;\n    accumulator = \"\";\n    if (isNumericAtom(p)) {\n      accumulator += print_number(p, false);\n      return accumulator;\n    }\n    if (isstr(p)) {\n      accumulator += print_str(\"\\\"\");\n      accumulator += print_str(p.str);\n      accumulator += print_str(\"\\\"\");\n      return accumulator;\n    }\n    if (istensor(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_tensor_latex(p);\n      } else {\n        accumulator += print_tensor(p);\n      }\n      return accumulator;\n    }\n    if (car(p) === symbol(MULTIPLY)) {\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\left (\");\n          } else {\n            accumulator += print_str('(');\n          }\n        }\n      }\n      accumulator += print_expr(p);\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\right ) \");\n          } else {\n            accumulator += print_str(')');\n          }\n        }\n      }\n      return accumulator;\n    } else if (isadd(p)) {\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n      accumulator += print_expr(p);\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (car(p) === symbol(POWER)) {\n      base = cadr(p);\n      exponent = caddr(p);\n      accumulator += print_power(base, exponent);\n      return accumulator;\n    }\n    if (car(p) === symbol(FUNCTION)) {\n      fbody = cadr(p);\n      if (!codeGen) {\n        parameters = caddr(p);\n        accumulator += print_str(\"function \");\n        if (DEBUG) {\n          console.log(\"emittedString from print_factor \" + stringsEmittedByUserPrintouts);\n        }\n        returned = print_list(parameters);\n        accumulator += returned;\n        accumulator += print_str(\" -> \");\n      }\n      accumulator += print_expr(fbody);\n      return accumulator;\n    }\n    if (car(p) === symbol(PATTERN)) {\n      accumulator += print_expr(caadr(p));\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\" \\\\rightarrow \");\n      } else {\n        if (printMode === PRINTMODE_HUMAN && !test_flag) {\n          accumulator += print_str(\" -> \");\n        } else {\n          accumulator += print_str(\"->\");\n        }\n      }\n      accumulator += print_expr(car(cdr(cadr(p))));\n      return accumulator;\n    }\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      accumulator += print_index_function(p);\n      return accumulator;\n    }\n    if (car(p) === symbol(FACTORIAL)) {\n      accumulator += print_factorial_function(p);\n      return accumulator;\n    } else if (car(p) === symbol(ABS) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_ABS_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(SQRT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_SQRT_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(TRANSPOSE)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TRANSPOSE_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_TRANSPOSE_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(UNIT)) {\n      if (codeGen) {\n        accumulator += print_UNIT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(INV)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_INV_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_INV_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(BINOMIAL) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_BINOMIAL_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(DEFINT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_DEFINT_latex(p);\n      return accumulator;\n    } else if (isinnerordot(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_DOT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_DOT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SIN)) {\n      if (codeGen) {\n        accumulator += print_SIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(COS)) {\n      if (codeGen) {\n        accumulator += print_COS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TAN)) {\n      if (codeGen) {\n        accumulator += print_TAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCSIN)) {\n      if (codeGen) {\n        accumulator += print_ARCSIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCCOS)) {\n      if (codeGen) {\n        accumulator += print_ARCCOS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCTAN)) {\n      if (codeGen) {\n        accumulator += print_ARCTAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SUM)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_SUM_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_SUM_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(PRODUCT)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_PRODUCT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_PRODUCT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FOR)) {\n      if (codeGen) {\n        accumulator += print_FOR_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(DO)) {\n      if (codeGen) {\n        accumulator += print_DO_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TEST)) {\n      if (codeGen) {\n        accumulator += print_TEST_codegen(p);\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TEST_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") < (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") <= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") > (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") >= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTEQ)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") === (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTEQ_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FLOOR)) {\n      if (codeGen) {\n        accumulator += \"Math.floor(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lfloor {\" + print_expr(cadr(p)) + \"} \\\\rfloor \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(CEILING)) {\n      if (codeGen) {\n        accumulator += \"Math.ceiling(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lceil {\" + print_expr(cadr(p)) + \"} \\\\rceil \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ROUND)) {\n      if (codeGen) {\n        accumulator += \"Math.round(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SETQ)) {\n      if (codeGen) {\n        accumulator += print_SETQ_codegen(p);\n        return accumulator;\n      } else {\n        accumulator += print_expr(cadr(p));\n        accumulator += print_str(\"=\");\n        accumulator += print_expr(caddr(p));\n        return accumulator;\n      }\n    }\n    if (iscons(p)) {\n      accumulator += print_factor(car(p));\n      p = cdr(p);\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n      if (iscons(p)) {\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n        while (iscons(p)) {\n          accumulator += print_str(\",\");\n          accumulator += print_expr(car(p));\n          p = cdr(p);\n        }\n      }\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (p === symbol(DERIVATIVE)) {\n      accumulator += print_char('d');\n    } else if (p === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.E\");\n      } else {\n        accumulator += print_str(\"e\");\n      }\n    } else if (p === symbol(PI)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\pi\");\n      } else {\n        accumulator += print_str(\"pi\");\n      }\n    } else {\n      accumulator += print_str(get_printname(p));\n    }\n    return accumulator;\n  };\n\n  print_list = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    switch (p.k) {\n      case CONS:\n        accumulator += '(';\n        accumulator += print_list(car(p));\n        if (p === cdr(p) && p !== symbol(NIL)) {\n          console.log(\"oh no recursive!\");\n          debugger;\n        }\n        p = cdr(p);\n        while (iscons(p)) {\n          accumulator += \" \";\n          accumulator += print_list(car(p));\n          p = cdr(p);\n          if (p === cdr(p) && p !== symbol(NIL)) {\n            console.log(\"oh no recursive!\");\n            debugger;\n          }\n        }\n        if (p !== symbol(NIL)) {\n          accumulator += \" . \";\n          accumulator += print_list(p);\n        }\n        accumulator += ')';\n        break;\n      case STR:\n        accumulator += p.str;\n        break;\n      case NUM:\n      case DOUBLE:\n        accumulator += print_number(p, true);\n        break;\n      case SYM:\n        accumulator += get_printname(p);\n        break;\n      default:\n        accumulator += \"<tensor>\";\n    }\n    return accumulator;\n  };\n\n  print_multiply_sign = function() {\n    var accumulator;\n    accumulator = \"\";\n    if (printMode === PRINTMODE_LATEX) {\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(\" \");\n      } else {\n        return accumulator;\n      }\n    }\n    if (printMode === PRINTMODE_HUMAN && !test_flag && !codeGen) {\n      accumulator += print_str(\" \");\n    } else {\n      accumulator += print_str(\"*\");\n    }\n    return accumulator;\n  };\n\n  is_denominator = function(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && isnegativeterm(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  any_denominators = function(p) {\n    var q;\n    p = cdr(p);\n    while (iscons(p)) {\n      q = car(p);\n      if (is_denominator(q)) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n\n  /*\n  \n  Prints in \"2d\", e.g. instead of 1/(x+1)^2 :\n  \n        1\n   ----------\n           2\n    (1 + x)\n  \n   Note that although this looks more natural, a) it's not parsable and\n   b) it can be occasionally be ambiguous, such as:\n  \n     1\n   ----\n     2\n   x\n  \n  is 1/x^2 but it also looks a little like x^(1/2)\n   */\n\n  YMAX = 10000;\n\n  glyph = (function() {\n    function glyph() {}\n\n    glyph.prototype.c = 0;\n\n    glyph.prototype.x = 0;\n\n    glyph.prototype.y = 0;\n\n    return glyph;\n\n  })();\n\n  chartab = [];\n\n  for (charTabIndex = i1 = 0, ref1 = YMAX; 0 <= ref1 ? i1 < ref1 : i1 > ref1; charTabIndex = 0 <= ref1 ? ++i1 : --i1) {\n    chartab[charTabIndex] = new glyph();\n  }\n\n  yindex = 0;\n\n  level = 0;\n\n  emit_x = 0;\n\n  expr_level = 0;\n\n  display_flag = 0;\n\n  printchar_nowrap = function(character) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += character;\n    return accumulator;\n  };\n\n  printchar = function(character) {\n    return printchar_nowrap(character);\n  };\n\n  print2dascii = function(p) {\n    var beenPrinted, h, ref2, w, y;\n    h = 0;\n    w = 0;\n    y = 0;\n    save();\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_top_expr(p);\n    ref2 = get_size(0, yindex), h = ref2[0], w = ref2[1], y = ref2[2];\n    if (w > 100) {\n      printline(p);\n      restore();\n      return;\n    }\n    beenPrinted = print_glyphs();\n    restore();\n    return beenPrinted;\n  };\n\n  emit_top_expr = function(p) {\n    if (car(p) === symbol(SETQ)) {\n      emit_expr(cadr(p));\n      __emit_str(\" = \");\n      emit_expr(caddr(p));\n      return;\n    }\n    if (istensor(p)) {\n      return emit_tensor(p);\n    } else {\n      return emit_expr(p);\n    }\n  };\n\n  will_be_displayed_as_fraction = function(p) {\n    if (level > 0) {\n      return 0;\n    }\n    if (isfraction(p)) {\n      return 1;\n    }\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n    if (isfraction(cadr(p))) {\n      return 1;\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  emit_expr = function(p) {\n    expr_level++;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      if (__is_negative(car(p))) {\n        __emit_char('-');\n        if (will_be_displayed_as_fraction(car(p))) {\n          __emit_char(' ');\n        }\n      }\n      emit_term(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n          __emit_char('-');\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n          __emit_char('+');\n          __emit_char(' ');\n        }\n        emit_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (__is_negative(p)) {\n        __emit_char('-');\n        if (will_be_displayed_as_fraction(p)) {\n          __emit_char(' ');\n        }\n      }\n      emit_term(p);\n    }\n    return expr_level--;\n  };\n\n  emit_unsigned_expr = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      emit_term(car(p));\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n          __emit_char('-');\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n          __emit_char('+');\n          __emit_char(' ');\n        }\n        emit_term(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return emit_term(p);\n    }\n  };\n\n  __is_negative = function(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    }\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    }\n    return 0;\n  };\n\n  emit_term = function(p) {\n    var n;\n    if (car(p) === symbol(MULTIPLY)) {\n      n = count_denominators(p);\n      if (n && level === 0) {\n        return emit_fraction(p, n);\n      } else {\n        return emit_multiply(p, n);\n      }\n    } else {\n      return emit_factor(p);\n    }\n  };\n\n  isdenominator = function(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && __is_negative(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  count_denominators = function(p) {\n    var count, q;\n    count = 0;\n    p = cdr(p);\n    while (iscons(p)) {\n      q = car(p);\n      if (isdenominator(q)) {\n        count++;\n      }\n      p = cdr(p);\n    }\n    return count;\n  };\n\n  emit_multiply = function(p, n) {\n    var results;\n    if (n === 0) {\n      p = cdr(p);\n      if (isplusone(car(p)) || isminusone(car(p))) {\n        p = cdr(p);\n      }\n      emit_factor(car(p));\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        __emit_char(' ');\n        emit_factor(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      emit_numerators(p);\n      __emit_char('/');\n      if (n > 1 || isfraction(cadr(p))) {\n        __emit_char('(');\n        emit_denominators(p);\n        return __emit_char(')');\n      } else {\n        return emit_denominators(p);\n      }\n    }\n  };\n\n  emit_fraction = function(p, d) {\n    var count, doNothing, k1, k2, n, x;\n    count = 0;\n    k1 = 0;\n    k2 = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = one;\n    p4 = one;\n    if (isrational(cadr(p))) {\n      push(cadr(p));\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(cadr(p));\n      mp_denominator();\n      p4 = pop();\n    }\n    if (isdouble(cadr(p))) {\n      push(cadr(p));\n      absval();\n      p3 = pop();\n    }\n    if (isplusone(p3)) {\n      n = 0;\n    } else {\n      n = 1;\n    }\n    p1 = cdr(p);\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        n++;\n      }\n      p1 = cdr(p1);\n    }\n    x = emit_x;\n    k1 = yindex;\n    count = 0;\n    if (!isplusone(p3)) {\n      emit_number(p3, 0);\n      count++;\n    }\n    p1 = cdr(p);\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n        if (n === 1) {\n          emit_expr(p2);\n        } else {\n          emit_factor(p2);\n        }\n        count++;\n      }\n      p1 = cdr(p1);\n    }\n    if (count === 0) {\n      __emit_char('1');\n    }\n    k2 = yindex;\n    count = 0;\n    if (!isplusone(p4)) {\n      emit_number(p4, 0);\n      count++;\n      d++;\n    }\n    p1 = cdr(p);\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n        emit_denominator(p2, d);\n        count++;\n      }\n      p1 = cdr(p1);\n    }\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  emit_numerators = function(p) {\n    var doNothing, n;\n    save();\n    n = 0;\n    p1 = one;\n    p = cdr(p);\n    if (isrational(car(p))) {\n      push(car(p));\n      mp_numerator();\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    } else if (isdouble(car(p))) {\n      push(car(p));\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    }\n    n = 0;\n    if (!isplusone(p1)) {\n      emit_number(p1, 0);\n      n++;\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        doNothing = 1;\n      } else {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n        emit_factor(car(p));\n        n++;\n      }\n      p = cdr(p);\n    }\n    if (n === 0) {\n      __emit_char('1');\n    }\n    return restore();\n  };\n\n  emit_denominators = function(p) {\n    var n;\n    save();\n    n = 0;\n    p = cdr(p);\n    if (isfraction(car(p))) {\n      push(car(p));\n      mp_denominator();\n      p1 = pop();\n      emit_number(p1, 0);\n      n++;\n      p = cdr(p);\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n        emit_denominator(car(p), 0);\n        n++;\n      }\n      p = cdr(p);\n    }\n    return restore();\n  };\n\n  emit_factor = function(p) {\n    if (istensor(p)) {\n      if (level === 0) {\n        emit_flat_tensor(p);\n      } else {\n        emit_flat_tensor(p);\n      }\n      return;\n    }\n    if (isdouble(p)) {\n      emit_number(p, 0);\n      return;\n    }\n    if (car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY)) {\n      emit_subexpr(p);\n      return;\n    }\n    if (car(p) === symbol(POWER)) {\n      emit_power(p);\n      return;\n    }\n    if (iscons(p)) {\n      emit_function(p);\n      return;\n    }\n    if (isNumericAtom(p)) {\n      if (level === 0) {\n        emit_numerical_fraction(p);\n      } else {\n        emit_number(p, 0);\n      }\n      return;\n    }\n    if (issymbol(p)) {\n      emit_symbol(p);\n      return;\n    }\n    if (isstr(p)) {\n      emit_string(p);\n    }\n  };\n\n  emit_numerical_fraction = function(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    save();\n    push(p);\n    mp_numerator();\n    absval();\n    p3 = pop();\n    push(p);\n    mp_denominator();\n    p4 = pop();\n    if (isplusone(p4)) {\n      emit_number(p3, 0);\n      restore();\n      return;\n    }\n    x = emit_x;\n    k1 = yindex;\n    emit_number(p3, 0);\n    k2 = yindex;\n    emit_number(p4, 0);\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  isfactor = function(p) {\n    if (iscons(p) && car(p) !== symbol(ADD) && car(p) !== symbol(MULTIPLY) && car(p) !== symbol(POWER)) {\n      return 1;\n    }\n    if (issymbol(p)) {\n      return 1;\n    }\n    if (isfraction(p)) {\n      return 0;\n    }\n    if (isnegativenumber(p)) {\n      return 0;\n    }\n    if (isNumericAtom(p)) {\n      return 1;\n    }\n    return 0;\n  };\n\n  emit_power = function(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    if (cadr(p) === symbol(E)) {\n      __emit_str(\"exp(\");\n      emit_expr(caddr(p));\n      __emit_char(')');\n      return;\n    }\n    if (level > 0) {\n      if (isminusone(caddr(p))) {\n        __emit_char('1');\n        __emit_char('/');\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n      } else {\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n        __emit_char('^');\n        if (isfactor(caddr(p))) {\n          emit_factor(caddr(p));\n        } else {\n          emit_subexpr(caddr(p));\n        }\n      }\n      return;\n    }\n    if (__is_negative(caddr(p))) {\n      x = emit_x;\n      k1 = yindex;\n      __emit_char('1');\n      k2 = yindex;\n      emit_denominator(p, 1);\n      fixup_fraction(x, k1, k2);\n      return;\n    }\n    k1 = yindex;\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n    k2 = yindex;\n    level++;\n    emit_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_denominator = function(p, n) {\n    var k1, k2;\n    k1 = 0;\n    k2 = 0;\n    if (isminusone(caddr(p))) {\n      if (n === 1) {\n        emit_expr(cadr(p));\n      } else {\n        emit_factor(cadr(p));\n      }\n      return;\n    }\n    k1 = yindex;\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n    k2 = yindex;\n    level++;\n    emit_unsigned_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_function = function(p) {\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      emit_index_function(p);\n      return;\n    }\n    if (car(p) === symbol(FACTORIAL)) {\n      emit_factorial_function(p);\n      return;\n    }\n    if (car(p) === symbol(DERIVATIVE)) {\n      __emit_char('d');\n    } else {\n      emit_symbol(car(p));\n    }\n    __emit_char('(');\n    p = cdr(p);\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        __emit_char(',');\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    return __emit_char(')');\n  };\n\n  emit_index_function = function(p) {\n    p = cdr(p);\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      emit_subexpr(car(p));\n    } else {\n      emit_expr(car(p));\n    }\n    __emit_char('[');\n    p = cdr(p);\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        __emit_char(',');\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    return __emit_char(']');\n  };\n\n  emit_factorial_function = function(p) {\n    p = cadr(p);\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      emit_subexpr(p);\n    } else {\n      emit_expr(p);\n    }\n    return __emit_char('!');\n  };\n\n  emit_subexpr = function(p) {\n    __emit_char('(');\n    emit_expr(p);\n    return __emit_char(')');\n  };\n\n  emit_symbol = function(p) {\n    var i, j1, pPrintName, ref2, results;\n    i = 0;\n    if (p === symbol(E)) {\n      __emit_str(\"exp(1)\");\n      return;\n    }\n    pPrintName = get_printname(p);\n    results = [];\n    for (i = j1 = 0, ref2 = pPrintName.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(pPrintName[i]));\n    }\n    return results;\n  };\n\n  emit_string = function(p) {\n    var i, j1, pString, ref2;\n    i = 0;\n    pString = p.str;\n    __emit_char('\"');\n    for (i = j1 = 0, ref2 = pString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      __emit_char(pString[i]);\n    }\n    return __emit_char('\"');\n  };\n\n  fixup_fraction = function(x, k1, k2) {\n    var dx, dy, h1, h2, i, j1, ref2, ref3, ref4, results, w, w1, w2, y, y1, y2;\n    dx = 0;\n    dy = 0;\n    i = 0;\n    w = 0;\n    y = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    ref2 = get_size(k1, k2), h1 = ref2[0], w1 = ref2[1], y1 = ref2[2];\n    ref3 = get_size(k2, yindex), h2 = ref3[0], w2 = ref3[1], y2 = ref3[2];\n    if (w2 > w1) {\n      dx = (w2 - w1) / 2;\n    } else {\n      dx = 0;\n    }\n    dx++;\n    y = y1 + h1 - 1;\n    dy = -y - 1;\n    move(k1, k2, dx, dy);\n    if (w2 > w1) {\n      dx = -w1;\n    } else {\n      dx = -w1 + (w1 - w2) / 2;\n    }\n    dx++;\n    dy = -y2 + 1;\n    move(k2, yindex, dx, dy);\n    if (w2 > w1) {\n      w = w2;\n    } else {\n      w = w1;\n    }\n    w += 2;\n    emit_x = x;\n    results = [];\n    for (i = j1 = 0, ref4 = w; 0 <= ref4 ? j1 < ref4 : j1 > ref4; i = 0 <= ref4 ? ++j1 : --j1) {\n      results.push(__emit_char('-'));\n    }\n    return results;\n  };\n\n  fixup_power = function(k1, k2) {\n    var dy, h1, h2, ref2, ref3, w1, w2, y1, y2;\n    dy = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    ref2 = get_size(k1, k2), h1 = ref2[0], w1 = ref2[1], y1 = ref2[2];\n    ref3 = get_size(k2, yindex), h2 = ref3[0], w2 = ref3[1], y2 = ref3[2];\n    dy = -y2 - h2 + 1;\n    dy += y1 - 1;\n    return move(k2, yindex, 0, dy);\n  };\n\n  move = function(j, k, dx, dy) {\n    var i, j1, ref2, ref3, results;\n    i = 0;\n    results = [];\n    for (i = j1 = ref2 = j, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      chartab[i].x += dx;\n      results.push(chartab[i].y += dy);\n    }\n    return results;\n  };\n\n  get_size = function(j, k) {\n    var h, i, j1, max_x, max_y, min_x, min_y, ref2, ref3, w, y;\n    i = 0;\n    min_x = chartab[j].x;\n    max_x = chartab[j].x;\n    min_y = chartab[j].y;\n    max_y = chartab[j].y;\n    for (i = j1 = ref2 = j + 1, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      if (chartab[i].x < min_x) {\n        min_x = chartab[i].x;\n      }\n      if (chartab[i].x > max_x) {\n        max_x = chartab[i].x;\n      }\n      if (chartab[i].y < min_y) {\n        min_y = chartab[i].y;\n      }\n      if (chartab[i].y > max_y) {\n        max_y = chartab[i].y;\n      }\n    }\n    h = max_y - min_y + 1;\n    w = max_x - min_x + 1;\n    y = min_y;\n    return [h, w, y];\n  };\n\n  displaychar = function(c) {\n    return __emit_char(c);\n  };\n\n  __emit_char = function(c) {\n    if (yindex === YMAX) {\n      return;\n    }\n    if (chartab[yindex] == null) {\n      debugger;\n    }\n    chartab[yindex].c = c;\n    chartab[yindex].x = emit_x;\n    chartab[yindex].y = 0;\n    yindex++;\n    return emit_x++;\n  };\n\n  __emit_str = function(s) {\n    var i, j1, ref2, results;\n    i = 0;\n    results = [];\n    for (i = j1 = 0, ref2 = s.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(s[i]));\n    }\n    return results;\n  };\n\n  emit_number = function(p, emit_sign) {\n    var i, j1, l1, m1, ref2, ref3, ref4, results, results1, tmpString;\n    tmpString = \"\";\n    i = 0;\n    switch (p.k) {\n      case NUM:\n        tmpString = p.q.a.toString();\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n        for (i = j1 = 0, ref2 = tmpString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n          __emit_char(tmpString[i]);\n        }\n        tmpString = p.q.b.toString();\n        if (tmpString === \"1\") {\n          break;\n        }\n        __emit_char('/');\n        results = [];\n        for (i = l1 = 0, ref3 = tmpString.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n          results.push(__emit_char(tmpString[i]));\n        }\n        return results;\n        break;\n      case DOUBLE:\n        tmpString = doubleToReasonableString(p.d);\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n        results1 = [];\n        for (i = m1 = 0, ref4 = tmpString.length; 0 <= ref4 ? m1 < ref4 : m1 > ref4; i = 0 <= ref4 ? ++m1 : --m1) {\n          results1.push(__emit_char(tmpString[i]));\n        }\n        return results1;\n    }\n  };\n\n  cmpGlyphs = function(a, b) {\n    if (a.y < b.y) {\n      return -1;\n    }\n    if (a.y > b.y) {\n      return 1;\n    }\n    if (a.x < b.x) {\n      return -1;\n    }\n    if (a.x > b.x) {\n      return 1;\n    }\n    return 0;\n  };\n\n  print_glyphs = function() {\n    var accumulator, i, j1, ref2, subsetOfStack, x, y;\n    i = 0;\n    accumulator = \"\";\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        accumulator += printchar('\\n');\n        x = 0;\n        y++;\n      }\n      while (chartab[i].x > x) {\n        accumulator += printchar_nowrap(' ');\n        x++;\n      }\n      accumulator += printchar_nowrap(chartab[i].c);\n      x++;\n    }\n    return accumulator;\n  };\n\n  buffer = \"\";\n\n  getdisplaystr = function() {\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_expr(pop());\n    fill_buf();\n    return buffer;\n  };\n\n  fill_buf = function() {\n    var i, j1, ref2, sIndex, subsetOfStack, tmpBuffer, x, y;\n    tmpBuffer = buffer;\n    sIndex = 0;\n    i = 0;\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        tmpBuffer[sIndex++] = '\\n';\n        x = 0;\n        y++;\n      }\n      while (chartab[i].x > x) {\n        tmpBuffer[sIndex++] = ' ';\n        x++;\n      }\n      tmpBuffer[sIndex++] = chartab[i].c;\n      x++;\n    }\n    return tmpBuffer[sIndex++] = '\\n';\n  };\n\n  N = 100;\n\n  oneElement = (function() {\n    function oneElement() {}\n\n    oneElement.prototype.x = 0;\n\n    oneElement.prototype.y = 0;\n\n    oneElement.prototype.h = 0;\n\n    oneElement.prototype.w = 0;\n\n    oneElement.prototype.index = 0;\n\n    oneElement.prototype.count = 0;\n\n    return oneElement;\n\n  })();\n\n  elem = [];\n\n  for (elelmIndex = j1 = 0; j1 < 10000; elelmIndex = ++j1) {\n    elem[elelmIndex] = new oneElement;\n  }\n\n  SPACE_BETWEEN_COLUMNS = 3;\n\n  SPACE_BETWEEN_ROWS = 1;\n\n  emit_tensor = function(p) {\n    var col, dx, dy, eh, ew, h, i, l1, m1, n, n1, ncol, nrow, o1, ref2, ref3, ref4, ref5, ref6, row, w, x, y;\n    i = 0;\n    n = 0;\n    nrow = 0;\n    ncol = 0;\n    x = 0;\n    y = 0;\n    h = 0;\n    w = 0;\n    dx = 0;\n    dy = 0;\n    eh = 0;\n    ew = 0;\n    row = 0;\n    col = 0;\n    if (p.tensor.ndim > 2) {\n      emit_flat_tensor(p);\n      return;\n    }\n    nrow = p.tensor.dim[0];\n    if (p.tensor.ndim === 2) {\n      ncol = p.tensor.dim[1];\n    } else {\n      ncol = 1;\n    }\n    n = nrow * ncol;\n    if (n > N) {\n      emit_flat_tensor(p);\n      return;\n    }\n    x = emit_x;\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      elem[i].index = yindex;\n      elem[i].x = emit_x;\n      emit_expr(p.tensor.elem[i]);\n      elem[i].count = yindex - elem[i].index;\n      ref3 = get_size(elem[i].index, yindex), elem[i].h = ref3[0], elem[i].w = ref3[1], elem[i].y = ref3[2];\n    }\n    eh = 0;\n    ew = 0;\n    for (i = m1 = 0, ref4 = n; 0 <= ref4 ? m1 < ref4 : m1 > ref4; i = 0 <= ref4 ? ++m1 : --m1) {\n      if (elem[i].h > eh) {\n        eh = elem[i].h;\n      }\n      if (elem[i].w > ew) {\n        ew = elem[i].w;\n      }\n    }\n    h = nrow * eh + (nrow - 1) * SPACE_BETWEEN_ROWS;\n    w = ncol * ew + (ncol - 1) * SPACE_BETWEEN_COLUMNS;\n    y = -(h / 2);\n    for (row = n1 = 0, ref5 = nrow; 0 <= ref5 ? n1 < ref5 : n1 > ref5; row = 0 <= ref5 ? ++n1 : --n1) {\n      for (col = o1 = 0, ref6 = ncol; 0 <= ref6 ? o1 < ref6 : o1 > ref6; col = 0 <= ref6 ? ++o1 : --o1) {\n        i = row * ncol + col;\n        dx = x - elem[i].x;\n        dy = y - elem[i].y;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n        dx = 0;\n        if (col > 0) {\n          dx = col * (ew + SPACE_BETWEEN_COLUMNS);\n        }\n        dy = 0;\n        if (row > 0) {\n          dy = row * (eh + SPACE_BETWEEN_ROWS);\n        }\n        dx += (ew - elem[i].w) / 2;\n        dy += (eh - elem[i].h) / 2;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n      }\n    }\n    return emit_x = x + w;\n\n    /*\n    if 0\n    \n       * left brace\n    \n      for (i = 0; i < h; i++) {\n        if (yindex == YMAX)\n          break\n        chartab[yindex].c = '|'\n        chartab[yindex].x = x - 2\n        chartab[yindex].y = y + i\n        yindex++\n      }\n    \n       * right brace\n    \n      emit_x++\n    \n      for (i = 0; i < h; i++) {\n        if (yindex == YMAX)\n          break\n        chartab[yindex].c = '|'\n        chartab[yindex].x = emit_x\n        chartab[yindex].y = y + i\n        yindex++\n      }\n    \n      emit_x++\n    \n    endif\n     */\n  };\n\n  emit_flat_tensor = function(p) {\n    return emit_tensor_inner(p, 0, 0);\n  };\n\n  emit_tensor_inner = function(p, j, k) {\n    var i, l1, ref2;\n    i = 0;\n    __emit_char('(');\n    for (i = l1 = 0, ref2 = p.tensor.dim[j]; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (j + 1 === p.tensor.ndim) {\n        emit_expr(p.tensor.elem[k]);\n        k = k + 1;\n      } else {\n        k = emit_tensor_inner(p, j + 1, k);\n      }\n      if (i + 1 < p.tensor.dim[j]) {\n        __emit_char(',');\n      }\n    }\n    __emit_char(')');\n    return k;\n  };\n\n  Eval_product = function() {\n    var body, i, indexVariable, j, k, l1, oldIndexVariableValue, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    body = cadr(p1);\n    indexVariable = caddr(p1);\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    oldIndexVariableValue = get_binding(indexVariable);\n    push_integer(1);\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      if (DEBUG) {\n        console.log(\"product - factor 1: \" + stack[tos - 1].toString());\n        console.log(\"product - factor 2: \" + stack[tos - 2].toString());\n      }\n      multiply();\n      if (DEBUG) {\n        console.log(\"product - result: \" + stack[tos - 1].toString());\n      }\n    }\n    return set_binding(indexVariable, oldIndexVariableValue);\n  };\n\n  qadd = function() {\n    var gcdBetweenNumeratorAndDenominator, qadd_ab, qadd_ba, qadd_denominator, qadd_frac1, qadd_frac2, qadd_numerator, resultSum;\n    qadd_frac2 = pop();\n    qadd_frac1 = pop();\n    qadd_ab = mmul(qadd_frac1.q.a, qadd_frac2.q.b);\n    qadd_ba = mmul(qadd_frac1.q.b, qadd_frac2.q.a);\n    qadd_numerator = madd(qadd_ab, qadd_ba);\n    if (MZERO(qadd_numerator)) {\n      push(zero);\n      return;\n    }\n    qadd_denominator = mmul(qadd_frac1.q.b, qadd_frac2.q.b);\n    gcdBetweenNumeratorAndDenominator = mgcd(qadd_numerator, qadd_denominator);\n    gcdBetweenNumeratorAndDenominator = makeSignSameAs(gcdBetweenNumeratorAndDenominator, qadd_denominator);\n    resultSum = new U();\n    resultSum.k = NUM;\n    resultSum.q.a = mdiv(qadd_numerator, gcdBetweenNumeratorAndDenominator);\n    resultSum.q.b = mdiv(qadd_denominator, gcdBetweenNumeratorAndDenominator);\n    return push(resultSum);\n  };\n\n  qdiv = function() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (MZERO(p2.q.a)) {\n      stop(\"divide by zero\");\n    }\n    if (MZERO(p1.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n    aa = mmul(p1.q.a, p2.q.b);\n    bb = mmul(p1.q.b, p2.q.a);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  };\n\n  qmul = function() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (MZERO(p1.q.a) || MZERO(p2.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n    aa = mmul(p1.q.a, p2.q.a);\n    bb = mmul(p1.q.b, p2.q.b);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  };\n\n  qpow = function() {\n    save();\n    qpowf();\n    return restore();\n  };\n\n  qpowf = function() {\n    var a, b, expo, t, x, y;\n    expo = 0;\n    p2 = pop();\n    p1 = pop();\n    if (isplusone(p1) || isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    }\n    if (isminusone(p1) && isoneovertwo(p2)) {\n      push(imaginaryunit);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      if (isnegativenumber(p2)) {\n        stop(\"divide by zero\");\n      }\n      push(zero);\n      return;\n    }\n    if (isplusone(p2)) {\n      push(p1);\n      return;\n    }\n    if (isinteger(p2)) {\n      push(p2);\n      expo = pop_integer();\n      if (isNaN(expo)) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n        return;\n      }\n      x = mpow(p1.q.a, Math.abs(expo));\n      y = mpow(p1.q.b, Math.abs(expo));\n      if (expo < 0) {\n        t = x;\n        x = y;\n        y = t;\n        x = makeSignSameAs(x, y);\n        y = makePositive(y);\n      }\n      p3 = new U();\n      p3.k = NUM;\n      p3.q.a = x;\n      p3.q.b = y;\n      push(p3);\n      return;\n    }\n    if (isminusone(p1)) {\n      push(p2);\n      normalize_angle();\n      return;\n    }\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      qpow();\n      push_integer(-1);\n      push(p2);\n      qpow();\n      multiply();\n      return;\n    }\n    if (!isinteger(p1)) {\n      push(p1);\n      mp_numerator();\n      push(p2);\n      qpow();\n      push(p1);\n      mp_denominator();\n      push(p2);\n      negate();\n      qpow();\n      multiply();\n      return;\n    }\n    if (is_small_integer(p1)) {\n      push(p1);\n      push(p2);\n      quickfactor();\n      return;\n    }\n    if (!isSmall(p2.q.a) || !isSmall(p2.q.b)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    a = p2.q.a;\n    b = p2.q.b;\n    x = mroot(p1.q.a, b);\n    if (x === 0) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    y = mpow(x, a);\n    p3 = new U();\n    p3.k = NUM;\n    if (p2.q.a.isNegative()) {\n      p3.q.a = bigInt(1);\n      p3.q.b = y;\n    } else {\n      p3.q.a = y;\n      p3.q.b = bigInt(1);\n    }\n    return push(p3);\n  };\n\n  normalize_angle = function() {\n    save();\n    p1 = pop();\n    if (isinteger(p1)) {\n      if (p1.q.a.isOdd()) {\n        push_integer(-1);\n      } else {\n        push_integer(1);\n      }\n      restore();\n      return;\n    }\n    push(p1);\n    bignum_truncate();\n    p2 = pop();\n    if (isnegativenumber(p1)) {\n      push(p2);\n      push_integer(-1);\n      add();\n      p2 = pop();\n    }\n    push(p1);\n    push(p2);\n    subtract();\n    p3 = pop();\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p3);\n    list(3);\n    if (p2.q.a.isOdd()) {\n      negate();\n    }\n    return restore();\n  };\n\n  is_small_integer = function(p) {\n    return isSmall(p.q.a);\n  };\n\n  quickfactor = function() {\n    var h, i, l1, n, ref2, stackIndex;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push(p1);\n    factor_small_number();\n    n = tos - h;\n    stackIndex = h;\n    for (i = l1 = 0, ref2 = n; l1 < ref2; i = l1 += 2) {\n      push(stack[stackIndex + i]);\n      push(stack[stackIndex + i + 1]);\n      push(p2);\n      multiply();\n      quickpower();\n    }\n    multiply_all(tos - h - n);\n    p1 = pop();\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  quickpower = function() {\n    var expo;\n    expo = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    bignum_truncate();\n    p3 = pop();\n    push(p2);\n    push(p3);\n    subtract();\n    p4 = pop();\n    if (!isZeroAtomOrTensor(p4)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p4);\n      list(3);\n    }\n    push(p3);\n    expo = pop_integer();\n    if (isNaN(expo)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p3);\n      list(3);\n      restore();\n      return;\n    }\n    if (expo === 0) {\n      restore();\n      return;\n    }\n    push(p1);\n    bignum_power_number(expo);\n    return restore();\n  };\n\n  Eval_quotient = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      p1 = symbol(SYMBOL_X);\n    }\n    push(p1);\n    return divpoly();\n  };\n\n  divpoly = function() {\n    var dividend, divisor, h, i, l1, m, n, ref2, x;\n    h = 0;\n    i = 0;\n    m = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    dividend = tos;\n    push(p1);\n    push(p3);\n    m = coeff() - 1;\n    divisor = tos;\n    push(p2);\n    push(p3);\n    n = coeff() - 1;\n    x = m - n;\n    push_integer(0);\n    p5 = pop();\n    while (x >= 0) {\n      push(stack[dividend + m]);\n      push(stack[divisor + n]);\n      divide();\n      p4 = pop();\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        push(stack[dividend + x + i]);\n        push(stack[divisor + i]);\n        push(p4);\n        multiply();\n        subtract();\n        stack[dividend + x + i] = pop();\n      }\n      push(p5);\n      push(p4);\n      push(p3);\n      push_integer(x);\n      power();\n      multiply();\n      add();\n      p5 = pop();\n      m--;\n      x--;\n    }\n    moveTos(h);\n    push(p5);\n    return restore();\n  };\n\n  Eval_rationalize = function() {\n    push(cadr(p1));\n    Eval();\n    return rationalize();\n  };\n\n  rationalize = function() {\n    var x;\n    x = expanding;\n    yyrationalize();\n    return expanding = x;\n  };\n\n  yyrationalize = function() {\n    var commonDenominator, eachTerm, theArgument;\n    theArgument = pop();\n    if (istensor(theArgument)) {\n      __rationalize_tensor(theArgument);\n      return;\n    }\n    expanding = 0;\n    if (car(theArgument) !== symbol(ADD)) {\n      push(theArgument);\n      return;\n    }\n    if (DEBUG) {\n      printf(\"rationalize: this is the input expr:\\n\");\n      printline(theArgument);\n    }\n    push(one);\n    multiply_denominators(theArgument);\n    commonDenominator = pop();\n    if (DEBUG) {\n      printf(\"rationalize: this is the common denominator:\\n\");\n      printline(commonDenominator);\n    }\n    push(zero);\n    eachTerm = cdr(theArgument);\n    while (iscons(eachTerm)) {\n      push(commonDenominator);\n      push(car(eachTerm));\n      multiply();\n      add();\n      eachTerm = cdr(eachTerm);\n    }\n    if (DEBUG) {\n      printf(\"rationalize: original expr times common denominator:\\n\");\n      printline(stack[tos - 1]);\n    }\n    Condense();\n    if (DEBUG) {\n      printf(\"rationalize: after factoring:\\n\");\n      printline(stack[tos - 1]);\n    }\n    push(commonDenominator);\n    divide();\n    if (DEBUG) {\n      printf(\"rationalize: after dividing by common denom. (and we're done):\\n\");\n      return printline(stack[tos - 1]);\n    }\n  };\n\n  multiply_denominators = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        multiply_denominators_term(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return multiply_denominators_term(p);\n    }\n  };\n\n  multiply_denominators_term = function(p) {\n    var results;\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        multiply_denominators_factor(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return multiply_denominators_factor(p);\n    }\n  };\n\n  multiply_denominators_factor = function(p) {\n    if (car(p) !== symbol(POWER)) {\n      return;\n    }\n    push(p);\n    p = caddr(p);\n    if (isnegativenumber(p)) {\n      inverse();\n      __lcm();\n      return;\n    }\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      inverse();\n      __lcm();\n      return;\n    }\n    return pop();\n  };\n\n  __rationalize_tensor = function(theTensor) {\n    var i, l1, n, ref2;\n    i = 0;\n    push(theTensor);\n    Eval();\n    theTensor = pop();\n    if (!istensor(theTensor)) {\n      push(theTensor);\n      return;\n    }\n    n = theTensor.tensor.nelem;\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(theTensor.tensor.elem[i]);\n      rationalize();\n      theTensor.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(theTensor);\n    return push(theTensor);\n  };\n\n  __lcm = function() {\n    save();\n    p1 = pop();\n    p2 = pop();\n    push(p1);\n    push(p2);\n    multiply();\n    push(p1);\n    push(p2);\n    gcd();\n    divide();\n    return restore();\n  };\n\n\n  /*\n   Returns the real part of complex z\n  \n    z    real(z)\n    -    -------\n  \n    a + i b    a\n  \n    exp(i a)  cos(a)\n   */\n\n  Eval_real = function() {\n    push(cadr(p1));\n    Eval();\n    return real();\n  };\n\n  real = function() {\n    save();\n    rect();\n    p1 = pop();\n    push(p1);\n    push(p1);\n    conjugate();\n    add();\n    push_integer(2);\n    divide();\n    return restore();\n  };\n\n\n  /*\n  Convert complex z to rectangular form\n  \n    Input:    push  z\n  \n    Output:    Result on stack\n   */\n\n  DEBUG_RECT = false;\n\n  Eval_rect = function() {\n    push(cadr(p1));\n    Eval();\n    return rect();\n  };\n\n  rect = function() {\n    var input;\n    save();\n    p1 = pop();\n    input = p1;\n    if (DEBUG_RECT) {\n      console.log(\"RECT of \" + input);\n    }\n    if (DEBUG_RECT) {\n      console.log(\"any clock forms in : \" + input + \" ? \" + findPossibleClockForm(input));\n    }\n    if (issymbol(p1)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push(p1);\n      } else {\n        push_symbol(YYRECT);\n        push(p1);\n        list(2);\n      }\n    } else if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))) && !findPossibleExponentialForm(p1) && !findPossibleClockForm(p1) && !(Find(p1, symbol(SIN)) && Find(p1, symbol(COS)) && Find(p1, imaginaryunit))) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n      push(p1);\n    } else if (car(p1) === symbol(MULTIPLY) && isimaginaryunit(cadr(p1)) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      push(p1);\n    } else if (car(p1) === symbol(ADD)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is a sum \");\n      }\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        rect();\n        add();\n        p1 = cdr(p1);\n      }\n    } else {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is NOT a sum \");\n      }\n      push(p1);\n      abs();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" abs: \" + stack[tos - 1].toString());\n      }\n      push(p1);\n      arg();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" arg of \" + p1 + \" : \" + stack[tos - 1].toString());\n      }\n      p1 = pop();\n      push(p1);\n      cosine();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cosine: \" + stack[tos - 1].toString());\n      }\n      push(imaginaryunit);\n      push(p1);\n      sine();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" sine: \" + stack[tos - 1].toString());\n      }\n      multiply();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" i * sine: \" + stack[tos - 1].toString());\n      }\n      add();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cos + i * sine: \" + stack[tos - 1].toString());\n      }\n      multiply();\n    }\n    restore();\n    if (DEBUG_RECT) {\n      return console.log(\"rect of \" + input + \" : \" + stack[tos - 1]);\n    }\n  };\n\n  show_power_debug = false;\n\n  performing_roots = false;\n\n  Eval_roots = function() {\n    p2 = cadr(p1);\n    if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n      push(cadr(p2));\n      Eval();\n      push(caddr(p2));\n      Eval();\n      subtract();\n    } else {\n      push(p2);\n      Eval();\n      p2 = pop();\n      if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n        push(cadr(p2));\n        Eval();\n        push(caddr(p2));\n        Eval();\n        subtract();\n      } else {\n        push(p2);\n      }\n    }\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    p2 = pop();\n    p1 = pop();\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"roots: 1st argument is not a polynomial\");\n    }\n    push(p1);\n    push(p2);\n    return roots();\n  };\n\n  hasImaginaryCoeff = function(k) {\n    var h, i, imaginaryCoefficients, l1, ref2;\n    imaginaryCoefficients = false;\n    h = tos;\n    for (i = l1 = ref2 = k; l1 > 0; i = l1 += -1) {\n      if (iscomplexnumber(stack[tos - i])) {\n        imaginaryCoefficients = true;\n        break;\n      }\n    }\n    return imaginaryCoefficients;\n  };\n\n  isSimpleRoot = function(k) {\n    var h, i, isSimpleRootPolynomial, l1, ref2;\n    if (k > 2) {\n      isSimpleRootPolynomial = true;\n      h = tos;\n      if (isZeroAtomOrTensor(stack[tos - k])) {\n        isSimpleRootPolynomial = false;\n      }\n      for (i = l1 = ref2 = k - 1; l1 > 1; i = l1 += -1) {\n        if (!isZeroAtomOrTensor(stack[tos - i])) {\n          isSimpleRootPolynomial = false;\n          break;\n        }\n      }\n    } else {\n      isSimpleRootPolynomial = false;\n    }\n    return isSimpleRootPolynomial;\n  };\n\n  normalisedCoeff = function() {\n    var divideBy, i, k, l1, m1, miniStack, ref2, ref3;\n    k = coeff();\n    divideBy = stack[tos - 1];\n    miniStack = [];\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      miniStack.push(pop());\n    }\n    for (i = m1 = ref3 = k - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; i = ref3 <= 0 ? ++m1 : --m1) {\n      push(miniStack[i]);\n      push(divideBy);\n      divide();\n    }\n    return k;\n  };\n\n  roots = function() {\n    var h, i, k, l1, lastCoeff, leadingCoeff, n, ref2;\n    h = 0;\n    i = 0;\n    n = 0;\n    save();\n    if (recursionLevelNestedRadicalsRemoval > 1) {\n      pop();\n      pop();\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n    performing_roots = true;\n    h = tos - 2;\n    if (DEBUG) {\n      console.log(\"checking if \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n    }\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    push(p1);\n    push(p2);\n    k = normalisedCoeff();\n    if (isSimpleRoot(k)) {\n      if (DEBUG) {\n        console.log(\"yes, \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n      }\n      lastCoeff = stack[tos - k];\n      leadingCoeff = stack[tos - 1];\n      moveTos(tos - k);\n      pop();\n      pop();\n      getSimpleRoots(k, leadingCoeff, lastCoeff);\n    } else {\n      moveTos(tos - k);\n      roots2();\n    }\n    n = tos - h;\n    if (n === 0) {\n      stop(\"roots: the polynomial is not factorable, try nroots\");\n    }\n    if (n === 1) {\n      performing_roots = false;\n      restore();\n      return;\n    }\n    sort_stack(n);\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    push(p1);\n    restore();\n    return performing_roots = false;\n  };\n\n  getSimpleRoots = function(n, leadingCoeff, lastCoeff) {\n    var aSol, commonPart, l1, m1, ref2, ref3, rootsOfOne;\n    if (DEBUG) {\n      console.log(\"getSimpleRoots\");\n    }\n    save();\n    n = n - 1;\n    push(lastCoeff);\n    push_rational(1, n);\n    power();\n    push(leadingCoeff);\n    push_rational(1, n);\n    power();\n    divide();\n    commonPart = pop();\n    if (n % 2 === 0) {\n      for (rootsOfOne = l1 = 1, ref2 = n; l1 <= ref2; rootsOfOne = l1 += 2) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        aSol = pop();\n        push(aSol);\n        push(aSol);\n        negate();\n      }\n    } else {\n      for (rootsOfOne = m1 = 1, ref3 = n; 1 <= ref3 ? m1 <= ref3 : m1 >= ref3; rootsOfOne = 1 <= ref3 ? ++m1 : --m1) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        if (rootsOfOne % 2 === 0) {\n          negate();\n        }\n      }\n    }\n    return restore();\n  };\n\n  roots2 = function() {\n    var k;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    push(p1);\n    push(p2);\n    k = normalisedCoeff();\n    if (!hasImaginaryCoeff(k)) {\n      moveTos(tos - k);\n      factorpoly();\n      p1 = pop();\n    } else {\n      moveTos(tos - k);\n      pop();\n      pop();\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        roots3();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      roots3();\n    }\n    return restore();\n  };\n\n  roots3 = function() {\n    var n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (car(p1) === symbol(POWER) && ispolyexpandedform(cadr(p1), p2) && isposint(caddr(p1))) {\n      push(cadr(p1));\n      push(p2);\n      n = normalisedCoeff();\n      mini_solve(n);\n    } else if (ispolyexpandedform(p1, p2)) {\n      push(p1);\n      push(p2);\n      n = normalisedCoeff();\n      mini_solve(n);\n    }\n    return restore();\n  };\n\n  mini_solve = function(n) {\n    var C_CHECKED_AS_NOT_ZERO, Q_CHECKED_AS_NOT_ZERO, R_18_a_b_c_d, R_27_a2_d, R_2_b3, R_3_a, R_3_a_C, R_3_a_c, R_4_DELTA03, R_6_a, R_6_a_C, R_C, R_C_over_3a, R_C_simplified_toCheckIfZero, R_DELTA0, R_DELTA0_simplified_toCheckIfZero, R_DELTA0_toBeCheckedIfZero, R_DELTA1, R_Q, R_Q_simplified_toCheckIfZero, R_S, R_S_simplified_toCheckIfZero, R_a2, R_a2_d, R_a2_d2, R_a3, R_a_b_c, R_a_b_c_d, R_a_c, R_b2, R_b2_c2, R_b3, R_b3_d, R_c2, R_c3, R_d2, R_determinant, R_determinant_simplified_toCheckIfZero, R_e2, R_e3, R_m, R_m27_a2_d2, R_m4_a_c3, R_m4_b3_d, R_m9_a_b_c, R_m_b_over_3a, R_minus_4S2_minus_2p, R_minus_b_over_4a, R_p, R_principalCubicRoot, R_q, R_q_over_S, R_r, S_CHECKED_AS_NOT_ZERO, ThreePPlus2M, TwoQOversqrtPPlus2M, biquadraticSolutions, choiceOfRadicalInQSoSIsNotZero, coeff2, coeff3, coeff4, depressedSolutions, eachSolution, flipSignOFQSoCIsNotZero, flipSignOFRadicalSoQIsNotZero, i_sqrt3, l1, len, len1, len2, m1, n1, one_minus_i_sqrt3, one_plus_i_sqrt3, ref2, ref3, ref4, resolventCubicSolutions, root_solution, sqrtPPlus2M, toBeCheckedIFZero;\n    save();\n    if (n === 2) {\n      p3 = pop();\n      p4 = pop();\n      push(p4);\n      push(p3);\n      divide();\n      negate();\n      restore();\n      return;\n    }\n    if (n === 3) {\n      p3 = pop();\n      p4 = pop();\n      p5 = pop();\n      push(p4);\n      push_integer(2);\n      power();\n      push_integer(4);\n      push(p3);\n      multiply();\n      push(p5);\n      multiply();\n      subtract();\n      push_rational(1, 2);\n      power();\n      p6 = pop();\n      push(p6);\n      push(p4);\n      subtract();\n      push(p3);\n      push_integer(2);\n      multiply();\n      divide();\n      push(p6);\n      push(p4);\n      add();\n      negate();\n      push(p3);\n      divide();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n    if (n === 4 || n === 5) {\n      p3 = pop();\n      p4 = pop();\n      p5 = pop();\n      p6 = pop();\n      push(p5);\n      push(p5);\n      multiply();\n      R_c2 = pop();\n      push(R_c2);\n      push(p5);\n      multiply();\n      R_c3 = pop();\n      push(p4);\n      push(p4);\n      multiply();\n      R_b2 = pop();\n      push(R_b2);\n      push(p4);\n      multiply();\n      R_b3 = pop();\n      push(R_b3);\n      push(p6);\n      multiply();\n      R_b3_d = pop();\n      push(R_b3_d);\n      push_integer(-4);\n      multiply();\n      R_m4_b3_d = pop();\n      push(R_b3);\n      push_integer(2);\n      multiply();\n      R_2_b3 = pop();\n      push(p3);\n      push(p3);\n      multiply();\n      R_a2 = pop();\n      push(R_a2);\n      push(p3);\n      multiply();\n      R_a3 = pop();\n      push_integer(3);\n      push(p3);\n      multiply();\n      R_3_a = pop();\n      push(R_a2);\n      push(p6);\n      multiply();\n      R_a2_d = pop();\n      push(R_a2_d);\n      push(p6);\n      multiply();\n      R_a2_d2 = pop();\n      push(R_a2_d);\n      push_integer(27);\n      multiply();\n      R_27_a2_d = pop();\n      push(R_a2_d2);\n      push_integer(-27);\n      multiply();\n      R_m27_a2_d2 = pop();\n      push(R_3_a);\n      push_integer(2);\n      multiply();\n      R_6_a = pop();\n      push(p3);\n      push(p5);\n      multiply();\n      R_a_c = pop();\n      push(R_a_c);\n      push(p4);\n      multiply();\n      R_a_b_c = pop();\n      push(R_a_b_c);\n      push(p6);\n      multiply();\n      R_a_b_c_d = pop();\n      push(R_a_c);\n      push_integer(3);\n      multiply();\n      R_3_a_c = pop();\n      push_integer(-4);\n      push(p3);\n      push(R_c3);\n      multiply();\n      multiply();\n      R_m4_a_c3 = pop();\n      push(R_a_b_c);\n      push_integer(9);\n      multiply();\n      negate();\n      R_m9_a_b_c = pop();\n      push(R_a_b_c_d);\n      push_integer(18);\n      multiply();\n      R_18_a_b_c_d = pop();\n      push(R_b2);\n      push(R_3_a_c);\n      subtract();\n      R_DELTA0 = pop();\n      push(R_b2);\n      push(R_c2);\n      multiply();\n      R_b2_c2 = pop();\n      push(p4);\n      negate();\n      push(R_3_a);\n      divide();\n      R_m_b_over_3a = pop();\n      if (n === 4) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< \");\n        }\n        if (DEBUG) {\n          console.log(\"cubic: D0: \" + R_DELTA0.toString());\n        }\n        push(R_DELTA0);\n        push_integer(3);\n        power();\n        push_integer(4);\n        multiply();\n        R_4_DELTA03 = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_toBeCheckedIfZero = pop();\n        if (DEBUG) {\n          console.log(\"cubic: D0 as float: \" + R_DELTA0_toBeCheckedIfZero.toString());\n        }\n        push(R_18_a_b_c_d);\n        push(R_m4_b3_d);\n        push(R_b2_c2);\n        push(R_m4_a_c3);\n        push(R_m27_a2_d2);\n        add();\n        add();\n        add();\n        add();\n        simplify();\n        absValFloat();\n        R_determinant = pop();\n        if (DEBUG) {\n          console.log(\"cubic: DETERMINANT: \" + R_determinant.toString());\n        }\n        push(R_2_b3);\n        push(R_m9_a_b_c);\n        push(R_27_a2_d);\n        add();\n        add();\n        R_DELTA1 = pop();\n        if (DEBUG) {\n          console.log(\"cubic: D1: \" + R_DELTA1.toString());\n        }\n        push(R_DELTA1);\n        push_integer(2);\n        power();\n        push(R_4_DELTA03);\n        subtract();\n        push_rational(1, 2);\n        power();\n        simplify();\n        R_Q = pop();\n        if (isZeroAtomOrTensor(R_determinant)) {\n          if (isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is zero\");\n            }\n            push(R_m_b_over_3a);\n            restore();\n            return;\n          } else {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is not zero\");\n            }\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            push(p4);\n            push(p5);\n            multiply();\n            subtract();\n            push(R_DELTA0);\n            push_integer(2);\n            multiply();\n            divide();\n            root_solution = pop();\n            push(root_solution);\n            push(root_solution);\n            push(R_a_b_c);\n            push_integer(4);\n            multiply();\n            push(p3);\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            multiply();\n            negate();\n            push(R_b3);\n            negate();\n            add();\n            add();\n            push(p3);\n            push(R_DELTA0);\n            multiply();\n            divide();\n            restore();\n            return;\n          }\n        }\n        C_CHECKED_AS_NOT_ZERO = false;\n        flipSignOFQSoCIsNotZero = false;\n        while (!C_CHECKED_AS_NOT_ZERO) {\n          push(R_Q);\n          if (flipSignOFQSoCIsNotZero) {\n            negate();\n          }\n          push(R_DELTA1);\n          add();\n          push_rational(1, 2);\n          multiply();\n          push_rational(1, 3);\n          power();\n          simplify();\n          R_C = pop();\n          if (DEBUG) {\n            console.log(\"cubic: C: \" + R_C.toString());\n          }\n          push(R_C);\n          simplify();\n          absValFloat();\n          R_C_simplified_toCheckIfZero = pop();\n          if (DEBUG) {\n            console.log(\"cubic: C as absval and float: \" + R_C_simplified_toCheckIfZero.toString());\n          }\n          if (isZeroAtomOrTensor(R_C_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: C IS ZERO flipping the sign\");\n            }\n            flipSignOFQSoCIsNotZero = true;\n          } else {\n            C_CHECKED_AS_NOT_ZERO = true;\n          }\n        }\n        push(R_C);\n        push(R_3_a);\n        multiply();\n        R_3_a_C = pop();\n        push(R_3_a_C);\n        push_integer(2);\n        multiply();\n        R_6_a_C = pop();\n        push(imaginaryunit);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        multiply();\n        i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        add();\n        one_plus_i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        subtract();\n        one_minus_i_sqrt3 = pop();\n        push(R_C);\n        push(R_3_a);\n        divide();\n        R_C_over_3a = pop();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        negate();\n        push(R_DELTA0);\n        push(R_3_a_C);\n        divide();\n        negate();\n        add();\n        add();\n        simplify();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        push(one_plus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide();\n        push(one_minus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide();\n        add();\n        add();\n        simplify();\n        push(R_m_b_over_3a);\n        push(R_C_over_3a);\n        push(one_minus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide();\n        push(one_plus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide();\n        add();\n        add();\n        simplify();\n        restore();\n        return;\n      }\n      if (n === 5) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< \");\n        }\n        p7 = pop();\n        if (isZeroAtomOrTensor(p4) && isZeroAtomOrTensor(p6) && !isZeroAtomOrTensor(p5) && !isZeroAtomOrTensor(p7)) {\n          if (DEBUG) {\n            console.log(\"biquadratic case\");\n          }\n          push(p3);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(p5);\n          push(symbol(SECRETX));\n          multiply();\n          push(p7);\n          add();\n          add();\n          push(symbol(SECRETX));\n          roots();\n          biquadraticSolutions = pop();\n          ref2 = biquadraticSolutions.tensor.elem;\n          for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n            eachSolution = ref2[l1];\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            simplify();\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            negate();\n            simplify();\n          }\n          restore();\n          return;\n        }\n        push(p6);\n        push(p6);\n        multiply();\n        R_d2 = pop();\n        push(p7);\n        push(p7);\n        multiply();\n        R_e2 = pop();\n        push(R_e2);\n        push(p7);\n        multiply();\n        R_e3 = pop();\n        push_integer(256);\n        push(R_a3);\n        push(R_e3);\n        multiply();\n        multiply();\n        push_integer(-192);\n        push(R_a2_d);\n        push(R_e2);\n        push(p4);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-128);\n        push(R_a2);\n        push(R_c2);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(144);\n        push(R_a2_d2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_m27_a2_d2);\n        push(R_d2);\n        multiply();\n        push_integer(144);\n        push(R_a_b_c);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-6);\n        push(p3);\n        push(R_b2);\n        push(R_d2);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-80);\n        push(R_a_b_c_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(18);\n        push(R_a_b_c_d);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(16);\n        push(R_a_c);\n        push(R_c3);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-4);\n        push(R_a_c);\n        push(R_c2);\n        push(R_d2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(-27);\n        push(R_b3);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(18);\n        push(R_b3_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_m4_b3_d);\n        push(R_d2);\n        multiply();\n        push_integer(-4);\n        push(R_b2_c2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        push(R_b2_c2);\n        push(R_d2);\n        multiply();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        R_determinant = pop();\n        if (DEBUG) {\n          console.log(\"R_determinant: \" + R_determinant.toString());\n        }\n        push(R_c2);\n        push_integer(-3);\n        push(p4);\n        push(p6);\n        multiply();\n        multiply();\n        push_integer(12);\n        push(p3);\n        push(p7);\n        multiply();\n        multiply();\n        add();\n        add();\n        R_DELTA0 = pop();\n        if (DEBUG) {\n          console.log(\"R_DELTA0: \" + R_DELTA0.toString());\n        }\n        push_integer(2);\n        push(R_c3);\n        multiply();\n        push_integer(-9);\n        push(p4);\n        push(p5);\n        push(p6);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(27);\n        push(R_b2);\n        push(p7);\n        multiply();\n        multiply();\n        push_integer(27);\n        push(p3);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(-72);\n        push(R_a_c);\n        push(p7);\n        multiply();\n        multiply();\n        add();\n        add();\n        add();\n        add();\n        R_DELTA1 = pop();\n        if (DEBUG) {\n          console.log(\"R_DELTA1: \" + R_DELTA1.toString());\n        }\n        push_integer(8);\n        push(R_a_c);\n        multiply();\n        push_integer(-3);\n        push(R_b2);\n        multiply();\n        add();\n        push_integer(8);\n        push(R_a2);\n        multiply();\n        divide();\n        R_p = pop();\n        if (DEBUG) {\n          console.log(\"p: \" + R_p.toString());\n        }\n        push(R_b3);\n        push_integer(-4);\n        push(R_a_b_c);\n        multiply();\n        push_integer(8);\n        push(R_a2_d);\n        multiply();\n        add();\n        add();\n        push_integer(8);\n        push(R_a3);\n        multiply();\n        divide();\n        R_q = pop();\n        if (DEBUG) {\n          console.log(\"q: \" + R_q.toString());\n        }\n        if (DEBUG) {\n          console.log(\"tos 1 \" + tos);\n        }\n        if (!isZeroAtomOrTensor(p4)) {\n          if (DEBUG) {\n            console.log(\"tos 2 \" + tos);\n          }\n          push_integer(8);\n          push(p5);\n          push(p3);\n          multiply();\n          multiply();\n          push_integer(-3);\n          push(p4);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          divide();\n          R_p = pop();\n          if (DEBUG) {\n            console.log(\"p for depressed quartic: \" + R_p.toString());\n          }\n          push(p4);\n          push_integer(3);\n          power();\n          push_integer(-4);\n          push(p3);\n          push(p4);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          push_integer(8);\n          push(p6);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          multiply();\n          add();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(3);\n          power();\n          multiply();\n          divide();\n          R_q = pop();\n          if (DEBUG) {\n            console.log(\"q for depressed quartic: \" + R_q.toString());\n          }\n          push(p4);\n          push_integer(4);\n          power();\n          push_integer(-3);\n          multiply();\n          push_integer(256);\n          push(R_a3);\n          push(p7);\n          multiply();\n          multiply();\n          push_integer(-64);\n          push(R_a2_d);\n          push(p4);\n          multiply();\n          multiply();\n          push_integer(16);\n          push(R_b2);\n          push(p3);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          add();\n          add();\n          add();\n          push_integer(256);\n          push(p3);\n          push_integer(4);\n          power();\n          multiply();\n          divide();\n          R_r = pop();\n          if (DEBUG) {\n            console.log(\"r for depressed quartic: \" + R_r.toString());\n          }\n          if (DEBUG) {\n            console.log(\"tos 4 \" + tos);\n          }\n          push(symbol(SECRETX));\n          push_integer(4);\n          power();\n          if (DEBUG) {\n            console.log(\"4 * x^4: \" + stack[tos - 1].toString());\n          }\n          push(R_p);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          if (DEBUG) {\n            console.log(\"R_p * x^2: \" + stack[tos - 1].toString());\n          }\n          push(R_q);\n          push(symbol(SECRETX));\n          multiply();\n          if (DEBUG) {\n            console.log(\"R_q * x: \" + stack[tos - 1].toString());\n          }\n          push(R_r);\n          if (DEBUG) {\n            console.log(\"R_r: \" + stack[tos - 1].toString());\n          }\n          add();\n          add();\n          add();\n          simplify();\n          if (DEBUG) {\n            console.log(\"solving depressed quartic: \" + stack[tos - 1].toString());\n          }\n          push(symbol(SECRETX));\n          roots();\n          depressedSolutions = pop();\n          if (DEBUG) {\n            console.log(\"depressedSolutions: \" + depressedSolutions);\n          }\n          ref3 = depressedSolutions.tensor.elem;\n          for (m1 = 0, len1 = ref3.length; m1 < len1; m1++) {\n            eachSolution = ref3[m1];\n            push(eachSolution);\n            push(p4);\n            push_integer(4);\n            push(p3);\n            multiply();\n            divide();\n            subtract();\n            simplify();\n            if (DEBUG) {\n              console.log(\"solution from depressed: \" + stack[tos - 1].toString());\n            }\n          }\n          restore();\n          return;\n        } else {\n          R_p = p5;\n          R_q = p6;\n          R_r = p7;\n\n          /*\n           * Descartes' solution\n           * https://en.wikipedia.org/wiki/Quartic_function#Descartes.27_solution\n           * finding the \"u\" in the depressed equation\n          \n          push_integer(2)\n          push(R_p)\n          multiply()\n          coeff2 = pop()\n          \n          push_integer(-4)\n          push(R_p)\n          push_integer(2)\n          power()\n          multiply()\n          push(R_r)\n          multiply()\n          coeff3 = pop()\n          \n          push(R_q)\n          push_integer(2)\n          power()\n          negate()\n          coeff4 = pop()\n          \n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(3)\n          power()\n          \n          push(coeff2)\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          multiply()\n          \n          push(coeff3)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(coeff4)\n          \n          add()\n          add()\n          add()\n          \n          console.log(\"Descarte's resolventCubic: \" +  stack[tos-1].toString())\n          push(symbol(SECRETX))\n          \n          roots()\n          \n          resolventCubicSolutions = pop()\n          console.log(\"Descarte's resolventCubic solutions: \" +  resolventCubicSolutions)\n          console.log(\"tos: \" +  tos)\n          \n          R_u = null\n          #R_u = resolventCubicSolutions.tensor.elem[1]\n          for eachSolution in resolventCubicSolutions.tensor.elem\n            console.log(\"examining solution: \" +  eachSolution)\n            push(eachSolution)\n            push_integer(2)\n            multiply()\n            push(R_p)\n            add()\n          \n            absValFloat()\n            toBeCheckedIFZero = pop()\n            console.log(\"abs value is: \" +  eachSolution)\n            if !isZeroAtomOrTensor(toBeCheckedIFZero)\n              R_u = eachSolution\n              break\n          \n          console.log(\"chosen solution: \" +  R_u)\n          \n          push(R_u)\n          negate()\n          R_s = pop()\n          \n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          add()\n          add()\n          push_integer(2)\n          divide()\n          R_t = pop()\n          \n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          subtract()\n          add()\n          push_integer(2)\n          divide()\n          R_v = pop()\n          \n           * factoring the quartic into two quadratics:\n          \n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          \n          push(R_s)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(R_t)\n          \n          add()\n          add()\n          \n          console.log(\"factored quartic 1: \" + stack[tos-1].toString())\n          \n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          \n          push(R_u)\n          push(symbol(SECRETX))\n          multiply()\n          \n          push(R_v)\n          \n          add()\n          add()\n          \n          console.log(\"factored quartic 2: \" + stack[tos-1].toString())\n          pop()\n          \n          restore()\n          return\n           */\n          push_rational(5, 2);\n          push(R_p);\n          multiply();\n          coeff2 = pop();\n          push_integer(2);\n          push(R_p);\n          push_integer(2);\n          power();\n          multiply();\n          push(R_r);\n          subtract();\n          coeff3 = pop();\n          push(R_p);\n          push_integer(3);\n          power();\n          push_integer(2);\n          divide();\n          push_rational(-1, 2);\n          push(R_p);\n          push(R_r);\n          multiply();\n          multiply();\n          push_rational(-1, 8);\n          push(R_q);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n          coeff4 = pop();\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          push(coeff2);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(coeff3);\n          push(symbol(SECRETX));\n          multiply();\n          push(coeff4);\n          add();\n          add();\n          add();\n          if (DEBUG) {\n            console.log(\"resolventCubic: \" + stack[tos - 1].toString());\n          }\n          push(symbol(SECRETX));\n          roots();\n          resolventCubicSolutions = pop();\n          if (DEBUG) {\n            console.log(\"resolventCubicSolutions: \" + resolventCubicSolutions);\n          }\n          R_m = null;\n          ref4 = resolventCubicSolutions.tensor.elem;\n          for (n1 = 0, len2 = ref4.length; n1 < len2; n1++) {\n            eachSolution = ref4[n1];\n            if (DEBUG) {\n              console.log(\"examining solution: \" + eachSolution);\n            }\n            push(eachSolution);\n            push_integer(2);\n            multiply();\n            push(R_p);\n            add();\n            absValFloat();\n            toBeCheckedIFZero = pop();\n            if (DEBUG) {\n              console.log(\"abs value is: \" + eachSolution);\n            }\n            if (!isZeroAtomOrTensor(toBeCheckedIFZero)) {\n              R_m = eachSolution;\n              break;\n            }\n          }\n          if (DEBUG) {\n            console.log(\"chosen solution: \" + R_m);\n          }\n          push(R_m);\n          push_integer(2);\n          multiply();\n          push(R_p);\n          add();\n          push_rational(1, 2);\n          power();\n          simplify();\n          sqrtPPlus2M = pop();\n          push(R_q);\n          push_integer(2);\n          multiply();\n          push(sqrtPPlus2M);\n          divide();\n          simplify();\n          TwoQOversqrtPPlus2M = pop();\n          push(R_p);\n          push_integer(3);\n          multiply();\n          push(R_m);\n          push_integer(2);\n          multiply();\n          add();\n          ThreePPlus2M = pop();\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          restore();\n          return;\n        }\n        push(R_determinant);\n        simplify();\n        absValFloat();\n        R_determinant_simplified_toCheckIfZero = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_simplified_toCheckIfZero = pop();\n        S_CHECKED_AS_NOT_ZERO = false;\n        choiceOfRadicalInQSoSIsNotZero = 0;\n        while (!S_CHECKED_AS_NOT_ZERO) {\n          Q_CHECKED_AS_NOT_ZERO = false;\n          flipSignOFRadicalSoQIsNotZero = false;\n          while (!Q_CHECKED_AS_NOT_ZERO) {\n            push(R_DELTA1);\n            push(R_DELTA1);\n            push_integer(2);\n            power();\n            push_integer(-4);\n            push(R_DELTA0);\n            push_integer(3);\n            power();\n            multiply();\n            add();\n            push_rational(1, 2);\n            power();\n            if (flipSignOFRadicalSoQIsNotZero) {\n              negate();\n            }\n            add();\n            push_integer(2);\n            divide();\n            if (DEBUG) {\n              console.log(\"content of cubic root: \" + stack[tos - 1].toString());\n            }\n            push_rational(1, 3);\n            power();\n            simplify();\n            R_principalCubicRoot = pop();\n            if (DEBUG) {\n              console.log(\"principal cubic root: \" + R_principalCubicRoot.toString());\n            }\n            if (DEBUG) {\n              console.log(\"tos : \" + tos);\n            }\n            if (choiceOfRadicalInQSoSIsNotZero === 0) {\n              if (DEBUG) {\n                console.log(\"chosing principal cubic root\");\n              }\n              push(R_principalCubicRoot);\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond principal\");\n              }\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(-1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond beyond principal\");\n              }\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            }\n            simplify();\n            R_Q = pop();\n            if (DEBUG) {\n              console.log(\"Q \" + R_Q.toString());\n            }\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n            push(R_Q);\n            simplify();\n            absValFloat();\n            R_Q_simplified_toCheckIfZero = pop();\n            if (DEBUG) {\n              console.log(\"Q simplified and abs\" + R_Q_simplified_toCheckIfZero.toString());\n            }\n            if (isZeroAtomOrTensor(R_Q_simplified_toCheckIfZero) && (!isZeroAtomOrTensor(R_determinant_simplified_toCheckIfZero) && isZeroAtomOrTensor(R_DELTA0_simplified_toCheckIfZero))) {\n              if (DEBUG) {\n                console.log(\" *********************************** Q IS ZERO and it matters, flipping the sign\");\n              }\n              flipSignOFRadicalSoQIsNotZero = true;\n            } else {\n              Q_CHECKED_AS_NOT_ZERO = true;\n            }\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n          }\n          push_rational(-2, 3);\n          push(R_p);\n          multiply();\n          push(R_Q);\n          push(R_DELTA0);\n          push(R_Q);\n          divide();\n          add();\n          push(R_3_a);\n          divide();\n          add();\n          push_rational(1, 2);\n          power();\n          push_integer(2);\n          divide();\n          show_power_debug = true;\n          simplify();\n          R_S = pop();\n          if (DEBUG) {\n            console.log(\"S \" + R_S.toString());\n          }\n          push(R_S);\n          simplify();\n          absValFloat();\n          R_S_simplified_toCheckIfZero = pop();\n          if (DEBUG) {\n            console.log(\"S \" + R_S_simplified_toCheckIfZero.toString());\n          }\n          if (isZeroAtomOrTensor(R_S_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" *********************************** S IS ZERO chosing another cubic root\");\n            }\n            choiceOfRadicalInQSoSIsNotZero++;\n          } else {\n            S_CHECKED_AS_NOT_ZERO = true;\n          }\n          if (DEBUG) {\n            console.log(\"tos: \" + tos);\n          }\n        }\n        if (DEBUG) {\n          console.log(\"tos: \" + tos);\n        }\n        push(p4);\n        negate();\n        push(p3);\n        push_integer(4);\n        multiply();\n        divide();\n        R_minus_b_over_4a = pop();\n        push_integer(-4);\n        push(R_S);\n        push_integer(2);\n        power();\n        multiply();\n        push_integer(2);\n        push(R_p);\n        multiply();\n        subtract();\n        R_minus_4S2_minus_2p = pop();\n        push(R_q);\n        push(R_S);\n        divide();\n        R_q_over_S = pop();\n        if (DEBUG) {\n          console.log(\"tos before putting together the 4 solutions: \" + tos);\n        }\n        push(R_minus_b_over_4a);\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        push(R_minus_b_over_4a);\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        restore();\n        return;\n      }\n    }\n    moveTos(tos - n);\n    return restore();\n  };\n\n  Eval_round = function() {\n    push(cadr(p1));\n    Eval();\n    return yround();\n  };\n\n  yround = function() {\n    save();\n    yyround();\n    return restore();\n  };\n\n  yyround = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(ROUND);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.round(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    push(p1);\n    yyfloat();\n    p1 = pop();\n    return push_integer(Math.round(p1.d));\n  };\n\n  T_INTEGER = 1001;\n\n  T_DOUBLE = 1002;\n\n  T_SYMBOL = 1003;\n\n  T_FUNCTION = 1004;\n\n  T_NEWLINE = 1006;\n\n  T_STRING = 1007;\n\n  T_GTEQ = 1008;\n\n  T_LTEQ = 1009;\n\n  T_EQ = 1010;\n\n  T_NEQ = 1011;\n\n  T_QUOTASSIGN = 1012;\n\n  token = \"\";\n\n  newline_flag = 0;\n\n  meta_mode = 0;\n\n  input_str = 0;\n\n  scan_str = 0;\n\n  token_str = 0;\n\n  token_buf = 0;\n\n  lastFoundSymbol = null;\n\n  symbolsRightOfAssignment = null;\n\n  symbolsLeftOfAssignment = null;\n\n  isSymbolLeftOfAssignment = null;\n\n  scanningParameters = null;\n\n  functionInvokationsScanningStack = null;\n\n  skipRootVariableToBeSolved = false;\n\n  assignmentFound = null;\n\n  scanned = \"\";\n\n  scan = function(s) {\n    if (DEBUG) {\n      console.log(\"#### scanning \" + s);\n    }\n    lastFoundSymbol = null;\n    symbolsRightOfAssignment = [];\n    symbolsLeftOfAssignment = [];\n    isSymbolLeftOfAssignment = true;\n    scanningParameters = [];\n    functionInvokationsScanningStack = [\"\"];\n    assignmentFound = false;\n    scanned = s;\n    meta_mode = 0;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n    scan_stmt();\n    expanding--;\n    if (!assignmentFound) {\n      symbolsInExpressionsWithoutAssignments = symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment);\n    }\n    return token_str - input_str;\n  };\n\n  scan_meta = function(s) {\n    scanned = s;\n    meta_mode = 1;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n    scan_stmt();\n    expanding--;\n    return token_str - input_str;\n  };\n\n  scan_stmt = function() {\n    var assignmentIsOfQuotedType, existingDependencies, i, indexOfSymbolLeftOfAssignment, l1, len, len1, m1, symbolLeftOfAssignment;\n    scan_relation();\n    assignmentIsOfQuotedType = false;\n    if (token === T_QUOTASSIGN) {\n      assignmentIsOfQuotedType = true;\n    }\n    if (token === T_QUOTASSIGN || token === '=') {\n      symbolLeftOfAssignment = lastFoundSymbol;\n      if (DEBUG) {\n        console.log(\"assignment!\");\n      }\n      assignmentFound = true;\n      isSymbolLeftOfAssignment = false;\n      get_next_token();\n      push_symbol(SETQ);\n      swap();\n      if (assignmentIsOfQuotedType) {\n        push_symbol(QUOTE);\n      }\n      scan_relation();\n      if (assignmentIsOfQuotedType) {\n        list(2);\n      }\n      list(3);\n      isSymbolLeftOfAssignment = true;\n      if (codeGen) {\n        indexOfSymbolLeftOfAssignment = symbolsRightOfAssignment.indexOf(symbolLeftOfAssignment);\n        if (indexOfSymbolLeftOfAssignment !== -1) {\n          symbolsRightOfAssignment.splice(indexOfSymbolLeftOfAssignment, 1);\n          symbolsHavingReassignments.push(symbolLeftOfAssignment);\n        }\n        if (DEBUG) {\n          console.log(\"locally, \" + symbolLeftOfAssignment + \" depends on: \");\n          for (l1 = 0, len = symbolsRightOfAssignment.length; l1 < len; l1++) {\n            i = symbolsRightOfAssignment[l1];\n            console.log(\"  \" + i);\n          }\n        }\n        if (symbolsDependencies[symbolLeftOfAssignment] == null) {\n          symbolsDependencies[symbolLeftOfAssignment] = [];\n        }\n        existingDependencies = symbolsDependencies[symbolLeftOfAssignment];\n        for (m1 = 0, len1 = symbolsRightOfAssignment.length; m1 < len1; m1++) {\n          i = symbolsRightOfAssignment[m1];\n          if (existingDependencies.indexOf(i) === -1) {\n            existingDependencies.push(i);\n          }\n        }\n        return symbolsRightOfAssignment = [];\n      }\n    }\n  };\n\n  scan_relation = function() {\n    scan_expression();\n    switch (token) {\n      case T_EQ:\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case T_NEQ:\n        push_symbol(NOT);\n        swap();\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        list(3);\n        return list(2);\n      case T_LTEQ:\n        push_symbol(TESTLE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case T_GTEQ:\n        push_symbol(TESTGE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case '<':\n        push_symbol(TESTLT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case '>':\n        push_symbol(TESTGT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n    }\n  };\n\n  scan_expression = function() {\n    var h;\n    h = tos;\n    switch (token) {\n      case '+':\n        get_next_token();\n        scan_term();\n        break;\n      case '-':\n        get_next_token();\n        scan_term();\n        negate();\n        break;\n      default:\n        scan_term();\n    }\n    while (newline_flag === 0 && (token === '+' || token === '-')) {\n      if (token === '+') {\n        get_next_token();\n        scan_term();\n      } else {\n        get_next_token();\n        scan_term();\n        negate();\n      }\n    }\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(ADD);\n      swap();\n      return cons();\n    }\n  };\n\n  is_factor = function() {\n    if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n      return 1;\n    }\n    switch (token) {\n      case '*':\n      case '/':\n        return 1;\n      case '(':\n      case T_SYMBOL:\n      case T_FUNCTION:\n      case T_INTEGER:\n      case T_DOUBLE:\n      case T_STRING:\n        if (newline_flag) {\n          scan_str = token_str;\n          return 0;\n        } else {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  simplify_1_in_products = function(tos, h) {\n    if (tos > h && isrational(stack[tos - 1]) && equaln(stack[tos - 1], 1)) {\n      return pop();\n    }\n  };\n\n  multiply_consecutive_constants = function(tos, h) {\n    if (tos > h + 1 && isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply();\n    }\n  };\n\n  scan_term = function() {\n    var h;\n    h = tos;\n    scan_factor();\n    if (parse_time_simplifications) {\n      simplify_1_in_products(tos, h);\n    }\n    while (is_factor()) {\n      if (token === '*') {\n        get_next_token();\n        scan_factor();\n      } else if (token === '/') {\n        simplify_1_in_products(tos, h);\n        get_next_token();\n        scan_factor();\n        inverse();\n      } else if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n        get_next_token();\n        push_symbol(INNER);\n        swap();\n        scan_factor();\n        list(3);\n      } else {\n        scan_factor();\n      }\n      if (parse_time_simplifications) {\n        multiply_consecutive_constants(tos, h);\n        simplify_1_in_products(tos, h);\n      }\n    }\n    if (h === tos) {\n      return push_integer(1);\n    } else if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      return cons();\n    }\n  };\n\n  scan_power = function() {\n    if (token === '^') {\n      get_next_token();\n      push_symbol(POWER);\n      swap();\n      scan_factor();\n      return list(3);\n    }\n  };\n\n  scan_index = function(h) {\n    get_next_token();\n    push_symbol(INDEX);\n    swap();\n    scan_expression();\n    while (token === ',') {\n      get_next_token();\n      scan_expression();\n    }\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n    get_next_token();\n    return list(tos - h);\n  };\n\n  scan_factor = function() {\n    var firstFactorIsNumber, h;\n    h = tos;\n    firstFactorIsNumber = false;\n    if (token === '(') {\n      scan_subexpr();\n    } else if (token === T_SYMBOL) {\n      scan_symbol();\n    } else if (token === T_FUNCTION) {\n      scan_function_call_with_function_name();\n    } else if (token === '[') {\n      scan_tensor();\n    } else if (token === T_INTEGER) {\n      firstFactorIsNumber = true;\n      bignum_scan_integer(token_buf);\n      get_next_token();\n    } else if (token === T_DOUBLE) {\n      firstFactorIsNumber = true;\n      bignum_scan_float(token_buf);\n      get_next_token();\n    } else if (token === T_STRING) {\n      scan_string();\n    } else {\n      scan_error(\"syntax error\");\n    }\n    while (token === '[' || token === '(' && newline_flag === 0 && !firstFactorIsNumber) {\n      if (token === '[') {\n        scan_index(h);\n      } else if (token === '(') {\n        scan_function_call_without_function_name();\n      }\n    }\n    while (token === '!') {\n      get_next_token();\n      push_symbol(FACTORIAL);\n      swap();\n      list(2);\n    }\n    while ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === transpose_unicode) {\n      get_next_token();\n      push_symbol(TRANSPOSE);\n      swap();\n      list(2);\n    }\n    return scan_power();\n  };\n\n  addSymbolRightOfAssignment = function(theSymbol) {\n    var i, l1, prefixVar, ref2;\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols right of assignment\");\n      }\n      prefixVar = \"\";\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n      theSymbol = prefixVar + theSymbol;\n      return symbolsRightOfAssignment.push(theSymbol);\n    }\n  };\n\n  addSymbolLeftOfAssignment = function(theSymbol) {\n    var i, l1, prefixVar, ref2;\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols left of assignment\");\n      }\n      prefixVar = \"\";\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n      theSymbol = prefixVar + theSymbol;\n      return symbolsLeftOfAssignment.push(theSymbol);\n    }\n  };\n\n  scan_symbol = function() {\n    if (token !== T_SYMBOL) {\n      scan_error(\"symbol expected\");\n    }\n    if (meta_mode && token_buf.length === 1) {\n      switch (token_buf[0]) {\n        case 'a':\n          push(symbol(METAA));\n          break;\n        case 'b':\n          push(symbol(METAB));\n          break;\n        case 'x':\n          push(symbol(METAX));\n          break;\n        default:\n          push(usr_symbol(token_buf));\n      }\n    } else {\n      push(usr_symbol(token_buf));\n    }\n    if (scanningParameters.length === 0) {\n      if (DEBUG) {\n        console.log(\"out of scanning parameters, processing \" + token_buf);\n      }\n      lastFoundSymbol = token_buf;\n      if (isSymbolLeftOfAssignment) {\n        addSymbolLeftOfAssignment(token_buf);\n      }\n    } else {\n      if (DEBUG) {\n        console.log(\"still scanning parameters, skipping \" + token_buf);\n      }\n      if (isSymbolLeftOfAssignment) {\n        addSymbolRightOfAssignment(\"'\" + token_buf);\n      }\n    }\n    if (DEBUG) {\n      console.log(\"found symbol: \" + token_buf + \" left of assignment: \" + isSymbolLeftOfAssignment);\n    }\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n    return get_next_token();\n  };\n\n  scan_string = function() {\n    new_string(token_buf);\n    return get_next_token();\n  };\n\n  scan_function_call_with_function_name = function() {\n    var functionName, i, l1, n, p, ref2;\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_with_function_name start\");\n    }\n    n = 1;\n    p = new U();\n    p = usr_symbol(token_buf);\n    push(p);\n    functionName = token_buf;\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.push(token_buf);\n    }\n    lastFoundSymbol = token_buf;\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n    get_next_token();\n    get_next_token();\n    scanningParameters.push(true);\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n      while (token === ',') {\n        get_next_token();\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"sum\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"product\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"for\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        if (functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"defint\") !== -1 && (n === 2 || (n > 2 && ((n - 2) % 3 === 0)))) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        scan_stmt();\n        skipRootVariableToBeSolved = false;\n        n++;\n      }\n      if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n        symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n          return !(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + \"x\")).test(x);\n        });\n      }\n    }\n    scanningParameters.pop();\n    for (i = l1 = 0, ref2 = symbolsRightOfAssignment.length; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (symbolsRightOfAssignment[i] != null) {\n        if (functionName === \"roots\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"defint\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"sum\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"product\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"for\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n      }\n    }\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    get_next_token();\n    list(n);\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.pop();\n    }\n    if (functionName === symbol(PATTERN).printname) {\n      patternHasBeenFound = true;\n    }\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_with_function_name end\");\n    }\n  };\n\n  scan_function_call_without_function_name = function() {\n    var n;\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_without_function_name start\");\n    }\n    push_symbol(EVAL);\n    swap();\n    list(2);\n    n = 1;\n    get_next_token();\n    scanningParameters.push(true);\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n      while (token === ',') {\n        get_next_token();\n        scan_stmt();\n        n++;\n      }\n    }\n    scanningParameters.pop();\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    get_next_token();\n    list(n);\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_without_function_name end: \" + stack[tos - 1]);\n    }\n  };\n\n  scan_subexpr = function() {\n    var n;\n    n = 0;\n    if (token !== '(') {\n      scan_error(\"( expected\");\n    }\n    get_next_token();\n    scan_stmt();\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    return get_next_token();\n  };\n\n  scan_tensor = function() {\n    var n;\n    n = 0;\n    if (token !== '[') {\n      scan_error(\"[ expected\");\n    }\n    get_next_token();\n    scan_stmt();\n    n = 1;\n    while (token === ',') {\n      get_next_token();\n      scan_stmt();\n      n++;\n    }\n    build_tensor(n);\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n    return get_next_token();\n  };\n\n  scan_error = function(errmsg) {\n    errorMessage = \"\";\n    while (input_str !== scan_str) {\n      if ((scanned[input_str] === '\\n' || scanned[input_str] === '\\r') && input_str + 1 === scan_str) {\n        break;\n      }\n      errorMessage += scanned[input_str++];\n    }\n    errorMessage += \" ? \";\n    while (scanned[input_str] && (scanned[input_str] !== '\\n' && scanned[input_str] !== '\\r')) {\n      errorMessage += scanned[input_str++];\n    }\n    errorMessage += '\\n';\n    return stop(errmsg);\n  };\n\n  build_tensor = function(n) {\n    var i, l1, ref2;\n    i = 0;\n    save();\n    p2 = alloc_tensor(n);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = n;\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.elem[i] = stack[tos - n + i];\n    }\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  get_next_token = function() {\n    newline_flag = 0;\n    while (1) {\n      get_token();\n      if (token !== T_NEWLINE) {\n        break;\n      }\n      newline_flag = 1;\n    }\n    if (DEBUG) {\n      return console.log(\"get_next_token token: \" + token);\n    }\n  };\n\n  get_token = function() {\n    while (isspace(scanned[scan_str])) {\n      if (scanned[scan_str] === '\\n' || scanned[scan_str] === '\\r') {\n        token = T_NEWLINE;\n        scan_str++;\n        return;\n      }\n      scan_str++;\n    }\n    token_str = scan_str;\n    if (scan_str === scanned.length) {\n      token = \"\";\n      return;\n    }\n    if (isdigit(scanned[scan_str]) || scanned[scan_str] === '.') {\n      while (isdigit(scanned[scan_str])) {\n        scan_str++;\n      }\n      if (scanned[scan_str] === '.') {\n        scan_str++;\n        while (isdigit(scanned[scan_str])) {\n          scan_str++;\n        }\n        if (scanned[scan_str] === 'e' && (scanned[scan_str + 1] === '+' || scanned[scan_str + 1] === '-' || isdigit(scanned[scan_str + 1]))) {\n          scan_str += 2;\n          while (isdigit(scanned[scan_str])) {\n            scan_str++;\n          }\n        }\n        token = T_DOUBLE;\n      } else {\n        token = T_INTEGER;\n      }\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n    if (isalpha(scanned[scan_str])) {\n      while (isalnumorunderscore(scanned[scan_str])) {\n        scan_str++;\n      }\n      if (scanned[scan_str] === '(') {\n        token = T_FUNCTION;\n      } else {\n        token = T_SYMBOL;\n      }\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n    if (scanned[scan_str] === '\"') {\n      scan_str++;\n      while (scanned[scan_str] !== '\"') {\n        if (scan_str === scanned.length - 1) {\n          scan_str++;\n          scan_error(\"runaway string\");\n          scan_str--;\n        }\n        scan_str++;\n      }\n      scan_str++;\n      token = T_STRING;\n      update_token_buf(token_str + 1, scan_str - 1);\n      return;\n    }\n    if (scanned[scan_str] === '#' || scanned[scan_str] === '-' && scanned[scan_str + 1] === '-') {\n      while (scanned[scan_str] && scanned[scan_str] !== '\\n' && scanned[scan_str] !== '\\r') {\n        scan_str++;\n      }\n      if (scanned[scan_str]) {\n        scan_str++;\n      }\n      token = T_NEWLINE;\n      return;\n    }\n    if (scanned[scan_str] === ':' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_QUOTASSIGN;\n      return;\n    }\n    if (scanned[scan_str] === '=' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_EQ;\n      return;\n    }\n    if (scanned[scan_str] === '!' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_NEQ;\n      return;\n    }\n    if (scanned[scan_str] === '<' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_LTEQ;\n      return;\n    }\n    if (scanned[scan_str] === '>' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_GTEQ;\n      return;\n    }\n    return token = scanned[scan_str++];\n  };\n\n  update_token_buf = function(a, b) {\n    return token_buf = scanned.substring(a, b);\n  };\n\n  $.scan = scan;\n\n  Eval_sgn = function() {\n    push(cadr(p1));\n    Eval();\n    return sgn();\n  };\n\n  sgn = function() {\n    save();\n    yysgn();\n    return restore();\n  };\n\n  yysgn = function() {\n    p1 = pop();\n    if (isdouble(p1)) {\n      if (p1.d > 0) {\n        push_integer(1);\n        return;\n      } else {\n        if (p1.d === 0) {\n          push_integer(1);\n          return;\n        } else {\n          push_integer(-1);\n          return;\n        }\n      }\n    }\n    if (isrational(p1)) {\n      if (MSIGN(mmul(p1.q.a, p1.q.b)) === -1) {\n        push_integer(-1);\n        return;\n      } else {\n        if (MZERO(mmul(p1.q.a, p1.q.b))) {\n          push_integer(0);\n          return;\n        } else {\n          push_integer(1);\n          return;\n        }\n      }\n    }\n    if (iscomplexnumber(p1)) {\n      push_integer(-1);\n      push(p1);\n      absval();\n      power();\n      push(p1);\n      multiply();\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(SGN);\n      push(p1);\n      negate();\n      list(2);\n      push_integer(-1);\n      multiply();\n      return;\n    }\n\n    /*\n    push_integer(2)\n    push(p1)\n    heaviside()\n    multiply()\n    push_integer(-1)\n    add()\n     */\n    push_symbol(SGN);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_shape = function() {\n    push(cadr(p1));\n    Eval();\n    return shape();\n  };\n\n  shape = function() {\n    var ai, an, i, l1, m1, ndim, ref2, ref3, t;\n    i = 0;\n    ndim = 0;\n    t = 0;\n    ai = [];\n    an = [];\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n    save();\n    p1 = pop();\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"transpose: tensor expected, 1st arg is not a tensor\");\n      }\n      push(zero);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(ndim);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = ndim;\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push_integer(p1.tensor.dim[i]);\n      p2.tensor.elem[i] = pop();\n    }\n    push(p2);\n    return restore();\n  };\n\n\n  /*\n   Simplify factorials\n  \n  The following script\n  \n    F(n,k) = k binomial(n,k)\n    (F(n,k) + F(n,k-1)) / F(n+1,k)\n  \n  generates\n  \n         k! n!             n! (1 - k + n)!              k! n!\n   -------------------- + -------------------- - ----------------------\n   (-1 + k)! (1 + n)!     (1 + n)! (-k + n)!     k (-1 + k)! (1 + n)!\n  \n  Simplify each term to get\n  \n      k       1 - k + n       1\n   ------- + ----------- - -------\n    1 + n       1 + n       1 + n\n  \n  Then simplify the sum to get\n  \n      n\n   -------\n    1 + n\n   */\n\n  Eval_simfac = function() {\n    push(cadr(p1));\n    Eval();\n    return simfac();\n  };\n\n  simfac = function() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      h = tos;\n      p1 = cdr(p1);\n      while (p1 !== symbol(NIL)) {\n        push(car(p1));\n        simfac_term();\n        p1 = cdr(p1);\n      }\n      add_all(tos - h);\n    } else {\n      push(p1);\n      simfac_term();\n    }\n    return restore();\n  };\n\n\n  /*\n  void\n  simfac(void)\n  {\n    int h\n    save()\n    p1 = pop()\n    if (car(p1) == symbol(ADD)) {\n      h = tos\n      p1 = cdr(p1)\n      while (p1 != symbol(NIL)) {\n        push(car(p1))\n        simfac_term()\n        p1 = cdr(p1)\n      }\n      addk(tos - h)\n      p1 = pop()\n      if (find(p1, symbol(FACTORIAL))) {\n        push(p1)\n        if (car(p1) == symbol(ADD)) {\n          Condense()\n          simfac_term()\n        }\n      }\n    } else {\n      push(p1)\n      simfac_term()\n    }\n    restore()\n  }\n  \n  #endif\n   */\n\n  simfac_term = function() {\n    var doNothing, h;\n    h = 0;\n    save();\n    p1 = pop();\n    if (car(p1) !== symbol(MULTIPLY)) {\n      push(p1);\n      restore();\n      return;\n    }\n    h = tos;\n    p1 = cdr(p1);\n    while (p1 !== symbol(NIL)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n    while (yysimfac(h)) {\n      doNothing = 1;\n    }\n    multiply_all_noexpand(tos - h);\n    return restore();\n  };\n\n  yysimfac = function(h) {\n    var i, j, l1, m1, ref2, ref3, ref4, ref5;\n    i = 0;\n    j = 0;\n    for (i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      p1 = stack[i];\n      for (j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; j = ref4 <= ref5 ? ++m1 : --m1) {\n        if (i === j) {\n          continue;\n        }\n        p2 = stack[j];\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && equal(cadr(p1), cadr(p2))) {\n          push(cadr(p1));\n          push(one);\n          subtract();\n          factorial();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n        if (car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL) && equal(p1, cadadr(p2))) {\n          push(p1);\n          push_integer(-1);\n          add();\n          factorial();\n          reciprocate();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n        if (car(p2) === symbol(FACTORIAL)) {\n          push(p1);\n          push(cadr(p2));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            push(p1);\n            factorial();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n        if (car(p1) === symbol(POWER) && isminusone(caddr(p1)) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            push(cadr(p1));\n            factorial();\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            stack[i] = cadr(p1);\n            stack[j] = one;\n            return 1;\n          }\n          if (isminusone(p3)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n          if (equaln(p3, 2)) {\n            stack[i] = cadr(p1);\n            push(cadr(p1));\n            push_integer(-1);\n            add();\n            stack[j] = pop();\n            return 1;\n          }\n          if (equaln(p3, -2)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            push(cadr(cadr(p2)));\n            push_integer(-1);\n            add();\n            reciprocate();\n            stack[j] = pop();\n            return 1;\n          }\n        }\n      }\n    }\n    return 0;\n  };\n\n  Eval_simplify = function() {\n    push(cadr(p1));\n    runUserDefinedSimplifications();\n    Eval();\n    return simplify();\n  };\n\n  runUserDefinedSimplifications = function() {\n    var atLeastOneSuccessInRouldOfRulesApplications, eachConsecutiveRuleApplication, eachSimplification, l1, len, len1, m1, numberOfRulesApplications, originalexpanding, success;\n    if (userSimplificationsInListForm.length !== 0 && !Find(cadr(p1), symbol(INTEGRAL))) {\n      originalexpanding = expanding;\n      expanding = false;\n      if (DEBUG) {\n        console.log(\"runUserDefinedSimplifications passed: \" + stack[tos - 1].toString());\n      }\n      Eval();\n      if (DEBUG) {\n        console.log(\"runUserDefinedSimplifications after eval no expanding: \" + stack[tos - 1].toString());\n      }\n      expanding = originalexpanding;\n      p1 = stack[tos - 1];\n      if (DEBUG) {\n        console.log(\"patterns to be checked: \");\n      }\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        eachSimplification = userSimplificationsInListForm[l1];\n        if (DEBUG) {\n          console.log(\"...\" + eachSimplification);\n        }\n      }\n      atLeastOneSuccessInRouldOfRulesApplications = true;\n      numberOfRulesApplications = 0;\n      while (atLeastOneSuccessInRouldOfRulesApplications && numberOfRulesApplications < MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        atLeastOneSuccessInRouldOfRulesApplications = false;\n        numberOfRulesApplications++;\n        for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n          eachSimplification = userSimplificationsInListForm[m1];\n          success = true;\n          eachConsecutiveRuleApplication = 0;\n          while (success && eachConsecutiveRuleApplication < MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            eachConsecutiveRuleApplication++;\n            if (DEBUG) {\n              console.log(\"simplify - tos: \" + tos + \" checking pattern: \" + eachSimplification + \" on: \" + p1);\n            }\n            push_symbol(NIL);\n            success = transform(eachSimplification, true);\n            if (success) {\n              atLeastOneSuccessInRouldOfRulesApplications = true;\n            }\n            p1 = stack[tos - 1];\n            if (DEBUG) {\n              console.log(\"p1 at this stage of simplification: \" + p1);\n            }\n          }\n          if (eachConsecutiveRuleApplication === MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            stop(\"maximum application of single transformation rule exceeded: \" + eachSimplification);\n          }\n        }\n      }\n      if (numberOfRulesApplications === MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        stop(\"maximum application of all transformation rules exceeded \");\n      }\n      if (DEBUG) {\n        console.log(\"METAX = \" + get_binding(symbol(METAX)));\n        console.log(\"METAA = \" + get_binding(symbol(METAA)));\n        return console.log(\"METAB = \" + get_binding(symbol(METAB)));\n      }\n    }\n  };\n\n  simplifyForCodeGeneration = function() {\n    save();\n    runUserDefinedSimplifications();\n    codeGen = true;\n    simplify_main();\n    codeGen = false;\n    return restore();\n  };\n\n  simplify = function() {\n    save();\n    simplify_main();\n    return restore();\n  };\n\n  simplify_main = function() {\n    var args, fbody;\n    p1 = pop();\n    if (codeGen && car(p1) === symbol(FUNCTION)) {\n      fbody = cadr(p1);\n      push(fbody);\n      eval();\n      simplify();\n      p3 = pop();\n      args = caddr(p1);\n      push_symbol(FUNCTION);\n      push(p3);\n      push(args);\n      list(3);\n      p1 = pop();\n    }\n    if (istensor(p1)) {\n      simplify_tensor();\n      return;\n    }\n    if (Find(p1, symbol(FACTORIAL))) {\n      push(p1);\n      simfac();\n      p2 = pop();\n      push(p1);\n      rationalize();\n      simfac();\n      p3 = pop();\n      if (count(p2) < count(p3)) {\n        p1 = p2;\n      } else {\n        p1 = p3;\n      }\n    }\n    f10();\n    f1();\n    f2();\n    f3();\n    f4();\n    f5();\n    f9();\n    simplify_polarRect();\n    if (do_simplify_nested_radicals) {\n      if (simplify_nested_radicals()) {\n        if (DEBUG) {\n          console.log(\"de-nesting successful into: \" + p1.toString());\n        }\n        push(p1);\n        simplify();\n        return;\n      }\n    }\n    simplify_rectToClock();\n    simplify_rational_expressions();\n    return push(p1);\n  };\n\n  simplify_tensor = function() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1.tensor.elem[i]);\n      simplify();\n      p2.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(p2);\n    if (isZeroAtomOrTensor(p2)) {\n      p2 = zero;\n    }\n    return push(p2);\n  };\n\n  f1 = function() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push(p1);\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f2 = function() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push(p1);\n    Condense();\n    p2 = pop();\n    if (count(p2) <= count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f3 = function() {\n    push(p1);\n    rationalize();\n    negate();\n    rationalize();\n    negate();\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f10 = function() {\n    var a, b, carp1, miao, originalexpanding;\n    carp1 = car(p1);\n    miao = cdr(p1);\n    if (carp1 === symbol(MULTIPLY) || isinnerordot(p1)) {\n      if ((car(car(cdr(p1))) === symbol(TRANSPOSE)) && (car(car(cdr(cdr(p1)))) === symbol(TRANSPOSE))) {\n        if (DEBUG) {\n          console.log(\"maybe collecting a transpose \" + p1);\n        }\n        a = cadr(car(cdr(p1)));\n        b = cadr(car(cdr(cdr(p1))));\n        if (carp1 === symbol(MULTIPLY)) {\n          push(a);\n          push(b);\n          multiply();\n        } else if (isinnerordot(p1)) {\n          push(b);\n          push(a);\n          inner();\n        }\n        push_integer(1);\n        push_integer(2);\n        originalexpanding = expanding;\n        expanding = false;\n        transpose();\n        expanding = originalexpanding;\n        p2 = pop();\n        if (count(p2) < count(p1)) {\n          p1 = p2;\n        }\n        if (DEBUG) {\n          return console.log(\"collecting a transpose \" + p2);\n        }\n      }\n    }\n  };\n\n  f4 = function() {\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n    push(p1);\n    rationalize();\n    inverse();\n    rationalize();\n    inverse();\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_trig = function() {\n    save();\n    p1 = pop();\n    f5();\n    push(p1);\n    return restore();\n  };\n\n  f5 = function() {\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n    p2 = p1;\n    trigmode = 1;\n    push(p2);\n    Eval();\n    p3 = pop();\n    trigmode = 2;\n    push(p2);\n    Eval();\n    p4 = pop();\n    trigmode = 0;\n    if (count(p4) < count(p3) || nterms(p4) < nterms(p3)) {\n      p3 = p4;\n    }\n    if (count(p3) < count(p1) || nterms(p3) < nterms(p1)) {\n      return p1 = p3;\n    }\n  };\n\n  f9 = function() {\n    var oldp1, oldp2;\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push_integer(0);\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      simplify();\n      add();\n      oldp1 = p1;\n      oldp2 = p2;\n      p1 = pop();\n      simplify_rational_expressions();\n      push(p1);\n      p1 = oldp1;\n      p2 = oldp2;\n      p2 = cdr(p2);\n    }\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rational_expressions = function() {\n    var denom, num, polyVar, sasa, theGCD;\n    push(p1);\n    denominator();\n    denom = pop();\n    if (isone(denom)) {\n      return;\n    }\n    push(p1);\n    numerator();\n    num = pop();\n    if (isone(num)) {\n      return;\n    }\n    if (!(polyVar = areunivarpolysfactoredorexpandedform(num, denom))) {\n      return;\n    }\n    push(num);\n    push(denom);\n    gcd();\n    push(polyVar);\n    factor();\n    theGCD = pop();\n    if (isone(theGCD)) {\n      return;\n    }\n    push(num);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    push(denom);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    divide();\n    Condense();\n    sasa = stack[tos - 1].toString();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rectToClock = function() {\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n    push(p1);\n    Eval();\n    clockform();\n    p2 = pop();\n    if (DEBUG) {\n      console.log(\"before simplification clockform: \" + p1 + \" after: \" + p2);\n    }\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_polarRect = function() {\n    push(p1);\n    polarRectAMinusOneBase();\n    Eval();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  polarRectAMinusOneBase = function() {\n    var h;\n    save();\n    p1 = pop();\n    if (isimaginaryunit(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (equal(car(p1), symbol(POWER)) && isminusone(cadr(p1))) {\n      push(one);\n      negate();\n      push(caddr(p1));\n      polarRectAMinusOneBase();\n      power();\n      polar();\n      rect();\n    } else if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        push(car(p1));\n        polarRectAMinusOneBase();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    restore();\n  };\n\n  nterms = function(p) {\n    if (car(p) !== symbol(ADD)) {\n      return 1;\n    } else {\n      return length(p) - 1;\n    }\n  };\n\n  simplify_nested_radicals = function() {\n    var prev_expanding, simplificationWithCondense, simplificationWithoutCondense, somethingSimplified;\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n      return false;\n    }\n    push(p1);\n    somethingSimplified = take_care_of_nested_radicals();\n    simplificationWithoutCondense = stack[tos - 1];\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    simplificationWithCondense = pop();\n    if (countOccurrencesOfSymbol(symbol(POWER), simplificationWithoutCondense) < countOccurrencesOfSymbol(symbol(POWER), simplificationWithCondense)) {\n      push(simplificationWithoutCondense);\n    } else {\n      push(simplificationWithCondense);\n    }\n    p1 = pop();\n    return somethingSimplified;\n  };\n\n  take_care_of_nested_radicals = function() {\n    var A, B, C, SOLUTION, anyRadicalSimplificationWorked, base, checkSize, commonBases, commonInnerExponent, countingTerms, eachSolution, exponent, firstTerm, h, i, innerbase, innerexponent, l1, len, len1, len2, len3, lowercase_a, lowercase_b, m1, n1, numberOfTerms, o1, possibleNewExpression, possibleNewExpressionValue, possibleRationalSolutions, possibleSolutions, potentialPower, realOfpossibleRationalSolutions, ref2, secondTerm, secondTermFactor, termsThatAreNotPowers, whichRationalSolution;\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n      return false;\n    }\n    save();\n    p1 = pop();\n    if (equal(car(p1), symbol(POWER))) {\n      base = cadr(p1);\n      exponent = caddr(p1);\n      if (!isminusone(exponent) && equal(car(base), symbol(ADD)) && isfraction(exponent) && (equalq(exponent, 1, 3) || equalq(exponent, 1, 2))) {\n        firstTerm = cadr(base);\n        push(firstTerm);\n        take_care_of_nested_radicals();\n        pop();\n        secondTerm = caddr(base);\n        push(secondTerm);\n        take_care_of_nested_radicals();\n        pop();\n        numberOfTerms = 0;\n        countingTerms = base;\n        while (cdr(countingTerms) !== symbol(NIL)) {\n          numberOfTerms++;\n          countingTerms = cdr(countingTerms);\n        }\n        if (numberOfTerms > 2) {\n          push(p1);\n          restore();\n          return false;\n        }\n        commonInnerExponent = null;\n        commonBases = [];\n        termsThatAreNotPowers = [];\n        if (car(secondTerm) === symbol(MULTIPLY)) {\n          secondTermFactor = cdr(secondTerm);\n          if (iscons(secondTermFactor)) {\n            while (iscons(secondTermFactor)) {\n              potentialPower = car(secondTermFactor);\n              if (car(potentialPower) === symbol(POWER)) {\n                innerbase = cadr(potentialPower);\n                innerexponent = caddr(potentialPower);\n                if (equalq(innerexponent, 1, 2)) {\n                  if (commonInnerExponent == null) {\n                    commonInnerExponent = innerexponent;\n                    commonBases.push(innerbase);\n                  } else {\n                    if (equal(innerexponent, commonInnerExponent)) {\n                      commonBases.push(innerbase);\n                    } else {\n\n                    }\n                  }\n                }\n              } else {\n                termsThatAreNotPowers.push(potentialPower);\n              }\n              secondTermFactor = cdr(secondTermFactor);\n            }\n          }\n        } else if (car(secondTerm) === symbol(POWER)) {\n          innerbase = cadr(secondTerm);\n          innerexponent = caddr(secondTerm);\n          if ((commonInnerExponent == null) && equalq(innerexponent, 1, 2)) {\n            commonInnerExponent = innerexponent;\n            commonBases.push(innerbase);\n          }\n        }\n        if (commonBases.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n        A = firstTerm;\n        push_integer(1);\n        for (l1 = 0, len = commonBases.length; l1 < len; l1++) {\n          i = commonBases[l1];\n          push(i);\n          multiply();\n        }\n        C = pop();\n        push_integer(1);\n        for (m1 = 0, len1 = termsThatAreNotPowers.length; m1 < len1; m1++) {\n          i = termsThatAreNotPowers[m1];\n          push(i);\n          multiply();\n        }\n        B = pop();\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          negate();\n          push(C);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push_integer(3);\n          push(C);\n          multiply();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(-3);\n          push(A);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push_integer(1);\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          multiply();\n          add();\n          add();\n          add();\n        } else if (equalq(exponent, 1, 2)) {\n          push(C);\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push_integer(-2);\n          push(A);\n          multiply();\n          push(B);\n          divide();\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(1);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n        }\n        push(symbol(SECRETX));\n        recursionLevelNestedRadicalsRemoval++;\n        roots();\n        recursionLevelNestedRadicalsRemoval--;\n        if (equal(stack[tos - 1], symbol(NIL))) {\n          if (DEBUG) {\n            console.log(\"roots bailed out because of too much recursion\");\n          }\n          pop();\n          push(p1);\n          restore();\n          return false;\n        }\n        possibleSolutions = [];\n        ref2 = stack[tos - 1].tensor.elem;\n        for (n1 = 0, len2 = ref2.length; n1 < len2; n1++) {\n          eachSolution = ref2[n1];\n          if (!Find(eachSolution, symbol(POWER))) {\n            possibleSolutions.push(eachSolution);\n          }\n        }\n        pop();\n        if (possibleSolutions.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n        possibleRationalSolutions = [];\n        realOfpossibleRationalSolutions = [];\n        for (o1 = 0, len3 = possibleSolutions.length; o1 < len3; o1++) {\n          i = possibleSolutions[o1];\n          push(i);\n          real();\n          yyfloat();\n          possibleRationalSolutions.push(i);\n          realOfpossibleRationalSolutions.push(pop().d);\n        }\n        whichRationalSolution = realOfpossibleRationalSolutions.indexOf(Math.max.apply(Math, realOfpossibleRationalSolutions));\n        SOLUTION = possibleRationalSolutions[whichRationalSolution];\n\n        /*\n        #possibleNewExpressions = []\n        #realOfPossibleNewExpressions = []\n         * pick the solution which cubic root has no radicals\n        lowercase_b = null\n        for SOLUTION in possibleSolutions\n          console.log(\"testing solution: \" + SOLUTION.toString())\n        \n          debugger\n          if equalq(exponent,1,3)\n            push(A)\n            push(SOLUTION)\n            push_integer(3)\n            power()\n            push_integer(3)\n            push(C)\n            multiply()\n            push(SOLUTION)\n            multiply()\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,3)\n            power()\n          else if equalq(exponent,1,2)\n            push(A)\n            push(SOLUTION)\n            push_integer(2)\n            power()\n            push(C)\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,2)\n            power()\n          console.log(\"b is: \" + stack[tos-1].toString())\n        \n          lowercase_b = pop()\n        \n          if !Find(lowercase_b, symbol(POWER))\n            break\n         */\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(3);\n          power();\n          push_integer(3);\n          push(C);\n          multiply();\n          push(SOLUTION);\n          multiply();\n          add();\n          divide();\n          push_rational(1, 3);\n          power();\n        } else if (equalq(exponent, 1, 2)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(2);\n          power();\n          push(C);\n          add();\n          divide();\n          push_rational(1, 2);\n          power();\n        }\n        lowercase_b = pop();\n        if (lowercase_b == null) {\n          push(p1);\n          restore();\n          return false;\n        }\n        push(lowercase_b);\n        push(SOLUTION);\n        multiply();\n        if (equalq(exponent, 1, 3)) {\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n        } else if (equalq(exponent, 1, 2)) {\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n          possibleNewExpression = pop();\n          push(possibleNewExpression);\n          real();\n          yyfloat();\n          possibleNewExpressionValue = pop();\n          if (!isnegativenumber(possibleNewExpressionValue)) {\n            push(possibleNewExpression);\n          } else {\n            push(lowercase_b);\n            negate();\n            lowercase_b = pop();\n            push(lowercase_a);\n            negate();\n            lowercase_a = pop();\n            push(lowercase_b);\n            push(C);\n            push_rational(1, 2);\n            power();\n            multiply();\n            push(lowercase_a);\n            add();\n            simplify();\n          }\n        }\n        p1 = pop();\n        push(p1);\n        restore();\n        return true;\n      } else {\n        push(p1);\n        restore();\n        return false;\n      }\n    } else if (iscons(p1)) {\n      h = tos;\n      anyRadicalSimplificationWorked = false;\n      while (iscons(p1)) {\n        push(car(p1));\n        anyRadicalSimplificationWorked = anyRadicalSimplificationWorked || take_care_of_nested_radicals();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return anyRadicalSimplificationWorked;\n    } else {\n      push(p1);\n      restore();\n      return false;\n    }\n    throw new Error(\"control flow should never reach here\");\n  };\n\n  Eval_sin = function() {\n    push(cadr(p1));\n    Eval();\n    return sine();\n  };\n\n  sine = function() {\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      sine_of_angle_sum();\n    } else {\n      sine_of_angle();\n    }\n    return restore();\n  };\n\n  sine_of_angle_sum = function() {\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      p4 = car(p2);\n      if (isnpi(p4)) {\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        sine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        cosine();\n        push(p4);\n        sine();\n        multiply();\n        add();\n        return;\n      }\n      p2 = cdr(p2);\n    }\n    return sine_of_angle();\n  };\n\n  sine_of_angle = function() {\n    var d, n;\n    if (car(p1) === symbol(ARCSIN)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.sin(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      sine();\n      negate();\n      return;\n    }\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      multiply();\n      return;\n    }\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push(symbol(SIN));\n      push(p1);\n      list(2);\n      return;\n    }\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n      case 30:\n      case 150:\n        return push_rational(1, 2);\n      case 210:\n      case 330:\n        return push_rational(-1, 2);\n      case 45:\n      case 135:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 225:\n      case 315:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 60:\n      case 120:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 240:\n      case 300:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 90:\n        return push_integer(1);\n      case 270:\n        return push_integer(-1);\n      default:\n        push(symbol(SIN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_sinh = function() {\n    push(cadr(p1));\n    Eval();\n    return ysinh();\n  };\n\n  ysinh = function() {\n    save();\n    yysinh();\n    return restore();\n  };\n\n  yysinh = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCSINH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.sinh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    push_symbol(SINH);\n    push(p1);\n    return list(2);\n  };\n\n\n  /*\n    Substitute new expr for old expr in expr.\n  \n    Input:  push  expr\n  \n      push  old expr\n  \n      push  new expr\n  \n    Output:  Result on stack\n   */\n\n  subst = function() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    if (p2 === symbol(NIL) || p3 === symbol(NIL)) {\n      restore();\n      return;\n    }\n    p1 = pop();\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n      for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n      for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2);\n        push(p3);\n        subst();\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n      push(p4);\n    } else if (equal(p1, p2)) {\n      push(p3);\n    } else if (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      push(p3);\n      subst();\n      push(cdr(p1));\n      push(p2);\n      push(p3);\n      subst();\n      cons();\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  Eval_sum = function() {\n    var body, i, indexVariable, j, k, l1, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    body = cadr(p1);\n    indexVariable = caddr(p1);\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    p4 = get_binding(indexVariable);\n    push_integer(0);\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      add();\n    }\n    return set_binding(indexVariable, p4);\n  };\n\n  Eval_tan = function() {\n    push(cadr(p1));\n    Eval();\n    return tangent();\n  };\n\n  tangent = function() {\n    save();\n    yytangent();\n    return restore();\n  };\n\n  yytangent = function() {\n    var d, n;\n    n = 0;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.tan(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      tangent();\n      negate();\n      return;\n    }\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push(symbol(TAN));\n      push(p1);\n      list(2);\n      return;\n    }\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n      case 30:\n      case 210:\n        push_rational(1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 150:\n      case 330:\n        push_rational(-1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 45:\n      case 225:\n        return push_integer(1);\n      case 135:\n      case 315:\n        return push_integer(-1);\n      case 60:\n      case 240:\n        push_integer(3);\n        push_rational(1, 2);\n        return power();\n      case 120:\n      case 300:\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return negate();\n      default:\n        push(symbol(TAN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_tanh = function() {\n    var d;\n    d = 0.0;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (car(p1) === symbol(ARCTANH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.tanh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    push_symbol(TANH);\n    push(p1);\n    return list(2);\n  };\n\n\n  /*\n  Taylor expansion of a function\n  \n    push(F)\n    push(X)\n    push(N)\n    push(A)\n    taylor()\n   */\n\n  Eval_taylor = function() {\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(24);\n    } else {\n      push(p2);\n    }\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n    return taylor();\n  };\n\n  taylor = function() {\n    var i, k, l1, ref2;\n    i = 0;\n    k = 0;\n    save();\n    p4 = pop();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p3);\n    k = pop_integer();\n    if (isNaN(k)) {\n      push_symbol(TAYLOR);\n      push(p1);\n      push(p2);\n      push(p3);\n      push(p4);\n      list(5);\n      restore();\n      return;\n    }\n    push(p1);\n    push(p2);\n    push(p4);\n    subst();\n    Eval();\n    push_integer(1);\n    p5 = pop();\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(p2);\n      derivative();\n      p1 = pop();\n      if (isZeroAtomOrTensor(p1)) {\n        break;\n      }\n      push(p5);\n      push(p2);\n      push(p4);\n      subtract();\n      multiply();\n      p5 = pop();\n      push(p1);\n      push(p2);\n      push(p4);\n      subst();\n      Eval();\n      push(p5);\n      multiply();\n      push_integer(i);\n      factorial();\n      divide();\n      add();\n    }\n    return restore();\n  };\n\n\n  /* tensor =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  General description\n  -------------------\n  Tensors are a strange in-between of matrices and \"computer\"\n  rectangular data structures.\n  \n  Tensors, unlike matrices, and like rectangular data structures,\n  can have an arbitrary number of dimensions (rank), although a tensor with\n  rank zero is just a scalar.\n  \n  Tensors, like matrices and unlike many computer rectangular data structures,\n  must be \"contiguous\" i.e. have no empty spaces within its size, and \"uniform\",\n  i.e. each element must have the same shape and hence the same rank.\n  \n  Also tensors have necessarily to make a distinction between row vectors,\n  column vectors (which have a rank of 2) and uni-dimensional vectors (rank 1).\n  They look very similar but they are fundamentally different.\n  \n  Tensors are 1-indexed, as per general math notation, and like Fortran,\n  Lua, Mathematica, SASL, MATLAB, Julia, Erlang and APL.\n  \n  Tensors with elements that are also tensors get promoted to a higher rank\n  , this is so we can represent and get the rank of a matrix correctly.\n  Example:\n  Start with a tensor of rank 1 with 2 elements (i.e. shape: 2)\n  if you put in both its elements another 2 tensors\n  of rank 1 with 2 elements (i.e. shape: 2)\n  then the result is a tensor of rank 2 with shape 2,2\n  i.e. the dimension of a tensor at all times must be\n  the number of nested tensors in it.\n  Also, all tensors must be \"uniform\" i.e. they must be accessed\n  uniformly, which means that all existing elements of a tensor\n  must be contiguous and have the same shape.\n  Implication of it all is that you can't put arbitrary\n  tensors inside tensors (like you would do to represent block matrices)\n  Rather, all tensors inside tensors must have same shape (and hence, rank)\n  \n  Limitations\n  -----------\n  n.a.\n  \n  Implementation info\n  -------------------\n  Tensors are implemented...\n   */\n\n  Eval_tensor = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    check_tensor_dimensions(p1);\n    nelem = p1.tensor.nelem;\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    check_tensor_dimensions(p2);\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      Eval();\n      b[i] = pop();\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return promote_tensor();\n  };\n\n  tensor_plus_tensor = function() {\n    var a, b, c, i, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n    if (ndim !== p2.tensor.ndim) {\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] !== p2.tensor.dim[i]) {\n        push(symbol(NIL));\n        restore();\n        return;\n      }\n    }\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n    for (i = n1 = 0, ref4 = nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      push(a[i]);\n      push(b[i]);\n      add();\n      c[i] = pop();\n    }\n    push(p3);\n    return restore();\n  };\n\n  tensor_times_scalar = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      multiply();\n      b[i] = pop();\n    }\n    push(p3);\n    return restore();\n  };\n\n  scalar_times_tensor = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p2.tensor.ndim;\n    nelem = p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p2.tensor.dim[i];\n    }\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      push(a[i]);\n      multiply();\n      b[i] = pop();\n    }\n    push(p3);\n    return restore();\n  };\n\n  check_tensor_dimensions = function(p) {\n    if (p.tensor.nelem !== p.tensor.elem.length) {\n      console.log(\"something wrong in tensor dimensions\");\n      debugger;\n    }\n  };\n\n  is_square_matrix = function(p) {\n    if (istensor(p) && p.tensor.ndim === 2 && p.tensor.dim[0] === p.tensor.dim[1]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  d_tensor_tensor = function() {\n    var a, b, c, i, j, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    if (ndim + 1 >= MAXDIM) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    p3 = alloc_tensor(nelem * p2.tensor.nelem);\n    p3.tensor.ndim = ndim + 1;\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    p3.tensor.dim[ndim] = p2.tensor.dim[0];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      for (j = n1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n        push(a[i]);\n        push(b[j]);\n        derivative();\n        c[i * p2.tensor.nelem + j] = pop();\n      }\n    }\n    return push(p3);\n  };\n\n  d_scalar_tensor = function() {\n    var a, b, i, l1, ref2;\n    p3 = alloc_tensor(p2.tensor.nelem);\n    p3.tensor.ndim = 1;\n    p3.tensor.dim[0] = p2.tensor.dim[0];\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = l1 = 0, ref2 = p2.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(a[i]);\n      derivative();\n      b[i] = pop();\n    }\n    return push(p3);\n  };\n\n  d_tensor_scalar = function() {\n    var a, b, i, l1, m1, ref2, ref3;\n    i = 0;\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      derivative();\n      b[i] = pop();\n    }\n    return push(p3);\n  };\n\n  compare_tensors = function(p1, p2) {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    if (p1.tensor.ndim < p2.tensor.ndim) {\n      return -1;\n    }\n    if (p1.tensor.ndim > p2.tensor.ndim) {\n      return 1;\n    }\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n        return -1;\n      }\n      if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n        return 1;\n      }\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      if (equal(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        continue;\n      }\n      if (lessp(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return 0;\n  };\n\n  power_tensor = function() {\n    var i, k, l1, m1, n, ref2, ref3, results;\n    i = 0;\n    k = 0;\n    n = 0;\n    k = p1.tensor.ndim - 1;\n    if (p1.tensor.dim[0] !== p1.tensor.dim[k]) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    push(p2);\n    n = pop_integer();\n    if (isNaN(n)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    if (n === 0) {\n      if (p1.tensor.ndim !== 2) {\n        stop(\"power(tensor,0) with tensor rank not equal to 2\");\n      }\n      n = p1.tensor.dim[0];\n      p1 = alloc_tensor(n * n);\n      p1.tensor.ndim = 2;\n      p1.tensor.dim[0] = n;\n      p1.tensor.dim[1] = n;\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        p1.tensor.elem[n * i + i] = one;\n      }\n      check_tensor_dimensions(p1);\n      push(p1);\n      return;\n    }\n    if (n < 0) {\n      n = -n;\n      push(p1);\n      inv();\n      p1 = pop();\n    }\n    push(p1);\n    results = [];\n    for (i = m1 = 1, ref3 = n; 1 <= ref3 ? m1 < ref3 : m1 > ref3; i = 1 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      inner();\n      if (isZeroAtomOrTensor(stack[tos - 1])) {\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  copy_tensor = function() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p1 = pop();\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return restore();\n  };\n\n  promote_tensor = function() {\n    var i, j, k, l1, m1, n1, ndim, nelem, o1, q1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    j = 0;\n    k = 0;\n    nelem = 0;\n    ndim = 0;\n    save();\n    p1 = pop();\n    if (!istensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    p2 = p1.tensor.elem[0];\n    for (i = l1 = 1, ref2 = p1.tensor.nelem; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      if (!compatible(p2, p1.tensor.elem[i])) {\n        stop(\"Cannot promote tensor due to inconsistent tensor components.\");\n      }\n    }\n    if (!istensor(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n    if (ndim > MAXDIM) {\n      stop(\"tensor rank > \" + MAXDIM);\n    }\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = m1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (j = n1 = 0, ref4 = p2.tensor.ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n      p3.tensor.dim[i + j] = p2.tensor.dim[j];\n    }\n    k = 0;\n    for (i = o1 = 0, ref5 = p1.tensor.nelem; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      p2 = p1.tensor.elem[i];\n      for (j = q1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; j = 0 <= ref6 ? ++q1 : --q1) {\n        p3.tensor.elem[k++] = p2.tensor.elem[j];\n      }\n    }\n    check_tensor_dimensions(p2);\n    check_tensor_dimensions(p3);\n    push(p3);\n    return restore();\n  };\n\n  compatible = function(p, q) {\n    var i, l1, ref2;\n    if (!istensor(p) && !istensor(q)) {\n      return 1;\n    }\n    if (!istensor(p) || !istensor(q)) {\n      return 0;\n    }\n    if (p.tensor.ndim !== q.tensor.ndim) {\n      return 0;\n    }\n    for (i = l1 = 0, ref2 = p.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p.tensor.dim[i] !== q.tensor.dim[i]) {\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  Eval_test = function() {\n    var checkResult, orig;\n    orig = p1;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      if (cdr(p1) === symbol(NIL)) {\n        push(car(p1));\n        Eval();\n        return;\n      }\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(p1));\n      if (checkResult == null) {\n        push(orig);\n        return;\n      } else if (checkResult) {\n        push(cadr(p1));\n        Eval();\n        return;\n      } else {\n        p1 = cddr(p1);\n      }\n    }\n    return push_integer(0);\n  };\n\n  Eval_testeq = function() {\n    var checkResult, orig, subtractionResult;\n    orig = p1;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if ((checkResult != null) && !checkResult) {\n      push_integer(1);\n      return;\n    }\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if ((checkResult != null) && !checkResult) {\n      push_integer(1);\n      return;\n    }\n    return push(orig);\n  };\n\n  Eval_testge = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison >= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testgt = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison > 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testle = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison <= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testlt = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison < 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_not = function() {\n    var checkResult, wholeAndExpression;\n    wholeAndExpression = p1;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n    if (checkResult == null) {\n      return push(wholeAndExpression);\n    } else if (checkResult) {\n      return push_integer(0);\n    } else {\n      return push_integer(1);\n    }\n  };\n\n\n  /* and =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  a,b,...\n  \n  General description\n  -------------------\n  Logical-and of predicate expressions.\n   */\n\n  Eval_and = function() {\n    var andPredicates, checkResult, somePredicateUnknown, wholeAndExpression;\n    wholeAndExpression = p1;\n    andPredicates = cdr(wholeAndExpression);\n    somePredicateUnknown = false;\n    while (iscons(andPredicates)) {\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(andPredicates));\n      if (checkResult == null) {\n        somePredicateUnknown = true;\n        andPredicates = cdr(andPredicates);\n      } else if (checkResult) {\n        andPredicates = cdr(andPredicates);\n      } else if (!checkResult) {\n        push_integer(0);\n        return;\n      }\n    }\n    if (somePredicateUnknown) {\n      return push(wholeAndExpression);\n    } else {\n      return push_integer(1);\n    }\n  };\n\n  Eval_or = function() {\n    var checkResult, orPredicates, somePredicateUnknown, wholeOrExpression;\n    wholeOrExpression = p1;\n    orPredicates = cdr(wholeOrExpression);\n    somePredicateUnknown = false;\n    while (iscons(orPredicates)) {\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(orPredicates));\n      if (checkResult == null) {\n        somePredicateUnknown = true;\n        orPredicates = cdr(orPredicates);\n      } else if (checkResult) {\n        push_integer(1);\n        return;\n      } else if (!checkResult) {\n        orPredicates = cdr(orPredicates);\n      }\n    }\n    if (somePredicateUnknown) {\n      return push(wholeOrExpression);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  cmp_args = function() {\n    var t;\n    t = 0;\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    p1 = pop();\n    if (p1.k !== NUM && p1.k !== DOUBLE) {\n      push(p1);\n      yyfloat();\n      Eval();\n      p1 = pop();\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      return 0;\n    }\n    switch (p1.k) {\n      case NUM:\n        if (MSIGN(p1.q.a) === -1) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n        break;\n      case DOUBLE:\n        if (p1.d < 0.0) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n        break;\n      default:\n        t = null;\n    }\n    return t;\n  };\n\n\n  /*\n  Transform an expression using a pattern. The\n  pattern can come from the integrals table or\n  the user-defined patterns.\n  \n  The expression and free variable are on the stack.\n  \n  The argument s is a null terminated list of transform rules.\n  \n  For example, see the itab (integrals table)\n  \n  Internally, the following symbols are used:\n  \n    F  input expression\n  \n    X  free variable, i.e. F of X\n  \n    A  template expression\n  \n    B  result expression\n  \n    C  list of conditional expressions\n  \n  Puts the final expression on top of stack\n  (whether it's transformed or not) and returns\n  true is successful, false if not.\n   */\n\n  transform = function(s, generalTransform) {\n    var bookmarkTosToPrintDecomps, eachTransformEntry, i, l1, len, len1, m1, n1, numberOfDecomps, ref2, restTerm, secondTerm, success, theTransform, transform_h, transformationSuccessful, transformedTerms;\n    transform_h = 0;\n    save();\n    p1 = null;\n    p4 = pop();\n    p3 = pop();\n    if (DEBUG) {\n      console.log(\"         !!!!!!!!!   transform on: \" + p3);\n    }\n    saveMetaBindings();\n    set_binding(symbol(METAX), p4);\n    transform_h = tos;\n    push_integer(1);\n    push(p3);\n    push(p4);\n    polyform();\n    push(p4);\n    bookmarkTosToPrintDecomps = tos - 2;\n    decomp(generalTransform);\n    numberOfDecomps = tos - bookmarkTosToPrintDecomps;\n    if (DEBUG) {\n      console.log(\"  \" + numberOfDecomps + \" decomposed elements ====== \");\n      for (i = l1 = 0, ref2 = numberOfDecomps; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        console.log(\"  decomposition element \" + i + \": \" + stack[tos - 1 - i]);\n      }\n    }\n    transformationSuccessful = false;\n    if (generalTransform) {\n      if (!isNumericAtom(p3)) {\n        theTransform = s;\n        if (DEBUG) {\n          console.log(\"applying transform: \" + theTransform);\n        }\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + theTransform);\n        }\n        push(theTransform);\n        push(symbol(SYMBOL_A_UNDERSCORE));\n        push(symbol(METAA));\n        subst();\n        push(symbol(SYMBOL_B_UNDERSCORE));\n        push(symbol(METAB));\n        subst();\n        push(symbol(SYMBOL_X_UNDERSCORE));\n        push(symbol(METAX));\n        subst();\n        p1 = pop();\n        p5 = car(p1);\n        if (DEBUG) {\n          console.log(\"template expression: \" + p5);\n        }\n        p6 = cadr(p1);\n        p7 = cddr(p1);\n\n        /*\n        p5 = p1.tensor.elem[0]\n        p6 = p1.tensor.elem[1]\n        for i in [2..(p1.tensor.elem.length-1)]\n          push p1.tensor.elem[i]\n        list(p1.tensor.elem.length - 2)\n        p7 = pop()\n         */\n        if (f_equals_a(transform_h, generalTransform)) {\n          transformationSuccessful = true;\n        } else {\n          if (DEBUG) {\n            console.log(\"p3 at this point: \" + p3);\n          }\n          transformedTerms = [];\n          if (DEBUG) {\n            console.log(\"car(p3): \" + car(p3));\n          }\n          restTerm = p3;\n          if (iscons(restTerm)) {\n            transformedTerms.push(car(p3));\n            restTerm = cdr(p3);\n          }\n          while (iscons(restTerm)) {\n            secondTerm = car(restTerm);\n            restTerm = cdr(restTerm);\n            if (DEBUG) {\n              console.log(\"tos before recursive transform: \" + tos);\n            }\n            push(secondTerm);\n            push_symbol(NIL);\n            if (DEBUG) {\n              console.log(\"testing: \" + secondTerm);\n            }\n            if (DEBUG) {\n              console.log(\"about to try to simplify other term: \" + secondTerm);\n            }\n            success = transform(s, generalTransform);\n            transformationSuccessful = transformationSuccessful || success;\n            transformedTerms.push(pop());\n            if (DEBUG) {\n              console.log(\"tried to simplify other term: \" + secondTerm + \" ...successful?: \" + success + \" ...transformed: \" + transformedTerms[transformedTerms.length - 1]);\n            }\n          }\n          if (transformedTerms.length !== 0) {\n            for (m1 = 0, len = transformedTerms.length; m1 < len; m1++) {\n              i = transformedTerms[m1];\n              push(i);\n            }\n            list(transformedTerms.length);\n            p6 = pop();\n          }\n        }\n      }\n    } else {\n      for (n1 = 0, len1 = s.length; n1 < len1; n1++) {\n        eachTransformEntry = s[n1];\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + eachTransformEntry);\n          if ((eachTransformEntry + \"\").indexOf(\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\") !== -1) {\n            debugger;\n          }\n        }\n        if (eachTransformEntry) {\n          scan_meta(eachTransformEntry);\n          p1 = pop();\n          p5 = cadr(p1);\n          p6 = caddr(p1);\n          p7 = cdddr(p1);\n\n          /*\n          p5 = p1.tensor.elem[0]\n          p6 = p1.tensor.elem[1]\n          for i in [2..(p1.tensor.elem.length-1)]\n            push p1.tensor.elem[i]\n          list(p1.tensor.elem.length - 2)\n          p7 = pop()\n           */\n          if (f_equals_a(transform_h, generalTransform)) {\n            transformationSuccessful = true;\n            break;\n          }\n        }\n      }\n    }\n    moveTos(transform_h);\n    if (transformationSuccessful) {\n      push(p6);\n      Eval();\n      p1 = pop();\n      transformationSuccessful = true;\n    } else {\n      if (generalTransform) {\n        p1 = p3;\n      } else {\n        p1 = symbol(NIL);\n      }\n    }\n    restoreMetaBindings();\n    push(p1);\n    restore();\n    return transformationSuccessful;\n  };\n\n  saveMetaBindings = function() {\n    push(get_binding(symbol(METAA)));\n    push(get_binding(symbol(METAB)));\n    return push(get_binding(symbol(METAX)));\n  };\n\n  restoreMetaBindings = function() {\n    set_binding(symbol(METAX), pop());\n    set_binding(symbol(METAB), pop());\n    return set_binding(symbol(METAA), pop());\n  };\n\n  f_equals_a = function(h, generalTransform) {\n    var fea_i, fea_j, l1, m1, originalexpanding, ref2, ref3, ref4, ref5;\n    fea_i = 0;\n    fea_j = 0;\n    for (fea_i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; fea_i = ref2 <= ref3 ? ++l1 : --l1) {\n      set_binding(symbol(METAA), stack[fea_i]);\n      if (DEBUG) {\n        console.log(\"  binding METAA to \" + get_binding(symbol(METAA)));\n      }\n      for (fea_j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; fea_j = ref4 <= ref5 ? ++m1 : --m1) {\n        set_binding(symbol(METAB), stack[fea_j]);\n        if (DEBUG) {\n          console.log(\"  binding METAB to \" + get_binding(symbol(METAB)));\n        }\n        p1 = p7;\n        while (iscons(p1)) {\n          push(car(p1));\n          Eval();\n          p2 = pop();\n          if (isZeroAtomOrTensor(p2)) {\n            break;\n          }\n          p1 = cdr(p1);\n        }\n        if (iscons(p1)) {\n          continue;\n        }\n        push(p3);\n        if (DEBUG) {\n          console.log(\"about to evaluate template expression: \" + p5 + \" binding METAA to \" + get_binding(symbol(METAA)) + \" and binding METAB to \" + get_binding(symbol(METAB)) + \" and binding METAX to \" + get_binding(symbol(METAX)));\n        }\n        push(p5);\n        if (generalTransform) {\n          originalexpanding = expanding;\n          expanding = false;\n        }\n        Eval();\n        if (generalTransform) {\n          expanding = originalexpanding;\n        }\n        if (DEBUG) {\n          console.log(\"  comparing \" + stack[tos - 1] + \" to: \" + stack[tos - 2]);\n        }\n        subtract();\n        p1 = pop();\n        if (isZeroAtomOrTensor(p1)) {\n          if (DEBUG) {\n            console.log(\"binding METAA to \" + get_binding(symbol(METAA)));\n            console.log(\"binding METAB to \" + get_binding(symbol(METAB)));\n            console.log(\"binding METAX to \" + get_binding(symbol(METAX)));\n            console.log(\"comparing \" + p3 + \" to: \" + p5);\n          }\n          return 1;\n        }\n      }\n    }\n    return 0;\n  };\n\n  Eval_transpose = function() {\n    push(cadr(p1));\n    Eval();\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n    return transpose();\n  };\n\n  transpose = function() {\n    var a, accumulator, ai, an, b, eachEntry, i, innerTranspSwitch1, innerTranspSwitch2, j, k, l, l1, m, m1, n1, ndim, nelem, o1, q1, r1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s1, t;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    ai = [];\n    an = [];\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    if (isNumericAtom(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if ((isplusone(p2) && isplustwo(p3)) || (isplusone(p3) && isplustwo(p2))) {\n      if (isidentitymatrix(p1)) {\n        push(p1);\n        restore();\n        return;\n      }\n    }\n    if (istranspose(p1)) {\n      innerTranspSwitch1 = car(cdr(cdr(p1)));\n      innerTranspSwitch2 = car(cdr(cdr(cdr(p1))));\n      if ((equal(innerTranspSwitch1, p3) && equal(innerTranspSwitch2, p2)) || (equal(innerTranspSwitch2, p3) && equal(innerTranspSwitch1, p2)) || ((equal(innerTranspSwitch1, symbol(NIL)) && equal(innerTranspSwitch2, symbol(NIL))) && ((isplusone(p3) && isplustwo(p2)) || (isplusone(p2) && isplustwo(p3))))) {\n        push(car(cdr(p1)));\n        restore();\n        return;\n      }\n    }\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      push(zero);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        push(p3);\n        transpose();\n        add();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    if (expanding && ismultiply(p1)) {\n      p1 = cdr(p1);\n      push(one);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        push(p3);\n        transpose();\n        multiply();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n      while (iscons(p1)) {\n        accumulator.push([car(p1), p2, p3]);\n        p1 = cdr(p1);\n      }\n      for (eachEntry = m1 = ref3 = accumulator.length - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; eachEntry = ref3 <= 0 ? ++m1 : --m1) {\n        push(accumulator[eachEntry][0]);\n        push(accumulator[eachEntry][1]);\n        push(accumulator[eachEntry][2]);\n        transpose();\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n      restore();\n      return;\n    }\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        push_symbol(TRANSPOSE);\n        push(p1);\n        if ((!isplusone(p2) || !isplustwo(p3)) && (!isplusone(p3) || !isplustwo(p2))) {\n          push(p2);\n          push(p3);\n          list(4);\n        } else {\n          list(2);\n        }\n        restore();\n        return;\n      }\n      push(zero);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    if (ndim === 1) {\n      push(p1);\n      restore();\n      return;\n    }\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    if (l < 1 || l > ndim || m < 1 || m > ndim) {\n      stop(\"transpose: index out of range\");\n    }\n    l--;\n    m--;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n    for (i = n1 = 0, ref4 = ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    p2.tensor.dim[l] = p1.tensor.dim[m];\n    p2.tensor.dim[m] = p1.tensor.dim[l];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    for (i = o1 = 0, ref5 = ndim; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n    for (i = q1 = 0, ref6 = nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; i = 0 <= ref6 ? ++q1 : --q1) {\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      k = 0;\n      for (j = r1 = 0, ref7 = ndim; 0 <= ref7 ? r1 < ref7 : r1 > ref7; j = 0 <= ref7 ? ++r1 : --r1) {\n        k = (k * an[j]) + ai[j];\n      }\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      b[k] = a[i];\n      for (j = s1 = ref8 = ndim - 1; ref8 <= 0 ? s1 <= 0 : s1 >= 0; j = ref8 <= 0 ? ++s1 : --s1) {\n        if (++ai[j] < an[j]) {\n          break;\n        }\n        ai[j] = 0;\n      }\n    }\n    push(p2);\n    return restore();\n  };\n\n\n  /* d =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n  \n  Parameters\n  ----------\n  f,x\n  \n  General description\n  -------------------\n  Returns the partial derivative of f with respect to x. x can be a vector e.g. [x,y].\n   */\n\n  Eval_user_function = function() {\n    var bodyAndFormalArguments, h;\n    if (DEBUG) {\n      console.log(\"Eval_user_function evaluating: \" + car(p1));\n    }\n    if (car(p1) === symbol(SYMBOL_D) && get_binding(symbol(SYMBOL_D)) === symbol(SYMBOL_D)) {\n      Eval_derivative();\n      return;\n    }\n    push(car(p1));\n    Eval();\n    bodyAndFormalArguments = pop();\n    if (isNumericAtom(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication.\");\n    } else if (istensor(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found tensor product instead. Use 'dot/inner' explicitly.\");\n    } else if (isstr(bodyAndFormalArguments)) {\n      stop(\"expected function, found string instead.\");\n    }\n    p3 = car(cdr(bodyAndFormalArguments));\n    p4 = car(cdr(cdr(bodyAndFormalArguments)));\n    p5 = cdr(p1);\n    if ((car(bodyAndFormalArguments) !== symbol(FUNCTION)) || (bodyAndFormalArguments === car(p1))) {\n      h = tos;\n      push(bodyAndFormalArguments);\n      p1 = p5;\n      while (iscons(p1)) {\n        push(car(p1));\n        Eval();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      return;\n    }\n    p1 = p4;\n    p2 = p5;\n    h = tos;\n    while (iscons(p1) && iscons(p2)) {\n      push(car(p1));\n      push(car(p2));\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n    list(tos - h);\n    p6 = pop();\n    push(p3);\n    if (iscons(p6)) {\n      push(p6);\n      rewrite_args();\n    }\n    return Eval();\n  };\n\n  rewrite_args = function() {\n    var h, n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (istensor(p1)) {\n      n = rewrite_args_tensor();\n      restore();\n      return n;\n    }\n    if (iscons(p1)) {\n      h = tos;\n      if (car(p1) === car(p2)) {\n        push_symbol(EVAL);\n        push(car(cdr(p2)));\n        list(2);\n      } else {\n        push(car(p1));\n      }\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        n += rewrite_args();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return n;\n    }\n    if (!issymbol(p1)) {\n      push(p1);\n      restore();\n      return 0;\n    }\n    p3 = p2;\n    while (iscons(p3)) {\n      if (p1 === car(p3)) {\n        push(cadr(p3));\n        restore();\n        return 1;\n      }\n      p3 = cddr(p3);\n    }\n    p3 = get_binding(p1);\n    push(p3);\n    if (p1 !== p3) {\n      push(p2);\n      n = rewrite_args();\n      if (n === 0) {\n        pop();\n        push(p1);\n      }\n    }\n    restore();\n    return n;\n  };\n\n  rewrite_args_tensor = function() {\n    var i, l1, n, ref2;\n    n = 0;\n    i = 0;\n    push(p1);\n    copy_tensor();\n    p1 = pop();\n    for (i = l1 = 0, ref2 = p1.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      n += rewrite_args();\n      p1.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(p1);\n    push(p1);\n    return n;\n  };\n\n  Eval_zero = function() {\n    var i, k, l1, m, m1, n, ref2, ref3;\n    i = 0;\n    k = [];\n    m = 0;\n    n = 0;\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      k[i] = 0;\n    }\n    m = 1;\n    n = 0;\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      i = pop_integer();\n      if (i < 1 || isNaN(i)) {\n        push(zero);\n        return;\n      }\n      m *= i;\n      k[n++] = i;\n      p2 = cdr(p2);\n    }\n    if (n === 0) {\n      push(zero);\n      return;\n    }\n    p1 = alloc_tensor(m);\n    p1.tensor.ndim = n;\n    for (i = m1 = 0, ref3 = n; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p1.tensor.dim[i] = k[i];\n    }\n    return push(p1);\n  };\n\n\n  /*\n  // up to 100 blocks of 100,000 atoms\n  \n  #define M 100\n  #define N 100000\n  \n  U *mem[M]\n  int mcount\n  \n  U *free_list\n  int free_count\n  \n  U *\n  alloc(void)\n  {\n    U *p\n    if (free_count == 0) {\n      if (mcount == 0)\n        alloc_mem()\n      else {\n        gc()\n        if (free_count < N * mcount / 2)\n          alloc_mem()\n      }\n      if (free_count == 0)\n        stop(\"atom space exhausted\")\n    }\n    p = free_list\n    free_list = free_list->u.cons.cdr\n    free_count--\n    return p\n  }\n   */\n\n  allocatedId = 0;\n\n  alloc_tensor = function(nelem) {\n    var i, l1, p, ref2;\n    i = 0;\n    p = new U();\n    p.k = TENSOR;\n    p.tensor = new tensor();\n    p.tensor.nelem = nelem;\n    for (i = l1 = 0, ref2 = nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p.tensor.elem[i] = zero;\n    }\n    p.tensor.allocatedId = allocatedId;\n    allocatedId++;\n    check_tensor_dimensions(p);\n    return p;\n  };\n\n\n  /*\n  // garbage collector\n  \n  void\n  gc(void)\n  {\n    int i, j\n    U *p\n  \n    // tag everything\n  \n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++)\n        p[j].tag = 1\n    }\n  \n    // untag what's used\n  \n    untag(p0)\n    untag(p1)\n    untag(p2)\n    untag(p3)\n    untag(p4)\n    untag(p5)\n    untag(p6)\n    untag(p7)\n    untag(p8)\n    untag(p9)\n  \n    untag(one)\n    untag(zero)\n    untag(imaginaryunit)\n  \n    for (i = 0; i < NSYM; i++) {\n      untag(binding[i])\n      untag(arglist[i])\n    }\n  \n    for (i = 0; i < tos; i++)\n      untag(stack[i])\n  \n    for (i = (int) (frame - stack); i < TOS; i++)\n      untag(stack[i])\n  \n    // collect everything that's still tagged\n  \n    free_count = 0\n  \n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++) {\n        if (p[j].tag == 0)\n          continue\n        // still tagged so it's unused, put on free list\n        switch (p[j].k) {\n        case TENSOR:\n          free(p[j].u.tensor)\n          break\n        case STR:\n          free(p[j].u.str)\n          break\n        case NUM:\n          mfree(p[j].u.q.a)\n          mfree(p[j].u.q.b)\n          break\n        }\n        p[j].k = CONS; // so no double free occurs above\n        p[j].u.cons.cdr = free_list\n        free_list = p + j\n        free_count++\n      }\n    }\n  }\n  \n  void\n  untag(U *p)\n  {\n    int i\n  \n    if (iscons(p)) {\n      do {\n        if (p->tag == 0)\n          return\n        p->tag = 0\n        untag(p->u.cons.car)\n        p = p->u.cons.cdr\n      } while (iscons(p))\n      untag(p)\n      return\n    }\n  \n    if (p->tag) {\n      p->tag = 0\n       if (istensor(p)) {\n        for (i = 0; i < p->u.tensor->nelem; i++)\n          untag(p->u.tensor->elem[i])\n      }\n    }\n  }\n  \n  // get memory for 100,000 atoms\n  \n  void\n  alloc_mem(void)\n  {\n    int i\n    U *p\n    if (mcount == M)\n      return\n    p = (U *) malloc(N * sizeof (struct U))\n    if (p == NULL)\n      return\n    mem[mcount++] = p\n    for (i = 0; i < N; i++) {\n      p[i].k = CONS; // so no free in gc\n      p[i].u.cons.cdr = p + i + 1\n    }\n    p[N - 1].u.cons.cdr = free_list\n    free_list = p\n    free_count += N\n  }\n  \n  void\n  print_mem_info(void)\n  {\n    char buf[100]\n  \n    sprintf(buf, \"%d blocks (%d bytes/block)\\n\", N * mcount, (int) sizeof (U))\n    printstr(buf)\n  \n    sprintf(buf, \"%d free\\n\", free_count)\n    printstr(buf)\n  \n    sprintf(buf, \"%d used\\n\", N * mcount - free_count)\n    printstr(buf)\n  }\n   */\n\n  Find = function(p, q) {\n    var i, l1, ref2;\n    i = 0;\n    if (equal(p, q)) {\n      return 1;\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (Find(p.tensor.elem[i], q)) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (Find(car(p), q)) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  findPossibleClockForm = function(p) {\n    var i, l1, ref2;\n    i = 0;\n    if (isimaginaryunit(p)) {\n      return 0;\n    }\n    if (car(p) === symbol(POWER) && !isinteger(caddr(p1))) {\n      if (Find(cadr(p), imaginaryunit)) {\n        return 1;\n      }\n    }\n    if (car(p) === symbol(POWER) && equaln(cadr(p), -1) && !isinteger(caddr(p1))) {\n      return 1;\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleClockForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (findPossibleClockForm(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  findPossibleExponentialForm = function(p) {\n    var i, l1, ref2;\n    i = 0;\n    if (car(p) === symbol(POWER) && cadr(p) === symbol(E)) {\n      return Find(caddr(p), imaginaryunit);\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleExponentialForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (findPossibleExponentialForm(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  $.Find = Find;\n\n  init = function() {\n    var i, l1, ref2;\n    i = 0;\n    flag = 0;\n    reset_after_error();\n    chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n    if (flag) {\n      return;\n    }\n    flag = 1;\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      isSymbolReclaimable[i] = false;\n    }\n    return defn();\n  };\n\n\n  /* cross =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n  \n  Parameters\n  ----------\n  u,v\n  \n  General description\n  -------------------\n  Returns the cross product of vectors u and v.\n   */\n\n\n  /* curl =====================================================================\n  \n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n  \n  Parameters\n  ----------\n  u\n  \n  General description\n  -------------------\n  Returns the curl of vector u.\n   */\n\n  defn_str = [\"version=\\\"\" + version + \"\\\"\", \"e=exp(1)\", \"i=sqrt(-1)\", \"autoexpand=1\", \"assumeRealVariables=1\", \"trange=[-pi,pi]\", \"xrange=[-10,10]\", \"yrange=[-10,10]\", \"last=0\", \"trace=0\", \"forceFixedPrintout=1\", \"maxFixedPrintoutDigits=6\", \"printLeaveEAlone=1\", \"printLeaveXAlone=0\", \"cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]\", \"curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]\", \"div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)\", \"ln(x)=log(x)\"];\n\n  defn = function() {\n    var definitionOfInterest, defn_i, l1, originalCodeGen, ref2;\n    p0 = symbol(NIL);\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    p3 = symbol(NIL);\n    p4 = symbol(NIL);\n    p5 = symbol(NIL);\n    p6 = symbol(NIL);\n    p7 = symbol(NIL);\n    p8 = symbol(NIL);\n    p9 = symbol(NIL);\n    std_symbol(\"abs\", ABS);\n    std_symbol(\"add\", ADD);\n    std_symbol(\"adj\", ADJ);\n    std_symbol(\"and\", AND);\n    std_symbol(\"approxratio\", APPROXRATIO);\n    std_symbol(\"arccos\", ARCCOS);\n    std_symbol(\"arccosh\", ARCCOSH);\n    std_symbol(\"arcsin\", ARCSIN);\n    std_symbol(\"arcsinh\", ARCSINH);\n    std_symbol(\"arctan\", ARCTAN);\n    std_symbol(\"arctanh\", ARCTANH);\n    std_symbol(\"arg\", ARG);\n    std_symbol(\"atomize\", ATOMIZE);\n    std_symbol(\"besselj\", BESSELJ);\n    std_symbol(\"bessely\", BESSELY);\n    std_symbol(\"binding\", BINDING);\n    std_symbol(\"binomial\", BINOMIAL);\n    std_symbol(\"ceiling\", CEILING);\n    std_symbol(\"check\", CHECK);\n    std_symbol(\"choose\", CHOOSE);\n    std_symbol(\"circexp\", CIRCEXP);\n    std_symbol(\"clear\", CLEAR);\n    std_symbol(\"clearall\", CLEARALL);\n    std_symbol(\"clearpatterns\", CLEARPATTERNS);\n    std_symbol(\"clock\", CLOCK);\n    std_symbol(\"coeff\", COEFF);\n    std_symbol(\"cofactor\", COFACTOR);\n    std_symbol(\"condense\", CONDENSE);\n    std_symbol(\"conj\", CONJ);\n    std_symbol(\"contract\", CONTRACT);\n    std_symbol(\"cos\", COS);\n    std_symbol(\"cosh\", COSH);\n    std_symbol(\"decomp\", DECOMP);\n    std_symbol(\"defint\", DEFINT);\n    std_symbol(\"deg\", DEGREE);\n    std_symbol(\"denominator\", DENOMINATOR);\n    std_symbol(\"det\", DET);\n    std_symbol(\"derivative\", DERIVATIVE);\n    std_symbol(\"dim\", DIM);\n    std_symbol(\"dirac\", DIRAC);\n    std_symbol(\"divisors\", DIVISORS);\n    std_symbol(\"do\", DO);\n    std_symbol(\"dot\", DOT);\n    std_symbol(\"draw\", DRAW);\n    std_symbol(\"dsolve\", DSOLVE);\n    std_symbol(\"erf\", ERF);\n    std_symbol(\"erfc\", ERFC);\n    std_symbol(\"eigen\", EIGEN);\n    std_symbol(\"eigenval\", EIGENVAL);\n    std_symbol(\"eigenvec\", EIGENVEC);\n    std_symbol(\"eval\", EVAL);\n    std_symbol(\"exp\", EXP);\n    std_symbol(\"expand\", EXPAND);\n    std_symbol(\"expcos\", EXPCOS);\n    std_symbol(\"expsin\", EXPSIN);\n    std_symbol(\"factor\", FACTOR);\n    std_symbol(\"factorial\", FACTORIAL);\n    std_symbol(\"factorpoly\", FACTORPOLY);\n    std_symbol(\"filter\", FILTER);\n    std_symbol(\"float\", FLOATF);\n    std_symbol(\"floor\", FLOOR);\n    std_symbol(\"for\", FOR);\n    std_symbol(\"function\", FUNCTION);\n    std_symbol(\"Gamma\", GAMMA);\n    std_symbol(\"gcd\", GCD);\n    std_symbol(\"hermite\", HERMITE);\n    std_symbol(\"hilbert\", HILBERT);\n    std_symbol(\"imag\", IMAG);\n    std_symbol(\"component\", INDEX);\n    std_symbol(\"inner\", INNER);\n    std_symbol(\"integral\", INTEGRAL);\n    std_symbol(\"inv\", INV);\n    std_symbol(\"invg\", INVG);\n    std_symbol(\"isinteger\", ISINTEGER);\n    std_symbol(\"isprime\", ISPRIME);\n    std_symbol(\"laguerre\", LAGUERRE);\n    std_symbol(\"lcm\", LCM);\n    std_symbol(\"leading\", LEADING);\n    std_symbol(\"legendre\", LEGENDRE);\n    std_symbol(\"log\", LOG);\n    std_symbol(\"lookup\", LOOKUP);\n    std_symbol(\"mod\", MOD);\n    std_symbol(\"multiply\", MULTIPLY);\n    std_symbol(\"not\", NOT);\n    std_symbol(\"nroots\", NROOTS);\n    std_symbol(\"number\", NUMBER);\n    std_symbol(\"numerator\", NUMERATOR);\n    std_symbol(\"operator\", OPERATOR);\n    std_symbol(\"or\", OR);\n    std_symbol(\"outer\", OUTER);\n    std_symbol(\"pattern\", PATTERN);\n    std_symbol(\"patternsinfo\", PATTERNSINFO);\n    std_symbol(\"polar\", POLAR);\n    std_symbol(\"power\", POWER);\n    std_symbol(\"prime\", PRIME);\n    std_symbol(\"print\", PRINT);\n    std_symbol(\"print2dascii\", PRINT2DASCII);\n    std_symbol(\"printcomputer\", PRINTFULL);\n    std_symbol(\"printlatex\", PRINTLATEX);\n    std_symbol(\"printlist\", PRINTLIST);\n    std_symbol(\"printhuman\", PRINTPLAIN);\n    std_symbol(\"printLeaveEAlone\", PRINT_LEAVE_E_ALONE);\n    std_symbol(\"printLeaveXAlone\", PRINT_LEAVE_X_ALONE);\n    std_symbol(\"product\", PRODUCT);\n    std_symbol(\"quote\", QUOTE);\n    std_symbol(\"quotient\", QUOTIENT);\n    std_symbol(\"rank\", RANK);\n    std_symbol(\"rationalize\", RATIONALIZE);\n    std_symbol(\"real\", REAL);\n    std_symbol(\"rect\", YYRECT);\n    std_symbol(\"roots\", ROOTS);\n    std_symbol(\"round\", ROUND);\n    std_symbol(\"equals\", SETQ);\n    std_symbol(\"sgn\", SGN);\n    std_symbol(\"silentpattern\", SILENTPATTERN);\n    std_symbol(\"simplify\", SIMPLIFY);\n    std_symbol(\"sin\", SIN);\n    std_symbol(\"sinh\", SINH);\n    std_symbol(\"shape\", SHAPE);\n    std_symbol(\"sqrt\", SQRT);\n    std_symbol(\"stop\", STOP);\n    std_symbol(\"subst\", SUBST);\n    std_symbol(\"sum\", SUM);\n    std_symbol(\"symbolsinfo\", SYMBOLSINFO);\n    std_symbol(\"tan\", TAN);\n    std_symbol(\"tanh\", TANH);\n    std_symbol(\"taylor\", TAYLOR);\n    std_symbol(\"test\", TEST);\n    std_symbol(\"testeq\", TESTEQ);\n    std_symbol(\"testge\", TESTGE);\n    std_symbol(\"testgt\", TESTGT);\n    std_symbol(\"testle\", TESTLE);\n    std_symbol(\"testlt\", TESTLT);\n    std_symbol(\"transpose\", TRANSPOSE);\n    std_symbol(\"unit\", UNIT);\n    std_symbol(\"zero\", ZERO);\n    std_symbol(\"nil\", NIL);\n    std_symbol(\"autoexpand\", AUTOEXPAND);\n    std_symbol(\"bake\", BAKE);\n    std_symbol(\"assumeRealVariables\", ASSUME_REAL_VARIABLES);\n    std_symbol(\"last\", LAST);\n    std_symbol(\"lastprint\", LAST_PRINT);\n    std_symbol(\"last2dasciiprint\", LAST_2DASCII_PRINT);\n    std_symbol(\"lastfullprint\", LAST_FULL_PRINT);\n    std_symbol(\"lastlatexprint\", LAST_LATEX_PRINT);\n    std_symbol(\"lastlistprint\", LAST_LIST_PRINT);\n    std_symbol(\"lastplainprint\", LAST_PLAIN_PRINT);\n    std_symbol(\"trace\", TRACE);\n    std_symbol(\"forceFixedPrintout\", FORCE_FIXED_PRINTOUT);\n    std_symbol(\"maxFixedPrintoutDigits\", MAX_FIXED_PRINTOUT_DIGITS);\n    std_symbol(\"~\", YYE);\n    std_symbol(\"$DRAWX\", DRAWX);\n    std_symbol(\"$METAA\", METAA);\n    std_symbol(\"$METAB\", METAB);\n    std_symbol(\"$METAX\", METAX);\n    std_symbol(\"$SECRETX\", SECRETX);\n    std_symbol(\"version\", VERSION);\n    std_symbol(\"pi\", PI);\n    std_symbol(\"a\", SYMBOL_A);\n    std_symbol(\"b\", SYMBOL_B);\n    std_symbol(\"c\", SYMBOL_C);\n    std_symbol(\"d\", SYMBOL_D);\n    std_symbol(\"i\", SYMBOL_I);\n    std_symbol(\"j\", SYMBOL_J);\n    std_symbol(\"n\", SYMBOL_N);\n    std_symbol(\"r\", SYMBOL_R);\n    std_symbol(\"s\", SYMBOL_S);\n    std_symbol(\"t\", SYMBOL_T);\n    std_symbol(\"x\", SYMBOL_X);\n    std_symbol(\"y\", SYMBOL_Y);\n    std_symbol(\"z\", SYMBOL_Z);\n    std_symbol(\"I\", SYMBOL_IDENTITY_MATRIX);\n    std_symbol(\"a_\", SYMBOL_A_UNDERSCORE);\n    std_symbol(\"b_\", SYMBOL_B_UNDERSCORE);\n    std_symbol(\"x_\", SYMBOL_X_UNDERSCORE);\n    std_symbol(\"$C1\", C1);\n    std_symbol(\"$C2\", C2);\n    std_symbol(\"$C3\", C3);\n    std_symbol(\"$C4\", C4);\n    std_symbol(\"$C5\", C5);\n    std_symbol(\"$C6\", C6);\n    defineSomeHandyConstants();\n    originalCodeGen = codeGen;\n    codeGen = false;\n    for (defn_i = l1 = 0, ref2 = defn_str.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; defn_i = 0 <= ref2 ? ++l1 : --l1) {\n      definitionOfInterest = defn_str[defn_i];\n      scan(definitionOfInterest);\n      if (DEBUG) {\n        console.log(\"... evaling \" + definitionOfInterest);\n        console.log(\"top of stack:\");\n        console.log(print_list(stack[tos - 1]));\n      }\n      Eval();\n      pop();\n    }\n    return codeGen = originalCodeGen;\n  };\n\n  defineSomeHandyConstants = function() {\n    push_integer(0);\n    zero = pop();\n    push_integer(1);\n    one = pop();\n    push_double(1.0);\n    one_as_double = pop();\n    push_symbol(POWER);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    push_integer(-1);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    push_rational(1, 2);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    list(3);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    return imaginaryunit = pop();\n  };\n\n  mcmp = function(a, b) {\n    return a.compare(b);\n  };\n\n  mcmpint = function(a, n) {\n    var b, t;\n    b = bigInt(n);\n    t = mcmp(a, b);\n    return t;\n  };\n\n  strcmp = function(str1, str2) {\n    if (str1 === str2) {\n      return 0;\n    } else if (str1 > str2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  doubleToReasonableString = function(d) {\n    var maxFixedPrintoutDigits, stringRepresentation;\n    if (codeGen) {\n      return \"\" + d;\n    }\n    if (isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))) {\n      stringRepresentation = \"\" + d;\n      if (printMode === PRINTMODE_LATEX) {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"\\\\mathrm{e}{$1}\");\n        } else {\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0\\\\mathrm{e}{$2}\");\n        }\n      } else {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"*10^($1)\");\n        } else {\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0*10^($2)\");\n        }\n      }\n    } else {\n      push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS)));\n      maxFixedPrintoutDigits = pop_integer();\n      stringRepresentation = \"\" + d.toFixed(maxFixedPrintoutDigits);\n      stringRepresentation = stringRepresentation.replace(/(\\.\\d*?[1-9])0+$/gm, \"$1\");\n      stringRepresentation = stringRepresentation.replace(/\\.0+$/gm, \"\");\n      if (stringRepresentation.indexOf(\".\") === -1) {\n        stringRepresentation += \".0\";\n      }\n      if (parseFloat(stringRepresentation) !== d) {\n        stringRepresentation = d.toFixed(maxFixedPrintoutDigits) + \"...\";\n      }\n    }\n    return stringRepresentation;\n  };\n\n  clear_term = function() {};\n\n  isspace = function(s) {\n    if (s == null) {\n      return false;\n    }\n    return s === ' ' || s === '\\t' || s === '\\n' || s === '\\v' || s === '\\f' || s === '\\r';\n  };\n\n  isdigit = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return /^\\d+$/.test(str);\n  };\n\n  isalpha = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return str.search(/[^A-Za-z]/) === -1;\n  };\n\n  isalphaOrUnderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return str.search(/[^A-Za-z_]/) === -1;\n  };\n\n  isunderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return str.search(/_/) === -1;\n  };\n\n  isalnumorunderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return isalphaOrUnderscore(str) || isdigit(str);\n  };\n\n  count = function(p) {\n    var n;\n    if (iscons(p)) {\n      n = 0;\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n    return n;\n  };\n\n  countOccurrencesOfSymbol = function(needle, p) {\n    var n;\n    n = 0;\n    if (iscons(p)) {\n      while (iscons(p)) {\n        n += countOccurrencesOfSymbol(needle, car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (equal(needle, p)) {\n        n = 1;\n      }\n    }\n    return n;\n  };\n\n  countsize = function(p) {\n    var i, l1, n, ref2;\n    n = 0;\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        n += p.tensor.elem[i];\n      }\n    } else if (iscons(p)) {\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n    return n;\n  };\n\n  stop = function(s) {\n    var message;\n    errorMessage += \"Stop: \";\n    errorMessage += s;\n    message = errorMessage;\n    errorMessage = '';\n    moveTos(0);\n    throw new Error(message);\n  };\n\n  findDependenciesInScript = function(stringToBeParsed, dontGenerateCode) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, bodyForReadableSummaryOfGeneratedCode, cyclesDescriptions, deQuotedDep, dependencyInfo, eachDependency, error, generatedBody, generatedCode, i, indexOfEachReplacement, indexOfPartRemainingToBeParsed, inited, key, l1, len, len1, len2, len3, len4, len5, len6, len7, m1, n, n1, newUserSymbol, o1, origPrintMode, originalUserSymbol, parameters, q1, r1, readableSummaryOfGeneratedCode, recursedDependencies, ref2, replacementsFrom, replacementsTo, s1, scriptEvaluation, stringToBeRun, t1, testableString, timeStartFromAlgebra, toBePrinted, u1, userVariablesMentioned, value, variablesWithCycles;\n    if (DEBUG) {\n      console.log(\"stringToBeParsed: \" + stringToBeParsed);\n    }\n    timeStartFromAlgebra = new Date().getTime();\n    inited = true;\n    codeGen = true;\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    symbolsInExpressionsWithoutAssignments = [];\n    patternHasBeenFound = false;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    n = 0;\n    dependencyInfo = {\n      affectsVariables: [],\n      affectedBy: []\n    };\n    stringToBeRun = stringToBeParsed;\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n        if (DEBUG) {\n          console.log(\"findDependenciesInScript: scanning\");\n        }\n        n = scan(stringToBeParsed.substring(indexOfPartRemainingToBeParsed));\n        if (DEBUG) {\n          console.log(\"scanned\");\n        }\n        pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        errorMessage = error + \"\";\n        reset_after_error();\n        break;\n      }\n      if (n === 0) {\n        break;\n      }\n      indexOfPartRemainingToBeParsed += n;\n    }\n    testableString = \"\";\n    if (DEBUG) {\n      console.log(\"all local dependencies ----------------\");\n    }\n    testableString += \"All local dependencies: \";\n    for (key in symbolsDependencies) {\n      value = symbolsDependencies[key];\n      if (DEBUG) {\n        console.log(\"variable \" + key + \" depends on: \");\n      }\n      dependencyInfo.affectsVariables.push(key);\n      testableString += \" variable \" + key + \" depends on: \";\n      for (l1 = 0, len = value.length; l1 < len; l1++) {\n        i = value[l1];\n        if (DEBUG) {\n          console.log(\"    \" + i);\n        }\n        if (i[0] !== \"'\") {\n          dependencyInfo.affectedBy.push(i);\n        }\n        testableString += i + \", \";\n      }\n      testableString += \"; \";\n    }\n    testableString += \". \";\n    if (DEBUG) {\n      console.log(\"Symbols with reassignments ----------------\");\n    }\n    testableString += \"Symbols with reassignments: \";\n    for (m1 = 0, len1 = symbolsHavingReassignments.length; m1 < len1; m1++) {\n      key = symbolsHavingReassignments[m1];\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n    testableString += \". \";\n    if (DEBUG) {\n      console.log(\"Symbols in expressions without assignments ----------------\");\n    }\n    testableString += \"Symbols in expressions without assignments: \";\n    for (n1 = 0, len2 = symbolsInExpressionsWithoutAssignments.length; n1 < len2; n1++) {\n      key = symbolsInExpressionsWithoutAssignments[n1];\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n    testableString += \". \";\n    dependencyInfo.affectedBy.push(\"PATTERN_DEPENDENCY\");\n    if (patternHasBeenFound) {\n      dependencyInfo.affectsVariables.push(\"PATTERN_DEPENDENCY\");\n      testableString += \" - PATTERN_DEPENDENCY inserted - \";\n    }\n    if (DEBUG) {\n      console.log(\"All dependencies recursively ----------------\");\n    }\n    testableString += \"All dependencies recursively: \";\n    scriptEvaluation = [\"\", \"\"];\n    generatedCode = \"\";\n    readableSummaryOfGeneratedCode = \"\";\n    if (errorMessage === \"\" && !dontGenerateCode) {\n      try {\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n        scriptEvaluation = run(stringToBeParsed, true);\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        errorMessage = error + \"\";\n        init();\n      }\n      if (errorMessage === \"\") {\n        for (key in symbolsDependencies) {\n          codeGen = true;\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n          codeGen = false;\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" depends on: \");\n          }\n          testableString += \" variable \" + key + \" depends on: \";\n          recursedDependencies = [];\n          variablesWithCycles = [];\n          cyclesDescriptions = [];\n          recursiveDependencies(key, recursedDependencies, [], variablesWithCycles, [], cyclesDescriptions);\n          for (o1 = 0, len3 = variablesWithCycles.length; o1 < len3; o1++) {\n            i = variablesWithCycles[o1];\n            if (DEBUG) {\n              console.log(\"    --> cycle through \" + i);\n            }\n          }\n          for (q1 = 0, len4 = recursedDependencies.length; q1 < len4; q1++) {\n            i = recursedDependencies[q1];\n            if (DEBUG) {\n              console.log(\"    \" + i);\n            }\n            testableString += i + \", \";\n          }\n          testableString += \"; \";\n          for (r1 = 0, len5 = cyclesDescriptions.length; r1 < len5; r1++) {\n            i = cyclesDescriptions[r1];\n            testableString += \" \" + i + \", \";\n          }\n          if (DEBUG) {\n            console.log(\"  code generation:\" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n          push(get_binding(usr_symbol(key)));\n          replacementsFrom = [];\n          replacementsTo = [];\n          for (s1 = 0, len6 = recursedDependencies.length; s1 < len6; s1++) {\n            eachDependency = recursedDependencies[s1];\n            if (eachDependency[0] === \"'\") {\n              deQuotedDep = eachDependency.substring(1);\n              originalUserSymbol = usr_symbol(deQuotedDep);\n              newUserSymbol = usr_symbol(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\" + deQuotedDep);\n              replacementsFrom.push(originalUserSymbol);\n              replacementsTo.push(newUserSymbol);\n              push(originalUserSymbol);\n              push(newUserSymbol);\n              subst();\n              if (DEBUG) {\n                console.log(\"after substitution: \" + stack[tos - 1]);\n              }\n            }\n          }\n          try {\n            simplifyForCodeGeneration();\n          } catch (error1) {\n            error = error1;\n            if (PRINTOUTRESULT) {\n              console.log(error);\n            }\n            errorMessage = error + \"\";\n            init();\n          }\n          for (indexOfEachReplacement = t1 = 0, ref2 = replacementsFrom.length; 0 <= ref2 ? t1 < ref2 : t1 > ref2; indexOfEachReplacement = 0 <= ref2 ? ++t1 : --t1) {\n            push(replacementsTo[indexOfEachReplacement]);\n            push(replacementsFrom[indexOfEachReplacement]);\n            subst();\n          }\n          clearRenamedVariablesToAvoidBindingToExternalScope();\n          if (errorMessage === \"\") {\n            toBePrinted = pop();\n            userVariablesMentioned = [];\n            collectUserSymbols(toBePrinted, userVariablesMentioned);\n            allReturnedPlainStrings = \"\";\n            allReturnedLatexStrings = \"\";\n            codeGen = true;\n            generatedBody = toBePrinted.toString();\n            codeGen = false;\n            origPrintMode = printMode;\n            printMode = PRINTMODE_LATEX;\n            bodyForReadableSummaryOfGeneratedCode = toBePrinted.toString();\n            printMode = origPrintMode;\n            if (variablesWithCycles.indexOf(key) !== -1) {\n              generatedCode += \"// \" + key + \" is part of a cyclic dependency, no code generated.\";\n              readableSummaryOfGeneratedCode += \"#\" + key + \" is part of a cyclic dependency, no code generated.\";\n            } else {\n\n              /*\n               * using this paragraph instead of the following one\n               * creates methods signatures that\n               * are slightly less efficient\n               * i.e. variables compare even if they are\n               * simplified away.\n               * In theory these signatures are more stable, but\n               * in practice signatures vary quite a bit anyways\n               * depending on previous assignments for example,\n               * so it's unclear whether going for stability\n               * is sensible at all..\n              if recursedDependencies.length != 0\n                parameters = \"(\"\n                for i in recursedDependencies\n                  if i.indexOf(\"'\") != 0\n                    parameters += i + \", \"\n                  else\n                    if recursedDependencies.indexOf(i.substring(1)) == -1\n                      parameters += i.substring(1) + \", \"\n               */\n              userVariablesMentioned = userVariablesMentioned.filter(function(x) {\n                return predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(x + \"\") === -1;\n              });\n              userVariablesMentioned = userVariablesMentioned.filter(function(x) {\n                return recursedDependencies.indexOf(x + \"\") !== -1 || recursedDependencies.indexOf(\"\\'\" + x + \"\") !== -1;\n              });\n              if (userVariablesMentioned.length !== 0) {\n                parameters = \"(\";\n                for (u1 = 0, len7 = userVariablesMentioned.length; u1 < len7; u1++) {\n                  i = userVariablesMentioned[u1];\n                  if (i.printname !== key) {\n                    parameters += i.printname + \", \";\n                  }\n                }\n                parameters = parameters.replace(/, $/gm, \"\");\n                parameters += \")\";\n                generatedCode += key + \" = function \" + parameters + \" { return ( \" + generatedBody + \" ); }\";\n                readableSummaryOfGeneratedCode += key + parameters + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              } else {\n                generatedCode += key + \" = \" + generatedBody + \";\";\n                readableSummaryOfGeneratedCode += key + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              }\n            }\n            generatedCode += \"\\n\";\n            readableSummaryOfGeneratedCode += \"\\n\";\n            if (DEBUG) {\n              console.log(\"    \" + generatedCode);\n            }\n          }\n        }\n      }\n    }\n    generatedCode = generatedCode.replace(/\\n$/gm, \"\");\n    readableSummaryOfGeneratedCode = readableSummaryOfGeneratedCode.replace(/\\n$/gm, \"\");\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    patternHasBeenFound = false;\n    symbolsInExpressionsWithoutAssignments = [];\n    if (DEBUG) {\n      console.log(\"testable string: \" + testableString);\n    }\n    if (TIMING_DEBUGS) {\n      console.log(\"findDependenciesInScript time for: \" + stringToBeRun + \" : \" + ((new Date().getTime()) - timeStartFromAlgebra) + \"ms\");\n    }\n    return [testableString, scriptEvaluation[0], generatedCode, readableSummaryOfGeneratedCode, scriptEvaluation[1], errorMessage, dependencyInfo];\n  };\n\n  recursiveDependencies = function(variableToBeChecked, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions) {\n    var cyclesDescription, i, k, l1, len, len1, m1, ref2;\n    variablesAlreadyFleshedOut.push(variableToBeChecked);\n    if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]] != null) {\n      if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]].indexOf(\"'\" + variableToBeChecked) !== -1) {\n        if (DEBUG) {\n          console.log(\"can't keep following the chain of \" + variableToBeChecked + \" because it's actually a variable bound to a parameter\");\n        }\n        if (arrayWhereDependenciesWillBeAdded.indexOf(\"'\" + variableToBeChecked) === -1 && arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n          arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n        }\n        return arrayWhereDependenciesWillBeAdded;\n      }\n    }\n    chainBeingChecked.push(variableToBeChecked);\n    if (symbolsDependencies[variableToBeChecked] == null) {\n      if (arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n        arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n      }\n      return arrayWhereDependenciesWillBeAdded;\n    } else {\n      ref2 = symbolsDependencies[variableToBeChecked];\n      for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n        i = ref2[l1];\n        if (chainBeingChecked.indexOf(i) !== -1) {\n          if (DEBUG) {\n            console.log(\"  found cycle:\");\n          }\n          cyclesDescription = \"\";\n          for (m1 = 0, len1 = chainBeingChecked.length; m1 < len1; m1++) {\n            k = chainBeingChecked[m1];\n            if (variablesWithCycles.indexOf(k) === -1) {\n              variablesWithCycles.push(k);\n            }\n            if (DEBUG) {\n              console.log(k + \" --> \");\n            }\n            cyclesDescription += k + \" --> \";\n          }\n          if (DEBUG) {\n            console.log(\" ... then \" + i + \" again\");\n          }\n          cyclesDescription += \" ... then \" + i + \" again\";\n          cyclesDescriptions.push(cyclesDescription);\n          if (variablesWithCycles.indexOf(i) === -1) {\n            variablesWithCycles.push(i);\n          }\n        } else {\n          recursiveDependencies(i, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions);\n          chainBeingChecked.pop();\n        }\n      }\n      return arrayWhereDependenciesWillBeAdded;\n    }\n  };\n\n  inited = false;\n\n  latexErrorSign = \"\\\\rlap{\\\\large\\\\color{red}\\\\bigtriangleup}{\\\\ \\\\ \\\\tiny\\\\color{red}!}\";\n\n  turnErrorMessageToLatex = function(theErrorMessage) {\n    theErrorMessage = theErrorMessage.replace(/\\n/g, \"\");\n    theErrorMessage = theErrorMessage.replace(/_/g, \"} \\\\_ \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(transpose_unicode), 'g'), \"}{}^{T}\\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(dotprod_unicode), 'g'), \"}\\\\cdot \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"Stop:\", \"}  \\\\quad \\\\text{Stop:\");\n    theErrorMessage = theErrorMessage.replace(\"->\", \"}  \\\\rightarrow \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"?\", \"}\\\\enspace \" + latexErrorSign + \" \\\\enspace  \\\\text{\");\n    theErrorMessage = \"$$\\\\text{\" + theErrorMessage.replace(/\\n/g, \"\") + \"}$$\";\n    return theErrorMessage;\n  };\n\n  normaliseDots = function(stringToNormalise) {\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8901), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8226), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(12539), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(55296), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(65381), 'g'), String.fromCharCode(dotprod_unicode));\n    return stringToNormalise;\n  };\n\n  TIMING_DEBUGS = false;\n\n  run = function(stringToBeRun, generateLatex) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, collectedLatexResult, collectedPlainResult, error, errorWhileExecution, i, indexOfPartRemainingToBeParsed, n, stringToBeReturned, theErrorMessage, timeStart, timingDebugWrite;\n    if (generateLatex == null) {\n      generateLatex = false;\n    }\n    timeStart = new Date().getTime();\n    stringToBeRun = normaliseDots(stringToBeRun);\n    if (stringToBeRun === \"selftest\") {\n      selftest();\n      return;\n    }\n    if (!inited) {\n      inited = true;\n      init();\n    }\n    i = 0;\n    n = 0;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n        n = scan(stringToBeRun.substring(indexOfPartRemainingToBeParsed));\n        p1 = pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        allReturnedPlainStrings += error.message;\n        if (generateLatex) {\n          theErrorMessage = turnErrorMessageToLatex(error.message);\n          allReturnedLatexStrings += theErrorMessage;\n        }\n        reset_after_error();\n        break;\n      }\n      if (n === 0) {\n        break;\n      }\n      indexOfPartRemainingToBeParsed += n;\n      push(p1);\n      errorWhileExecution = false;\n      try {\n        stringsEmittedByUserPrintouts = \"\";\n        top_level_eval();\n        p2 = pop();\n        check_stack();\n        if (isstr(p2)) {\n          if (DEBUG) {\n            console.log(p2.str);\n          }\n          if (DEBUG) {\n            console.log(\"\\n\");\n          }\n        }\n        if (p2 === symbol(NIL)) {\n          collectedPlainResult = stringsEmittedByUserPrintouts;\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + stringsEmittedByUserPrintouts + \"$$\";\n          }\n        } else {\n          collectedPlainResult = print_expr(p2);\n          collectedPlainResult += \"\\n\";\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + collectLatexStringFromReturnValue(p2) + \"$$\";\n            if (DEBUG) {\n              console.log(\"collectedLatexResult: \" + collectedLatexResult);\n            }\n          }\n        }\n        allReturnedPlainStrings += collectedPlainResult;\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n        }\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"printline\");\n          }\n          if (DEBUG) {\n            console.log(collectedPlainResult);\n          }\n        }\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"display:\");\n          }\n          print2dascii(p2);\n        }\n        if (generateLatex) {\n          allReturnedLatexStrings += \"\\n\";\n        }\n      } catch (error1) {\n        error = error1;\n        errorWhileExecution = true;\n        collectedPlainResult = error.message;\n        if (generateLatex) {\n          collectedLatexResult = turnErrorMessageToLatex(error.message);\n        }\n        if (PRINTOUTRESULT) {\n          console.log(collectedPlainResult);\n        }\n        allReturnedPlainStrings += collectedPlainResult;\n        if (collectedPlainResult !== \"\") {\n          allReturnedPlainStrings += \"\\n\";\n        }\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n          allReturnedLatexStrings += \"\\n\";\n        }\n        init();\n      }\n    }\n    if (allReturnedPlainStrings[allReturnedPlainStrings.length - 1] === \"\\n\") {\n      allReturnedPlainStrings = allReturnedPlainStrings.substring(0, allReturnedPlainStrings.length - 1);\n    }\n    if (generateLatex) {\n      if (allReturnedLatexStrings[allReturnedLatexStrings.length - 1] === \"\\n\") {\n        allReturnedLatexStrings = allReturnedLatexStrings.substring(0, allReturnedLatexStrings.length - 1);\n      }\n    }\n    if (generateLatex) {\n      if (DEBUG) {\n        console.log(\"allReturnedLatexStrings: \" + allReturnedLatexStrings);\n      }\n      stringToBeReturned = [allReturnedPlainStrings, allReturnedLatexStrings];\n    } else {\n      stringToBeReturned = allReturnedPlainStrings;\n    }\n    if (TIMING_DEBUGS) {\n      timingDebugWrite = \"run time on: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStart) + \"ms\";\n      console.log(timingDebugWrite);\n    }\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    return stringToBeReturned;\n  };\n\n  check_stack = function() {\n    if (tos !== 0) {\n      debugger;\n      stop(\"stack error\");\n    }\n    if (frame !== TOS) {\n      debugger;\n      stop(\"frame error\");\n    }\n    if (chainOfUserSymbolsNotFunctionsBeingEvaluated.length !== 0) {\n      debugger;\n      stop(\"symbols evaluation still ongoing?\");\n    }\n    if (evaluatingAsFloats !== 0) {\n      debugger;\n      stop(\"numeric evaluation still ongoing?\");\n    }\n    if (evaluatingPolar !== 0) {\n      debugger;\n      return stop(\"evaluation of polar still ongoing?\");\n    }\n  };\n\n  top_level_eval = function() {\n    var evalledArgument, originalArgument, shouldAutoexpand;\n    if (DEBUG) {\n      console.log(\"#### top level eval\");\n    }\n    trigmode = 0;\n    shouldAutoexpand = symbol(AUTOEXPAND);\n    if (isZeroAtomOrTensor(get_binding(shouldAutoexpand))) {\n      expanding = 0;\n    } else {\n      expanding = 1;\n    }\n    originalArgument = top();\n    Eval();\n    evalledArgument = top();\n    if (evalledArgument === symbol(NIL)) {\n      return;\n    }\n    set_binding(symbol(LAST), evalledArgument);\n    if (!isZeroAtomOrTensor(get_binding(symbol(BAKE)))) {\n      bake();\n      evalledArgument = top();\n    }\n    if ((originalArgument === symbol(SYMBOL_I) || originalArgument === symbol(SYMBOL_J)) && isimaginaryunit(evalledArgument)) {\n\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_J)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_J);\n      return subst();\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_I)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_I);\n      return subst();\n    }\n  };\n\n  check_esc_flag = function() {\n    if (esc_flag) {\n      return stop(\"esc key\");\n    }\n  };\n\n  clearAlgebraEnvironment = function() {\n    return do_clearall();\n  };\n\n  computeDependenciesFromAlgebra = function(codeFromAlgebraBlock) {\n    var i, keepState, l1, len, len1, m1, originalcodeFromAlgebraBlock, userSimplificationsInProgramForm;\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra!!!\");\n    }\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra: patterns in the list --------------- \");\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n      console.log(\"...end of list --------------- \");\n    }\n    called_from_Algebra_block = false;\n    return findDependenciesInScript(codeFromAlgebraBlock, true)[6];\n  };\n\n  computeResultsAndJavaScriptFromAlgebra = function(codeFromAlgebraBlock) {\n    var code, dependencyInfo, i, keepState, l1, latexResult, len, len1, m1, originalcodeFromAlgebraBlock, readableSummaryOfCode, ref2, result, stringToBeRun, testableStringIsIgnoredHere, timeStartFromAlgebra, userSimplificationsInProgramForm;\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    timeStartFromAlgebra = new Date().getTime();\n    if (TIMING_DEBUGS) {\n      console.log(\" --------- computeResultsAndJavaScriptFromAlgebra input: \" + codeFromAlgebraBlock + \" at: \" + (new Date()));\n    }\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    stringToBeRun = codeFromAlgebraBlock;\n    if (DEBUG) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- \");\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n      console.log(\"...end of list --------------- \");\n    }\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n    ref2 = findDependenciesInScript(codeFromAlgebraBlock), testableStringIsIgnoredHere = ref2[0], result = ref2[1], code = ref2[2], readableSummaryOfCode = ref2[3], latexResult = ref2[4], errorMessage = ref2[5], dependencyInfo = ref2[6];\n    called_from_Algebra_block = false;\n    if (readableSummaryOfCode !== \"\" || errorMessage !== \"\") {\n      result += \"\\n\" + readableSummaryOfCode;\n      if (errorMessage !== \"\") {\n        result += \"\\n\" + errorMessage;\n      }\n      result = result.replace(/\\n/g, \"\\n\\n\");\n      latexResult += \"\\n\" + \"$$\" + readableSummaryOfCode + \"$$\";\n      if (errorMessage !== \"\") {\n        latexResult += turnErrorMessageToLatex(errorMessage);\n      }\n      latexResult = latexResult.replace(/\\n/g, \"\\n\\n\");\n    }\n    latexResult = latexResult.replace(/\\n*/, \"\");\n    latexResult = latexResult.replace(/\\$\\$\\$\\$\\n*/g, \"\");\n    code = code.replace(/Math\\./g, \"\");\n    code = code.replace(/\\n/g, \"\\n\\n\");\n    if (TIMING_DEBUGS) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: \" + stringToBeRun + \" : \" + ((new Date().getTime()) - timeStartFromAlgebra) + \"ms\");\n    }\n    return {\n      code: code,\n      result: latexResult,\n      latexResult: latexResult,\n      dependencyInfo: dependencyInfo\n    };\n  };\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).run = run;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).findDependenciesInScript = findDependenciesInScript;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeDependenciesFromAlgebra = computeDependenciesFromAlgebra;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeResultsAndJavaScriptFromAlgebra = computeResultsAndJavaScriptFromAlgebra;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).clearAlgebraEnvironment = clearAlgebraEnvironment;\n\n  tos = 0;\n\n  nil_symbols = 0;\n\n  push = function(p) {\n    if (p == null) {\n      debugger;\n    }\n    if (p.isZero != null) {\n      debugger;\n    }\n    if (p === symbol(NIL)) {\n      nil_symbols++;\n      if (DEBUG) {\n        console.log(\"pushing symbol(NIL) #\" + nil_symbols);\n      }\n    }\n    if (tos >= frame) {\n      stop(\"stack overflow\");\n    }\n    return stack[tos++] = p;\n  };\n\n  moveTos = function(stackPos) {\n    if (tos <= stackPos) {\n      tos = stackPos;\n      return;\n    }\n    while (tos > stackPos) {\n      stack[tos] = null;\n      tos--;\n    }\n  };\n\n  top = function() {\n    return stack[tos - 1];\n  };\n\n  pop = function() {\n    var elementToBeReturned;\n    if (tos === 0) {\n      debugger;\n      stop(\"stack underflow\");\n    }\n    if (stack[tos - 1] == null) {\n      debugger;\n    }\n    elementToBeReturned = stack[--tos];\n    stack[tos] = null;\n    return elementToBeReturned;\n  };\n\n  push_frame = function(n) {\n    var i, l1, ref2, results;\n    i = 0;\n    frame -= n;\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n    results = [];\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      results.push(stack[frame + i] = symbol(NIL));\n    }\n    return results;\n  };\n\n  pop_frame = function(n) {\n    frame += n;\n    if (frame > TOS) {\n      return stop(\"frame underflow\");\n    }\n  };\n\n  save = function() {\n    frame -= 10;\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n    stack[frame + 0] = p0;\n    stack[frame + 1] = p1;\n    stack[frame + 2] = p2;\n    stack[frame + 3] = p3;\n    stack[frame + 4] = p4;\n    stack[frame + 5] = p5;\n    stack[frame + 6] = p6;\n    stack[frame + 7] = p7;\n    stack[frame + 8] = p8;\n    return stack[frame + 9] = p9;\n  };\n\n  restore = function() {\n    if (frame > TOS - 10) {\n      stop(\"frame underflow\");\n    }\n    p0 = stack[frame + 0];\n    p1 = stack[frame + 1];\n    p2 = stack[frame + 2];\n    p3 = stack[frame + 3];\n    p4 = stack[frame + 4];\n    p5 = stack[frame + 5];\n    p6 = stack[frame + 6];\n    p7 = stack[frame + 7];\n    p8 = stack[frame + 8];\n    p9 = stack[frame + 9];\n    return frame += 10;\n  };\n\n  swap = function() {\n    var p, q;\n    p = pop();\n    q = pop();\n    push(p);\n    return push(q);\n  };\n\n  dupl = function() {\n    var p;\n    p = pop();\n    push(p);\n    return push(p);\n  };\n\n  $.dupl = dupl;\n\n  $.swap = swap;\n\n  $.restore = restore;\n\n  $.save = save;\n\n  $.push = push;\n\n  $.pop = pop;\n\n  Eval_symbolsinfo = function() {\n    var symbolsinfoToBePrinted;\n    symbolsinfoToBePrinted = symbolsinfo();\n    if (symbolsinfoToBePrinted !== \"\") {\n      return new_string(symbolsinfoToBePrinted);\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  symbolsinfo = function() {\n    var bindingi, i, l1, ref2, ref3, symbolsinfoToBePrinted, symtabi;\n    symbolsinfoToBePrinted = \"\";\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtabi = symtab[i] + \"\";\n      bindingi = (binding[i] + \"\").substring(0, 4);\n      symbolsinfoToBePrinted += \"symbol: \" + symtabi + \" size: \" + countsize(binding[i]) + \" value: \" + bindingi + \"...\\n\";\n    }\n    return symbolsinfoToBePrinted;\n  };\n\n  std_symbol = function(s, n, latexPrint) {\n    var p;\n    p = symtab[n];\n    if (p == null) {\n      debugger;\n    }\n    p.printname = s;\n    if (latexPrint != null) {\n      return p.latexPrint = latexPrint;\n    } else {\n      return p.latexPrint = s;\n    }\n  };\n\n  usr_symbol = function(s) {\n    var i, l1, ref2;\n    i = 0;\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (s === symtab[i].printname) {\n        return symtab[i];\n      }\n      if (symtab[i].printname === \"\") {\n        break;\n      }\n    }\n    if (i === NSYM) {\n      stop(\"symbol table overflow\");\n    }\n    symtab[i] = new U();\n    symtab[i].k = SYM;\n    symtab[i].printname = s;\n    binding[i] = symtab[i];\n    isSymbolReclaimable[i] = false;\n    return symtab[i];\n  };\n\n  get_printname = function(p) {\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    return p.printname;\n  };\n\n  set_binding = function(p, q) {\n    var indexFound;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    indexFound = symtab.indexOf(p);\n\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n     */\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> set_binding lookup \" + indexFound);\n    }\n    isSymbolReclaimable[indexFound] = false;\n    return binding[indexFound] = q;\n  };\n\n  get_binding = function(p) {\n    var indexFound;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    indexFound = symtab.indexOf(p);\n\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n     */\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> get_binding lookup \" + indexFound);\n    }\n    return binding[indexFound];\n  };\n\n  is_usr_symbol = function(p) {\n    var theSymnum;\n    if (p.k !== SYM) {\n      return false;\n    }\n    theSymnum = symnum(p);\n    if (theSymnum > PI && theSymnum !== SYMBOL_I && theSymnum !== SYMBOL_IDENTITY_MATRIX) {\n      return true;\n    }\n    return false;\n  };\n\n  lookupsTotal = 0;\n\n  symnum = function(p) {\n    var indexFound;\n    lookupsTotal++;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    indexFound = symtab.indexOf(p);\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> symnum lookup \" + indexFound + \" lookup # \" + lookupsTotal);\n    }\n    return indexFound;\n  };\n\n  push_symbol = function(k) {\n    return push(symtab[k]);\n  };\n\n  clear_symbols = function() {\n    var i, l1, ref2, ref3, results;\n    results = [];\n    for (i = l1 = ref2 = NIL + 1, ref3 = NSYM; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      results.push(isSymbolReclaimable[i] = false);\n    }\n    return results;\n  };\n\n  collectUserSymbols = function(p, accumulator) {\n    var i, l1, ref2;\n    if (accumulator == null) {\n      accumulator = [];\n    }\n    if (is_usr_symbol(p)) {\n      if (accumulator.indexOf(p) === -1) {\n        accumulator.push(p);\n        return;\n      }\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        collectUserSymbols(p.tensor.elem[i], accumulator);\n      }\n      return;\n    }\n    while (iscons(p)) {\n      collectUserSymbols(car(p), accumulator);\n      p = cdr(p);\n    }\n  };\n\n  $.get_binding = get_binding;\n\n  $.set_binding = set_binding;\n\n  $.usr_symbol = usr_symbol;\n\n  $.symbolsinfo = symbolsinfo;\n\n  $.collectUserSymbols = collectUserSymbols;\n\n  if (!inited) {\n    inited = true;\n    init();\n  }\n\n  $.init = init;\n\n  parse_internal = function(argu) {\n    if (typeof argu === 'string') {\n      return scan(argu);\n    } else if (typeof argu === 'number') {\n      if (argu % 1 === 0) {\n        return push_integer(argu);\n      } else {\n        return push_double(argu);\n      }\n    } else if (argu instanceof U) {\n      return push(argu);\n    } else {\n      console.warn('unknown argument type', argu);\n      return push(symbol(NIL));\n    }\n  };\n\n  parse = function(argu) {\n    var data, error;\n    try {\n      parse_internal(argu);\n      data = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n    return data;\n  };\n\n  exec = function() {\n    var argu, argus, error, fn, l1, len, name, result;\n    name = arguments[0], argus = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    fn = get_binding(usr_symbol(name));\n    check_stack();\n    push(fn);\n    for (l1 = 0, len = argus.length; l1 < len; l1++) {\n      argu = argus[l1];\n      parse_internal(argu);\n    }\n    list(1 + argus.length);\n    p1 = pop();\n    push(p1);\n    try {\n      top_level_eval();\n      result = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n    return result;\n  };\n\n  $.exec = exec;\n\n  $.parse = parse;\n\n  (function() {\n    var builtin_fns, fn, l1, len, results;\n    builtin_fns = [\"abs\", \"add\", \"adj\", \"and\", \"approxratio\", \"arccos\", \"arccosh\", \"arcsin\", \"arcsinh\", \"arctan\", \"arctanh\", \"arg\", \"atomize\", \"besselj\", \"bessely\", \"binding\", \"binomial\", \"ceiling\", \"check\", \"choose\", \"circexp\", \"clear\", \"clearall\", \"clearpatterns\", \"clock\", \"coeff\", \"cofactor\", \"condense\", \"conj\", \"contract\", \"cos\", \"cosh\", \"decomp\", \"defint\", \"deg\", \"denominator\", \"det\", \"derivative\", \"dim\", \"dirac\", \"divisors\", \"do\", \"dot\", \"draw\", \"dsolve\", \"eigen\", \"eigenval\", \"eigenvec\", \"erf\", \"erfc\", \"eval\", \"exp\", \"expand\", \"expcos\", \"expsin\", \"factor\", \"factorial\", \"factorpoly\", \"filter\", \"float\", \"floor\", \"for\", \"Gamma\", \"gcd\", \"hermite\", \"hilbert\", \"imag\", \"component\", \"inner\", \"integral\", \"inv\", \"invg\", \"isinteger\", \"isprime\", \"laguerre\", \"lcm\", \"leading\", \"legendre\", \"log\", \"mod\", \"multiply\", \"not\", \"nroots\", \"number\", \"numerator\", \"operator\", \"or\", \"outer\", \"pattern\", \"patternsinfo\", \"polar\", \"power\", \"prime\", \"print\", \"print2dascii\", \"printcomputer\", \"printlatex\", \"printlist\", \"printhuman\", \"product\", \"quote\", \"quotient\", \"rank\", \"rationalize\", \"real\", \"rect\", \"roots\", \"round\", \"equals\", \"shape\", \"sgn\", \"silentpattern\", \"simplify\", \"sin\", \"sinh\", \"sqrt\", \"stop\", \"subst\", \"sum\", \"symbolsinfo\", \"tan\", \"tanh\", \"taylor\", \"test\", \"testeq\", \"testge\", \"testgt\", \"testle\", \"testlt\", \"transpose\", \"unit\", \"zero\"];\n    results = [];\n    for (l1 = 0, len = builtin_fns.length; l1 < len; l1++) {\n      fn = builtin_fns[l1];\n      results.push($[fn] = exec.bind(this, fn));\n    }\n    return results;\n  })();\n\n  freeze = function() {\n    var frozenContents, frozenHash, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = [];\n    frozenContents = [];\n    frozenPatterns = [];\n    frozenHash = \"\";\n    for (i = l1 = 0, ref2 = symtab.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (isSymbolReclaimable[i] === false) {\n        frozenSymbols.push(symtab[i]);\n        frozenContents.push(binding[i]);\n      }\n    }\n    frozenPatterns = userSimplificationsInListForm.slice(0);\n    return [frozenSymbols, frozenContents, frozenPatterns, zero, one, imaginaryunit, getStateHash()];\n  };\n\n  unfreeze = function(frozen) {\n    var frozenContents, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = frozen[0], frozenContents = frozen[1], frozenPatterns = frozen[2], zero = frozen[3], one = frozen[4], imaginaryunit = frozen[5];\n    for (i = l1 = 0, ref2 = frozenSymbols.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = frozenSymbols[i];\n      binding[i] = frozenContents[i];\n    }\n    return userSimplificationsInListForm = frozenPatterns.slice(0);\n  };\n\n  compareState = function(previousHash) {\n    var frozenHash;\n    frozenHash = getStateHash();\n    if (frozenHash === previousHash) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  getStateHash = function() {\n    var bindingi, frozenHash, i, l1, len, m1, ref2, ref3, symtabi;\n    frozenHash = \"\";\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtabi = print_list(symtab[i]);\n      bindingi = print_list(binding[i]);\n      frozenHash += \" //\" + symtabi + \" : \" + bindingi;\n    }\n    for (m1 = 0, len = userSimplificationsInListForm.length; m1 < len; m1++) {\n      i = userSimplificationsInListForm[m1];\n      frozenHash += \" pattern: \" + i;\n    }\n    if (DEBUG) {\n      console.log(\"frozenHash: \" + frozenHash);\n    }\n    return frozenHash;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}